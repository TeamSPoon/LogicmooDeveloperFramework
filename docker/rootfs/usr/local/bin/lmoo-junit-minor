#!/bin/bash

good_exit=7
exitcode=${good_exit}
[ -z "${keep_going}" ] && export keep_going=""
[ "$*" == *"-k"* ] && export keep_going="-k"
runtime_testing=4
export next_cls=0
export test_completed=test_completed
if [ "$1" == "-k" ]; then
  keep_going="-k"
  runtime_testing=5
  shift
fi


[ -z "${TESTING_TEMP}" ] && [ -d "$(pwd)/test_results" ] && export TESTING_TEMP=$(pwd)/test_results/$(whoami)
[ -z "${TESTING_TEMP}" ] && [ -d "${LOGICMOO_WS}/test_results" ] && export TESTING_TEMP=${LOGICMOO_WS}/test_results/$(whoami)
[ -z "${TESTING_TEMP}" ] && export TESTING_TEMP=$(mktemp -d -t logicmoo_testing-$(date +%Y-%m-%d-%H-%M-%S)-XXXXXXXXXX)
export TESTING_TEMP
mkdir -p ${TESTING_TEMP}/


parent-find() {
  local file="$1"
  local dir="$(realpath $2)"
  # echo parent-find "$file" "$(dirname "$dir")"
  test -e "$dir/$file" && echo "$dir" && return 0
  [ '/' = "$dir" ] && return 1
  parent-find "$file" "$(dirname "$dir")"
}

export PACK_DIR=$(parent-find "pack.pl" .  )
export PACK_DIR=$(basename $PACK_DIR)
echo "<!-- PACK_DIR=${PACK_DIR}-->"

export JUNIT_PACKAGE="$PACK_DIR.$(basename `realpath .. | sed -e 's|/[^.]/|/|g' `).$(basename `realpath .`)"
echo "<!-- JUNIT_PACKAGE=${JUNIT_PACKAGE} -->"
export JUNIT_PACKAGE_STEM=$(echo "${JUNIT_PACKAGE}" | sed -e "s/\./-/g" -e "s/--/-/g" | rev | cut -c 1-110 | rev)

export GLOB="$*"
[ -z "$GLOB" ] && GLOB="*_01.*"
GLOBSTEM=$(echo "${JUNIT_PACKAGE_STEM}-${GLOB}" | sed -e "s/[*]/vSTARv/g" -e "s/[?]/vQUESTv/g" -e "s/[.]/vDOTv/g" -e "s/[^_0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz]/-/g" -e "s/--/-/g" | rev | cut -c 1-110 | rev)
echo "<!-- GLOBSTEM=${GLOBSTEM} -->"
[ -z "${TEST_STEM}" ] && export TEST_STEM=Report-${GLOBSTEM}-Units
echo "<!-- TEST_STEM=${TEST_STEM} -->"
[ -z "${TEST_STEM_PATH}" ] && export TEST_STEM_PATH="${TESTING_TEMP}/${TEST_STEM}"
echo "<!-- TEST_STEM_PATH=${TEST_STEM_PATH} -->"
echo "<!-- LOGICMOO_WS=${LOGICMOO_WS} -->"


SWIPL=swipl
if [ -z `which swipl` ]; then
    # default locations on OS X
    SWIPL=/Applications/SWI-Prolog.app/Contents/MacOS/swipl;
    if [ ! -e $SWIPL ]; then
        SWIPL=~/bin/swipl;
    fi
    if [ ! -e $SWIPL ]; then
        INFO PFC requires SWI-Prolog. Please download from http://www.swi-prolog.org/
        return 1 2>/dev/null ; exit 1
    fi
fi

OUTER_TEE=""
[ -t 1 ] && OUTER_TEE="1"


#// For test_prolog  (no args)

declare -a listOfNames=(
                        # // sanity tests
                         "*_01*.p*" "*_02*.p*"
                        # // full tests
                         "*_03*.p*" "*_04*.p*" "*_05*.p*" "*_06*.p*" "*_07*.p*" "*_08*.p*" "*_09*.p*" "*_10*.p*" "*_11*.p*" "*_12*.p*"
                        # // feature tests
                        "*_f01*.p*" "*_f02*.p*" "*_f03*.p*" "_f04*.p*" "*_f05*.p*" "*_f06*.p*" "*_f07*.p*" "*_f08*.p*" "*_f09*.p*" "*_f10*.p*" "*_f11*.p*" "*_f12*.p*"
) 

# kill old dead jobs
(kill -9  %1 %2 %6 %5 %4 %3 %2 %1) &>/dev/null
(kill -9  %1 %2 %6 %5 %4 %3 %2 %1) &>/dev/null
#[ -z "${OUTER_TEE}" ] && echo "<!--" && cls && echo -e "\n-->"
(kill -9  %1 %2 %6 %5 %4 %3 %2 %1) &>/dev/null

if [ $# -ne 0 ]
then
   listOfNames=( "$@" )
   if [ $# -eq 1 ]
   then
      [ -z "${OUTER_TEE}" ] && echo "<!-- test_completed=true -->"
      test_completed=test_completed
   else
      echo -e "" # [ -z "${OUTER_TEE}" ] && echo "<!--" && cls && echo -e "\n-->"
   fi
else
      echo -e ""
fi


export REPORT_STEM=${TEST_STEM}-Rollup
echo "<!-- REPORT_STEM=${REPORT_STEM} -->"

export JUNIT_TESTS_GLOBBED="${TESTING_TEMP}/${REPORT_STEM}"
JUNIT_TESTS_GLOBBED_TESTS=0
JUNIT_TESTS_GLOBBED_FAILURES=0
JUNIT_TESTS_GLOBBED_SKIPPED=0
JUNIT_TESTS_GLOBBED_PASSED=0
JUNIT_TESTS_GLOBBED_ERRORS=0
echo "<!-- JUNIT_TESTS_GLOBBED=${JUNIT_TESTS_GLOBBED} -->"
echo "" > ${JUNIT_TESTS_GLOBBED}.tmp

function JECHO {
 (echo -e "${*}\n") >> ${JUNIT_TESTS_GLOBBED}.tmp
}
function INFO {
 willBe=$(echo "${*}" | sed -e 's/-/=/g' ) 
 echo -e "${*}\n"
 JECHO "<!-- ${willBe}  -->"
}

me="${BASH_SOURCE[${#BASH_SOURCE[@]} - 1]}"
INFO "Running Matching Tests: $me ${keep_going} ${listOfNames[*]}"

(
for ele2 in "${listOfNames[@]}"
  do
  	for ele in $ele2
	do
	  retry=1
	  while [ $retry == 1 ]
	   do
	    retry=0

        export FILENAME=${ele}
        export JUNIT_SHORTCLASS=`echo "${FILENAME^^}" | cut -d'.' -f1 `
        export JUNIT_CLASSNAME=${JUNIT_PACKAGE}.${JUNIT_SHORTCLASS}
	export JUNIT_SUITE=${JUNIT_CLASSNAME}
        export FileTestCase="${JUNIT_CLASSNAME}@Line_9999 RUN ( ${FILENAME} )"
        INFO "FileTestCase=${FileTestCase}"
		  [[ "$ele" == *".ansi" ]] && continue
        [[ "$ele" == *".html" ]] && continue
        [[ "$ele" == *".xml" ]] && continue
        [[ "$ele" == *".sh" ]] && continue
        if [[ "$ele" == *".sh" && -x "$ele" ]]; then
         CMD="./${ele}"
        else
           if type lmoo-pfc > /dev/null 2>&1; then
             SWIPL=lmoo-clif
           fi
           if type lmoo-clif > /dev/null 2>&1; then
             SWIPL=lmoo-clif
           fi
           if type ./swipl-junit > /dev/null 2>&1; then
             SWIPL=./swipl-junit
           fi
      		#// Runs the test -f .swiplrc
            #//CMD="swipl -g 'set_prolog_flag(runtime_testing,${runtime_testing})' -g \"thread_create(['${ele}'],Id),thread_join(Id),$test_completed\" "
            #//CMD="$SWIPL -g 'set_prolog_flag(runtime_testing,${runtime_testing})' -g \"(['${ele}'])\" -g \"$test_completed\" "
            CMD="$SWIPL ${ele}"
        fi

        [ -z "${CMD_TIMEOUT}" ] && CMD_TIMEOUT="10s"
        [ -z "${CMD_WRAPPER}" ] && CMD_WRAPPER="timeout --foreground --preserve-status -s SIGKILL -k ${CMD_TIMEOUT} ${CMD_TIMEOUT}"
        CMD="${CMD_WRAPPER} ${CMD}"
	export JUNIT_CMD="${CMD}"
        JUNIT_TESTS_GLOBBED_TESTS=$((JUNIT_TESTS_GLOBBED_TESTS+1))
        INFO "CMD=$CMD"
        export TEE_FILE=${TESTING_TEMP}/CMD_LAST.ansi
        export TEE_FILE2=${TEE_FILE}.too
        ####JECHO "<system-out><![CDATA["
        INFO "${date} (cd $PWD ; $CMD)" > ${TEE_FILE}
        INFO "${date} (cd $PWD ; $CMD)" > ${TEE_FILE2}
        startTime=$(date +%s);
        ( eval $CMD ) 2>&1 | sed -r "s/\x1B\[(([0-9]{1,2})?(;)?([0-9]{1,2})?)?[m,K,H,f,J]//g" | tee -a ${TEE_FILE} | tee ${TEE_FILE2}
        exitcode=${PIPESTATUS[0]}
        endTime=$(date +%s);
        totalTime=$(($endTime-$startTime));        
        ####JECHO "]]></system-out>"

        if [ $exitcode -eq $good_exit ]; then
			[ "${next_cls}" == 1 ] && cls && next_cls=0			
         JECHO "<testcase name=\"${FileTestCase}\" classname='${JUNIT_CLASSNAME}' time='$totalTime'>"         
         JECHO "<system-out><![CDATA[$(cat ${TEE_FILE2})]]></system-out>\n"
         JECHO "</testcase>"
         INFO "SUCCESS: $0 ${keep_going} ${ele} (returned ${exitcode})"
           JUNIT_TESTS_GLOBBED_PASSED=$((JUNIT_TESTS_GLOBBED_PASSED+1))
			continue
	     fi
        JECHO "<testcase name=\"${FileTestCase}\" classname='${JUNIT_CLASSNAME}' time='$totalTime'>"
        JECHO " <failure message='FAILED: $0 ${keep_going} ${ele} (returned ${exitcode})'/>"
           JECHO "<system-err><![CDATA[$(cat ${TEE_FILE2})]]></system-err>\n"
        JECHO "</testcase>"
           JUNIT_TESTS_GLOBBED_FAILURES=$((JUNIT_TESTS_GLOBBED_FAILURES+1))

        next_cls=0

      [ "$test_completed" == 'test_completed' ] && [ $exitcode -ne 7 ] && INFO "FAILED: $0 ${keep_going} ${ele} (returned ${exitcode})"
      [ $exitcode -eq 7 ] && INFO "SUCCESS: $0 ${keep_going} ${ele} (returned ${exitcode})"
      [ $exitcode -eq 0 ] && [ "$test_completed" == 'true' ] && INFO "SUCCESS: $0 ${keep_going} ${ele} (returned ${exitcode})"
      [ $exitcode -eq 6 ] && retry=1 && continue


		# // 2 -> 1
		if [ $exitcode -eq 2 ]; then
		     [ "${keep_going}" == "-k" ] && INFO "...keep going..." && continue
		     INFO "...NOT keep going..."
		     exit 1
	        fi
		
		# // Not Abort
		[ $exitcode -ne 1 ] && [ "${keep_going}" == "-k" ] && continue

		echo "<!-- Do you wish to continue? [y]es, [a]lways [Up/r]etry or [N]o: "
		read -sN1 -r -t 0.0001 k1
		export k1
		
		while true
		do
			read -r -sn1 ans
			[ "$ans" == "" ] && break;
			case $ans in
			    A) break;;
				B) break;;
				r) break;;
            a) break;;
				y) break;;
				n) break;;
				e) break;;
				E) break;;
            D) break;;
			esac
			INFO "ans=$ans"
		done

		INFO "ans=$ans"
		
		[ "$ans" == '' ] && [ $exitcode -eq 0 ] && [ "$test_completed" == 'true' ]  && retry=1 && continue
		
		[ "$ans" == '' ] && [ $exitcode -eq 7 ] && retry=1 && cls && continue  # 7 + enter
		
		[ "$ans" == 'y' ] && continue # yes		
		[ "$ans" == 'a' ] && keep_going="-k" && continue # always
		[ "$ans" == 'B' ] && continue # down arrow
		[ "$ans" == 'A' ] && retry=1 && cls && continue  # up arrow
		[ "$ans" == 'r' ] && retry=1 && continue # retry 

		[ "$ans" == 'x' ] && return $exitcode 2>/dev/null ; exit $exitcode  # e(x)it
		[ "$ans" == 'n' ] && keep_going="" # no
		
		[ "${keep_going}" == "-k" ] && retry=0 && continue

		INFO "Exiting the script. Have a nice day!"
		return $exitcode 2>/dev/null ; exit $exitcode
	  done
	done
  done
  return $exitcode 2>/dev/null ; exit $exitcode
) 

( 
echo "<testsuites><testsuite name=\"Rollup ${JUNIT_PACKAGE} in $(pwd)\" package=\"${JUNIT_PACKAGE}\" tests=\"${JUNIT_TESTS_GLOBBED_TESTS}\" failures=\"${JUNIT_TESTS_GLOBBED_FAILURES}\" errors=\"${JUNIT_TESTS_GLOBBED_ERRORS}\"  skipped=\"${JUNIT_TESTS_GLOBBED_SKIPPED}\">"
sed -r "s/\x1B\[(([0-9]{1,2})?(;)?([0-9]{1,2})?)?[m,K,H,f,J]//g" ${JUNIT_TESTS_GLOBBED}.tmp
echo -e "\n</testsuite></testsuites>\n\n\n\n" 
) | iconv -c -t utf-8 | perl -p -e 's/[\x00-\x08\x0b-\x0c\x0e-\x1f\x7f]//g' > ${JUNIT_TESTS_GLOBBED}-Globbed-Report-junit.xml

# iconv -c -f utf-8 -t ascii ${JUNIT_TESTS_GLOBBED}.tmp2 > 
