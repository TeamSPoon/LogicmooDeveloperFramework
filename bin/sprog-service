#!/usr/bin/env swipl

:- initialization main.

:- use_module(library(main)).
:- use_module(library(optparse)).
%:- use_module(library(semweb/rdf_db)).
:- use_module(library(option)).

:- use_module(library(semweb/rdf_library)).
:- use_module(library(semweb/rdf_http_plugin)).
:- use_module(library(semweb/rdf_cache)).
:- use_module(library(semweb/rdf11)).
:- use_module(library(semweb/rdfs)).
%:- rdf_attach_library('void.ttl').
:- use_module(library(rdf_owl/owl), []).
:- use_module(library(rdf_owl)).
:- use_module(library(doc_http), []).
:- use_module(library(settings)).
:- use_module(library(http/http_host)).
:- use_module(library(http/http_path)).

:- set_setting_default(http:public_port,   443).
:- set_setting_default(http:public_scheme, https).

:- multifile http:location/3.
:- dynamic   http:location/3.

http:location(root, '/', []).

:- use_module(library(http/thread_httpd)).
:- use_module(library(http/http_dispatch)).
:- use_module(library(http/http_error)).
:- use_module(library(http/html_write)).
:- http_handler(root(.), say_hi, []).

:- use_module(library(pengines)).

%:- use_module(pengine_sandbox:sparqlprog).
%:- use_module(pengine_sandbox:sparqlprog/labelutils).
:- use_module(pengine_sandbox:library(semweb/rdf11)).
:- use_module(library(sandbox)).
:- use_module(library(semweb/rdf11)).
:- use_module(library(semweb/rdf_sandbox)).

%:- rdf_load('Homo_sapiens.owl',[register_namespaces(true)]).
:- multifile sandbox:safe_primitive/1.
sandbox:safe_primitive(rdf11:rdf(_,_,_)).
sandbox:safe_primitive(rdf11:rdf_iri(_)).

:- use_module(library(http/http_unix_daemon)).


http:location(pldoc, root(documentation), [priority(100)]).


:- rdf_set_cache_options([ global_directory('RDF-Cache'),
                           create_global_directory(true)
                         ]).

:- use_module(library(sparqlprog)).
:- use_module(library(sparqlprog/labelutils)).


main(Argv) :-
        Spec =
        [
         [opt(port), type(integer), default(4000),
          longflags(['port']),
          shortflags([p]),
          help('Port number')
         ]
        ],
        opt_parse(Spec, Argv, Opts, _Rest, [duplicated_flags(keepall)]),
        %handle_opts(Opts),
        http_server(http_dispatch, Opts),
        thread_get_message(quit).
%http_daemon([port(4000)]).



say_hi(_Request) :-
    reply_html_page(
	   [title('SparqlProg Pengine')],
	   [h1('SparqlProg Pengine'),
	        p('This is the home page of SparqlProg Pengine'),
                a([href='https://github.com/cmungall/sparqlprog'],'GitHub project')]).
