% From E: 
% 
% ':-'(call_pel_directive(translate(unskipped,'/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e.lps'))).
:- call_pel_directive(translate(unskipped,
                                '/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e.lps')).
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/ext/ec_sources/foundations/Root.e',16).
% From E: 
% 
% ':-'(call_pel_directive(translate(begining,'/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e.lps'))).
:- call_pel_directive(translate(begining,
                                '/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e.lps')).
% Sun, 21 Mar 2021 23:28:22 GMT File: <stream>(0x5555672c9900)%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: foundations/Root.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',18).
% sort boolean
% From E: 
% 
% sort(boolean).
sort(boolean).

% sort integer
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',18).
% From E: 
% 
% sort(integer).
sort(integer).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',20).
% reified sort predicate
% From E: 
% 
% reified_sort(predicate).
reified_sorts([predicate/0]).

% reified sort function
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',20).
% From E: 
% 
% reified_sort(function).
reified_sorts([function/0]).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: foundations/EC.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; Event Calculus (EC)
%;
%; @incollection{MillerShanahan:2002,
%;   author = "Rob Miller and Murray Shanahan",
%;   year = "2002",
%;   title = "Some alternative formulations of the event calculus",
%;   editor = "Antonis C. Kakas and Fariba Sadri",
%;   booktitle = "Computational Logic: Logic Programming and Beyond: Essays in Honour of \uppercase{R}obert \uppercase{A}. \uppercase{K}owalski, Part \uppercase{II}",
%;   series = "Lecture Notes in Computer Science",
%;   volume = "2408",
%;   pages = "452--490",
%;   address = "Berlin",
%;   publisher = "Springer",
%; }
%;

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',57).
% sort time: integer
% From E: 
% 
% subsort(time,integer).
subsort(time, integer).

% sort offset: integer
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',57).
% From E: 
% 
% subsort(offset,integer).
subsort(offset, integer).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',60).
% reified sort fluent
% From E: 
% 
% reified_sort(fluent).
reified_sorts([fluent/0]).

% reified sort event
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',60).
% From E: 
% 
% reified_sort(event).
reified_sorts([event/0]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',63).
% predicate Happens(event,time)
% From E: 
% 
% predicate(happens(event,time)).
mpred_prop(happens(event, time), predicate).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',63).
predicates([happens/2]).

% predicate HoldsAt(fluent,time)
% From E: 
% 
% predicate(holds(fluent,time)).
mpred_prop(holds(fluent, time), predicate).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',63).
predicates([holds/2]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',65).
% predicate ReleasedAt(fluent,time)
% From E: 
% 
% predicate(released_at(fluent,time)).
mpred_prop(released_at(fluent, time), predicate).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',65).
predicates([released_at/2]).

% predicate Initiates(event,fluent,time)
% From E: 
% 
% predicate(initiates_at(event,fluent,time)).
mpred_prop(initiates(event, fluent, time), predicate).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',65).
predicates([initiates/3]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',67).
% predicate Terminates(event,fluent,time)
% From E: 
% 
% predicate(terminates_at(event,fluent,time)).
mpred_prop(terminates(event, fluent, time), predicate).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',67).
predicates([terminates/3]).

% predicate Releases(event,fluent,time)
% From E: 
% 
% predicate(releases_at(event,fluent,time)).
mpred_prop(releases(event, fluent, time), predicate).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',67).
predicates([releases/3]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',69).
% predicate Trajectory(fluent,time,fluent,offset)
% From E: 
% 
% predicate(trajectory(fluent, time, fluent, 
%              offset)).
mpred_prop(trajectory(fluent, time, fluent, offset), predicate).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',69).
predicates([trajectory/4]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',71).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: foundations/DEC.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; Discrete Event Calculus (DEC)
%;
%; @article{Mueller:2004a,
%;   author = "Erik T. Mueller",
%;   year = "2004",
%;   title = "Event calculus reasoning through satisfiability",
%;   journal = "Journal of Logic and Computation",
%;   volume = "14",
%;   number = "5",
%;   pages = "703--730",
%; }
%;

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',102).
% sort time: integer
% From E: 
% 
% subsort(time,integer).
subsort(time, integer).

% sort offset: integer
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',102).
% From E: 
% 
% subsort(offset,integer).
subsort(offset, integer).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',105).
% reified sort fluent
% From E: 
% 
% reified_sort(fluent).
reified_sorts([fluent/0]).

% reified sort event
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',105).
% From E: 
% 
% reified_sort(event).
reified_sorts([event/0]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',108).
% predicate Happens(event,time)
% From E: 
% 
% predicate(happens(event,time)).
mpred_prop(happens(event, time), predicate).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',108).
predicates([happens/2]).

% predicate HoldsAt(fluent,time)
% From E: 
% 
% predicate(holds(fluent,time)).
mpred_prop(holds(fluent, time), predicate).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',108).
predicates([holds/2]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',110).
% predicate ReleasedAt(fluent,time)
% From E: 
% 
% predicate(released_at(fluent,time)).
mpred_prop(released_at(fluent, time), predicate).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',110).
predicates([released_at/2]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',112).
% predicate Initiates(event,fluent,time)
% From E: 
% 
% predicate(initiates_at(event,fluent,time)).
mpred_prop(initiates(event, fluent, time), predicate).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',112).
predicates([initiates/3]).

% predicate Terminates(event,fluent,time)
% From E: 
% 
% predicate(terminates_at(event,fluent,time)).
mpred_prop(terminates(event, fluent, time), predicate).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',112).
predicates([terminates/3]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',114).
% predicate Releases(event,fluent,time)
% From E: 
% 
% predicate(releases_at(event,fluent,time)).
mpred_prop(releases(event, fluent, time), predicate).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',114).
predicates([releases/3]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',116).
% [fluent,time]
% (HoldsAt(fluent,time) &
%  !ReleasedAt(fluent,time+1) &
%  !({event} Happens(event,time) & Terminates(event,fluent,time))) ->
% HoldsAt(fluent,time+1).
% From E: 
% 
% '->'(
%    ','(
%       holds(Fluent,Time), 
%       ','(
%          not(released_at(Fluent,Time+1)), 
%          not(thereExists(Event, 
%                 ','(
%                    happens(Event,Time), 
%                    terminates_at(Event,Fluent,Time)))))), 
%    holds(Fluent,Time+1)).
 %   [Time, Time+1].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',116).
if(not(holds(Fluent, Time+1)),  (not(holds(Fluent, Time));released_at(Fluent, Time+1);thereExists(Event,  (loc_at(Event, Time), terminates(Event, at(Fluent, Time)))))).


% [fluent,time]
% (!HoldsAt(fluent,time) &
%  !ReleasedAt(fluent,time+1) &
%  !({event} Happens(event,time) & Initiates(event,fluent,time))) ->
% !HoldsAt(fluent,time+1).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',123).
% From E: 
% 
% '->'(
%    ','(
%       holds(
%          not(Fluent), 
%          Time), 
%       ','(
%          not(released_at(Fluent,Time+1)), 
%          not(thereExists(Event, 
%                 ','(
%                    happens(Event,Time), 
%                    initiates_at(Event,Fluent,Time)))))), 
%    holds(
%       not(Fluent), 
%       Time+1)).
 %   [Time, Time+1].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',123).
if(holds(Fluent, Time+1),  (holds(Fluent, Time);released_at(Fluent, Time+1);thereExists(Event,  (loc_at(Event, Time), initiates(Event, at(Fluent, Time)))))).


% [fluent,time]
% (!ReleasedAt(fluent,time) &
%  !({event} Happens(event,time) & Releases(event,fluent,time))) ->
% !ReleasedAt(fluent,time+1).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',129).
% From E: 
% 
% '->'(
%    ','(
%       not(released_at(Fluent,Time)), 
%       not(thereExists(Event, 
%              ','(
%                 happens(Event,Time), 
%                 releases_at(Event,Fluent,Time))))), 
%    not(released_at(Fluent,Time+1))).
 %   [Time, Time+1].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',129).
if(released_at(Fluent, Time+1),  (released_at(Fluent, Time);thereExists(Event,  (loc_at(Event, Time), terminates(Event, at(Fluent, Time)))))).


% [fluent,time]
% (ReleasedAt(fluent,time) &
%  !({event} Happens(event,time) &
%    (Initiates(event,fluent,time) |
%     Terminates(event,fluent,time)))) ->
% ReleasedAt(fluent,time+1).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',134).
% From E: 
% 
% '->'(
%    ','(
%       released_at(Fluent,Time), 
%       not(thereExists(Event, 
%              ','(
%                 happens(Event,Time), 
%                 ';'(
%                    initiates_at(Event,Fluent,Time), 
%                    terminates_at(Event,Fluent,Time)))))), 
%    released_at(Fluent,Time+1)).
 %   [Time, Time+1].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',134).
if(not(released_at(Fluent, Time+1)),  (not(released_at(Fluent, Time));thereExists(Event,  (loc_at(Event, Time), (initiates(Event, at(Fluent, Time));terminates(Event, at(Fluent, Time))))))).


% [event,fluent,time]
% (Happens(event,time) & Initiates(event,fluent,time)) ->
% (HoldsAt(fluent,time+1) & !ReleasedAt(fluent,time+1)).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',141).
% From E: 
% 
% '->'(
%    ','(
%       happens(Event,Time), 
%       initiates_at(Event,Fluent,Time)), 
%    ','(
%       holds(Fluent,Time+1), 
%       not(released_at(Fluent,Time+1)))).
 %   [Time, Time+1].
 if((not(holds(Fluent, Time+1));released_at(Fluent, Time+1)),
       (not(holds(Event, Time));not(initiates(Event, at(Fluent, Time))))).


% [event,fluent,time]
% (Happens(event,time) & Terminates(event,fluent,time)) ->
% (!HoldsAt(fluent,time+1) & !ReleasedAt(fluent,time+1)).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',145).
% From E: 
% 
% '->'(
%    ','(
%       happens(Event,Time), 
%       terminates_at(Event,Fluent,Time)), 
%    ','(
%       holds(
%          not(Fluent), 
%          Time+1), 
%       not(released_at(Fluent,Time+1)))).
 %   [Time, Time+1].
 if((holds(Fluent, Time+1);released_at(Fluent, Time+1)),
       (not(holds(Event, Time));not(terminates(Event, at(Fluent, Time))))).


% [event,fluent,time]
% (Happens(event,time) & Releases(event,fluent,time)) ->
% ReleasedAt(fluent,time+1).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',149).
% From E: 
% 
% '->'(
%    ','(
%       happens(Event,Time), 
%       releases_at(Event,Fluent,Time)), 
%    released_at(Fluent,Time+1)).
 %   [Time, Time+1].
 if(not(released_at(Fluent, Time+1)),
       (not(holds(Event, Time));not(terminates(Event, at(Fluent, Time))))).


%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: foundations/ECCausal.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; Causal Constraints
%;
%; @inproceedings{Shanahan:1999a,
%;   author = "Murray Shanahan",
%;   year = "1999",
%;   title = "The ramification problem in the event calculus",
%;   booktitle = "\uppercase{P}roceedings of the \uppercase{S}ixteenth \uppercase{I}nternational \uppercase{J}oint \uppercase{C}onference on \uppercase{A}rtificial \uppercase{I}ntelligence",
%;   pages = "140--146",
%;   address = "San Mateo, CA",
%;   publisher = "Morgan Kaufmann",
%; }
%;

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',183).
% predicate Started(fluent,time)
% From E: 
% 
% predicate(started(fluent,time)).
mpred_prop(started(fluent, time), predicate).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',183).
predicates([started/2]).

% predicate Stopped(fluent,time)
% From E: 
% 
% predicate(stopped(fluent,time)).
mpred_prop(stopped(fluent, time), predicate).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',183).
predicates([stopped/2]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',186).
% [fluent,time]
% Started(fluent,time) <->
% (HoldsAt(fluent,time) |
%  ({event} Happens(event,time) & Initiates(event,fluent,time))).
% From E: 
% 
% <->(
%    started(Fluent,Time), 
%    ';'(
%       holds(Fluent,Time), 
%       thereExists(Event, 
%          ','(
%             happens(Event,Time), 
%             initiates_at(Event,Fluent,Time))))).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',186).
if((not(holds(Fluent, Time)), not(thereExists(Event,  (loc_at(Event, Time), initiates(Event, at(Fluent, Time)))))), not(started(Fluent, Time))),
if(not(started(Fluent, Time)),  (not(holds(Fluent, Time)), not(thereExists(Event,  (loc_at(Event, Time), initiates(Event, at(Fluent, Time))))))).


% [fluent,time]
% Stopped(fluent,time) <->
% (!HoldsAt(fluent,time) |
%  ({event} Happens(event,time) & Terminates(event,fluent,time))).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',192).
% From E: 
% 
% <->(
%    stopped(Fluent,Time), 
%    ';'(
%       holds(
%          not(Fluent), 
%          Time), 
%       thereExists(Event, 
%          ','(
%             happens(Event,Time), 
%             terminates_at(Event,Fluent,Time))))).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',192).
if((holds(Fluent, Time), not(thereExists(Event,  (loc_at(Event, Time), terminates(Event, at(Fluent, Time)))))), not(stopped(Fluent, Time))),
if(not(stopped(Fluent, Time)),  (holds(Fluent, Time), not(thereExists(Event,  (loc_at(Event, Time), terminates(Event, at(Fluent, Time))))))).

% predicate Initiated(fluent,time)
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',195).
% From E: 
% 
% predicate(initiated(fluent,time)).
mpred_prop(initiated(fluent, time), predicate).
predicates([initiated/2]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',197).
% predicate Terminated(fluent,time)
% From E: 
% 
% predicate(terminated(fluent,time)).
mpred_prop(terminated(fluent, time), predicate).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',197).
predicates([terminated/2]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',199).
% [fluent,time]
% Initiated(fluent,time) <->
% (Started(fluent,time) &
%  !({event} Happens(event,time) & Terminates(event,fluent,time))).
% From E: 
% 
% <->(
%    initiated(Fluent,Time), 
%    ','(
%       started(Fluent,Time), 
%       not(thereExists(Event, 
%              ','(
%                 happens(Event,Time), 
%                 terminates_at(Event,Fluent,Time)))))).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',199).
if((not(started(Fluent, Time));thereExists(Event,  (loc_at(Event, Time), terminates(Event, at(Fluent, Time))))), not(initiated(Fluent, Time))),
if(not(initiated(Fluent, Time)),  (not(started(Fluent, Time));thereExists(Event,  (loc_at(Event, Time), terminates(Event, at(Fluent, Time)))))).


% [fluent,time]
% Terminated(fluent,time) <->
% (Stopped(fluent,time) &
%  !({event} Happens(event,time) & Initiates(event,fluent,time))).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',205).
% From E: 
% 
% <->(
%    terminated(Fluent,Time), 
%    ','(
%       stopped(Fluent,Time), 
%       not(thereExists(Event, 
%              ','(
%                 happens(Event,Time), 
%                 initiates_at(Event,Fluent,Time)))))).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',205).
if((not(stopped(Fluent, Time));thereExists(Event,  (loc_at(Event, Time), initiates(Event, at(Fluent, Time))))), not(terminated(Fluent, Time))),
if(not(terminated(Fluent, Time)),  (not(stopped(Fluent, Time));thereExists(Event,  (loc_at(Event, Time), initiates(Event, at(Fluent, Time)))))).


%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: foundations/ECTraj.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @incollection{MillerShanahan:2002,
%;   author = "Rob Miller and Murray Shanahan",
%;   year = "2002",
%;   title = "Some alternative formulations of the event calculus",
%;   editor = "Antonis C. Kakas and Fariba Sadri",
%;   booktitle = "Computational Logic: Logic Programming and Beyond: Essays in Honour of \uppercase{R}obert \uppercase{A}. \uppercase{K}owalski, Part \uppercase{II}",
%;   series = "Lecture Notes in Computer Science",
%;   volume = "2408",
%;   pages = "452--490",
%;   address = "Berlin",
%;   publisher = "Springer",
%; }
%;

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',241).
% predicate Clipped(time,fluent,time)
% From E: 
% 
% predicate(clipped(time,fluent,time)).
mpred_prop(clipped(time, fluent, time), predicate).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',241).
predicates([clipped/3]).

% predicate Declipped(time,fluent,time)
% From E: 
% 
% predicate(declipped(time,fluent,time)).
mpred_prop(declipped(time, fluent, time), predicate).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',241).
predicates([declipped/3]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',244).
% predicate Trajectory(fluent,time,fluent,offset)
% From E: 
% 
% predicate(trajectory(fluent, time, fluent, 
%              offset)).
mpred_prop(trajectory(fluent, time, fluent, offset), predicate).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',244).
predicates([trajectory/4]).

% predicate AntiTrajectory(fluent,time,fluent,offset)
% From E: 
% 
% predicate(antiTrajectory(fluent, time, fluent, 
%              offset)).
mpred_prop(antiTrajectory(fluent, time, fluent, offset), predicate).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',244).
predicates([antiTrajectory/4]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',247).
% [event,fluent,fluent2,offset,time]
% Happens(event,time) &
% Initiates(event,fluent,time) &
% 0 < offset &
% Trajectory(fluent,time,fluent2,offset) &
% !Clipped(time,fluent,time+offset) ->
% HoldsAt(fluent2,time+offset).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',247).
% From E: 
% 
% '->'(
%    ','(
%       happens(Event,Time), 
%       ','(
%          initiates_at(Event,Fluent,Time), 
%          ','(
%             0<Offset, 
%             ','(
%                trajectory(Fluent, Time, Fluent2, 
%                   Offset), 
%                not(clipped(Time,Fluent,Time+Offset)))))), 
%    holds(Fluent2,Time+Offset)).
 %   [Time, Time+Offset].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',247).
 if(not(holds(Fluent2, Time+Offset)),
       (not(holds(Event, Time));not(initiates(Event, at(Fluent, Time)));not(comparison(0, Offset, <));not(trajectory(Fluent, Time, Fluent2, Offset));clipped(Time, Fluent, Time+Offset))).


% [event,fluent,fluent2,offset,time]
% Happens(event,time) &
% Terminates(event,fluent,time) &
% 0 < offset &
% AntiTrajectory(fluent,time,fluent2,offset) &
% !Declipped(time,fluent,time+offset) ->
% HoldsAt(fluent2,time+offset).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',256).
% From E: 
% 
% '->'(
%    ','(
%       happens(Event,Time), 
%       ','(
%          terminates_at(Event,Fluent,Time), 
%          ','(
%             0<Offset, 
%             ','(
%                antiTrajectory(Fluent, Time, Fluent2, 
%                   Offset), 
%                not(declipped(Time,Fluent,Time+Offset)))))), 
%    holds(Fluent2,Time+Offset)).
 %   [Time, Time+Offset].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',256).
 if(not(holds(Fluent2, Time+Offset)),
       (not(holds(Event, Time));not(terminates(Event, at(Fluent, Time)));not(comparison(0, Offset, <));not(antiTrajectory(Fluent, Time, Fluent2, Offset));declipped(Time, Fluent, Time+Offset))).


%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: ecnet/Ontology.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; integer
%;

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',284).
% sort diameter: integer
% From E: 
% 
% subsort(diameter,integer).
subsort(diameter, integer).
%; object

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',288).
% sort object
% From E: 
% 
% sort(object).
sort(object).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',290).
% sort agent: object
% From E: 
% 
% subsort(agent,object).
subsort(agent, object).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',292).
% sort physobj: object
% From E: 
% 
% subsort(physobj,object).
subsort(physobj, object).

% sort bed: physobj
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',292).
% From E: 
% 
% subsort(bed,physobj).
subsort(bed, physobj).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',294).
% sort snowflake: physobj
% From E: 
% 
% subsort(snowflake,physobj).
subsort(snowflake, physobj).

% sort sky: physobj
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',294).
% From E: 
% 
% subsort(sky,physobj).
subsort(sky, physobj).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',297).
% sort stuff: physobj
% From E: 
% 
% subsort(stuff,physobj).
subsort(stuff, physobj).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',299).
% sort surface: physobj
% From E: 
% 
% subsort(surface,physobj).
subsort(surface, physobj).

% sort ground: surface
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',299).
% From E: 
% 
% subsort(ground,surface).
subsort(ground, surface).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',302).
% sort snow: stuff
% From E: 
% 
% subsort(snow,stuff).
subsort(snow, stuff).

% sort ball
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',302).
% From E: 
% 
% sort(ball).
sort(ball).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',305).
% sort food: physobj
% From E: 
% 
% subsort(food,physobj).
subsort(food, physobj).

% sort fruit: food
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',305).
% From E: 
% 
% subsort(fruit,food).
subsort(fruit, food).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',307).
% sort orange: fruit
% From E: 
% 
% subsort(orange,fruit).
subsort(orange, fruit).

% sort salad: food
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',307).
% From E: 
% 
% subsort(salad,food).
subsort(salad, food).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',310).
% sort clothing: physobj
% From E: 
% 
% subsort(clothing,physobj).
subsort(clothing, physobj).

% sort scarf: clothing
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',310).
% From E: 
% 
% subsort(scarf,clothing).
subsort(scarf, clothing).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',312).
% sort hat: clothing
% From E: 
% 
% subsort(hat,clothing).
subsort(hat, clothing).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',314).
% sort vegetablematter: physobj
% From E: 
% 
% subsort(vegetablematter,physobj).
subsort(vegetablematter, physobj).

% sort coal: vegetablematter
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',314).
% From E: 
% 
% subsort(coal,vegetablematter).
subsort(coal, vegetablematter).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',317).
% sort bodypart: physobj
% From E: 
% 
% subsort(bodypart,physobj).
subsort(bodypart, physobj).

% sort hand: bodypart
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',317).
% From E: 
% 
% subsort(hand,bodypart).
subsort(hand, bodypart).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',320).
% sort papertowels: physobj
% From E: 
% 
% subsort(papertowels,physobj).
subsort(papertowels, physobj).

% sort device: physobj
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',320).
% From E: 
% 
% subsort(device,physobj).
subsort(device, physobj).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',322).
% sort electronicdevice: device
% From E: 
% 
% subsort(electronicdevice,device).
subsort(electronicdevice, device).

% sort lamp: electronicdevice
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',322).
% From E: 
% 
% subsort(lamp,electronicdevice).
subsort(lamp, electronicdevice).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',325).
% sort cat: physobj
% From E: 
% 
% subsort(cat,physobj).
subsort(cat, physobj).

% sort horse: physobj
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',325).
% From E: 
% 
% subsort(horse,physobj).
subsort(horse, physobj).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',328).
% sort weapon: physobj
% From E: 
% 
% subsort(weapon,physobj).
subsort(weapon, physobj).

% sort gun: weapon
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',328).
% From E: 
% 
% subsort(gun,weapon).
subsort(gun, weapon).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',330).
% sort bomb: weapon
% From E: 
% 
% subsort(bomb,weapon).
subsort(bomb, weapon).

% sort bullet: weapon
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',330).
% From E: 
% 
% subsort(bullet,weapon).
subsort(bullet, weapon).
%; location

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',335).
% sort location
% From E: 
% 
% sort(location).
sort(location).

% sort room: location, outside: location
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',335).
% From E: 
% 
% subsort(room,location).
subsort(room, location).
% From E: 
% 
% subsort(outside,location).
subsort(outside, location).
%; portal

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',340).
% sort portal
% From E: 
% 
% sort(portal).
sort(portal).

% sort door: portal, staircase: portal
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',340).
% From E: 
% 
% subsort(door,portal).
subsort(door, portal).
% From E: 
% 
% subsort(staircase,portal).
subsort(staircase, portal).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',342).
% sort street: portal
% From E: 
% 
% subsort(street,portal).
subsort(street, portal).

% sort track: portal
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',342).
% From E: 
% 
% subsort(track,portal).
subsort(track, portal).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',345).
% sort building
% From E: 
% 
% sort(building).
sort(building).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',347).
% sort fire: object
% From E: 
% 
% subsort(fire,object).
subsort(fire, object).

% sort smoke: physobj
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',347).
% From E: 
% 
% subsort(smoke,physobj).
subsort(smoke, physobj).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',350).
% sort furniture: physobj
% From E: 
% 
% subsort(furniture,physobj).
subsort(furniture, physobj).

% sort chair: furniture
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',350).
% From E: 
% 
% subsort(chair,furniture).
subsort(chair, furniture).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',352).
% sort table: furniture
% From E: 
% 
% subsort(table,furniture).
subsort(table, furniture).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',354).
% sort bill: physobj
% From E: 
% 
% subsort(bill,physobj).
subsort(bill, physobj).

% sort ticket: physobj
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',354).
% From E: 
% 
% subsort(ticket,physobj).
subsort(ticket, physobj).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',356).
% sort envelope: physobj
% From E: 
% 
% subsort(envelope,physobj).
subsort(envelope, physobj).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',358).
% sort text: physobj
% From E: 
% 
% subsort(text,physobj).
subsort(text, physobj).

% sort book: text
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',358).
% From E: 
% 
% subsort(book,text).
subsort(book, text).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',360).
% sort letter: text
% From E: 
% 
% subsort(letter,text).
subsort(letter, text).

% sort menu: text
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',360).
% From E: 
% 
% subsort(menu,text).
subsort(menu, text).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',363).
% sort paper: physobj
% From E: 
% 
% subsort(paper,physobj).
subsort(paper, physobj).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',365).
% sort content
% From E: 
% 
% sort(content).
sort(content).

% sort script
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',365).
% From E: 
% 
% sort(script).
sort(script).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',368).
% sort container: physobj
% From E: 
% 
% subsort(container,physobj).
subsort(container, physobj).

% sort cigarette: physobj
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',368).
% From E: 
% 
% subsort(cigarette,physobj).
subsort(cigarette, physobj).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',370).
% sort ashtray: physobj
% From E: 
% 
% subsort(ashtray,physobj).
subsort(ashtray, physobj).

% sort umbrella: physobj
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',370).
% From E: 
% 
% subsort(umbrella,physobj).
subsort(umbrella, physobj).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',373).
% sort pen: physobj
% From E: 
% 
% subsort(pen,physobj).
subsort(pen, physobj).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: ecnet/RTSpace.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; RTSpace: room-scale topological space
%;
%; We use topological and metric representations of space,
%; at two levels of granularity---room-scale and object-scale.
%; The RTSpace representation deals with topological space at
%; the scale of rooms and outdoor locations.
%; This representation of space consists of locations, which
%; are connected by portals. There are two types of locations:
%; rooms and outside areas (outsides).
%;
%; object is at location.

% fluent At(object,location)
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',404).
% From E: 
% 
% fluent(at_loc(object,location)).
mpred_prop(at_loc(object, location), fluent).
fluents([at_loc/2]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',406).
% manualrelease At
% From E: 
% 
% ':-'(call_pel_directive(manualrelease(at_loc))).
:- call_pel_directive(manualrelease(at_loc)).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',408).
% [object1,location,time]
% (% {object2} PartOf(object1,object2)) ->
% ReleasedAt(At(object1,location),time).
% From E: 
% 
% exists(Object2, 
%    '->'(
%       partOf(Object1,Object2), 
%       released_at(
%          at_loc(Object1,Location), 
%          Time))).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',408).
exists(Object2,
  (   released_at(at_loc(Object1, Location), Time)
   ;   not(partOf(Object1, Object2))
   )).


%; A state constraint says that an object
%; is at one location at a time:
% [object,location1,location2,time]
% HoldsAt(At(object,location1),time) &
% HoldsAt(At(object,location2),time) ->
% location1=location2.
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',414).
% From E: 
% 
% '->'(
%    ','(
%       holds(
%          at_loc(Object,Location1), 
%          Time), 
%       holds(
%          at_loc(Object,Location2), 
%          Time)), 
%    Location1=Location2).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',414).
 if(not(equals(Location1, Location2)),
       (not(at_loc(Object, Location1));not(at_loc(Object, Location2)))).


%; connectivity
%; Side one of portal is location.

% function Side1(portal): location
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',421).
% From E: 
% 
% function(
%    side1(portal), 
%    location).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',421).
function(side1(portal),location).
%; Side two of portal is location.

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',424).
% function Side2(portal): location
% From E: 
% 
% function(
%    side2(portal), 
%    location).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',424).
function(side2(portal),location).
%; The building of room is building.

% function BuildingOf(room): building
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',426).
% From E: 
% 
% function(
%    buildingOf(room), 
%    building).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',426).
function(buildingOf(room),building).
%; object is at a location that has portal.

% fluent NearPortal(object,portal)
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',429).
% From E: 
% 
% fluent(nearPortal(object,portal)).
mpred_prop(nearPortal(object, portal), fluent).
fluents([nearPortal/2]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',431).
% noninertial NearPortal
% From E: 
% 
% ':-'(call_pel_directive(noninertial(nearPortal))).
:- call_pel_directive(noninertial(nearPortal)).
%; A state constraint says that an object is near
%; a portal if and only if there is a location such that
%; the object is at the location and one of the sides
%; of the portal is the location:
% [object,portal,time]
% HoldsAt(NearPortal(object,portal),time) <->
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',437).
% {location}% 
%  (Side1(portal)=location|
%   Side2(portal)=location) &
%  HoldsAt(At(object,location),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',439).
% From E: 
% 
% exists(Location, 
%    <->(
%       holds(
%          nearPortal(Object,Portal), 
%          Time), 
%       ','(
%          ';'(
%             '='(
%                side1(Portal), 
%                Location), 
%             '='(
%                side2(Portal), 
%                Location)), 
%          holds(
%             at_loc(Object,Location), 
%             Time)))).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',439).
exists(Location,  (((side1(Portal, Location);side2(Portal, Location)), at_loc(Object, Location);not(nearPortal(Object, Portal))), (nearPortal(Object, Portal);not(side1(Portal, Location)), not(side2(Portal, Location));not(at_loc(Object, Location))))).


%; locking and unlocking doors
%; agent unlocks door.

% event DoorUnlock(agent,door)
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',446).
% From E: 
% 
% event(doorUnlock(agent,door)).
events([doorUnlock/2]).
mpred_prop(doorUnlock(agent, door), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',446).
actions([doorUnlock/2]).


%; agent locks door.

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',449).
% event DoorLock(agent,door)
% From E: 
% 
% event(doorLock(agent,door)).
events([doorLock/2]).
mpred_prop(doorLock(agent, door), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',449).
actions([doorLock/2]).


%; door is unlocked.

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',451).
% fluent DoorUnlocked(door)
% From E: 
% 
% fluent(doorUnlocked(door)).
mpred_prop(doorUnlocked(door), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',451).
fluents([doorUnlocked/1]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',453).
%; A precondition axiom states that
%; for an agent to unlock a door,
%; the agent must be awake,
%; the door must not already be unlocked, and
%; the agent must be near the door:
% [agent,door,time]
% Happens(DoorUnlock(agent,door),time) ->
% HoldsAt(Awake(agent),time) &
% !HoldsAt(DoorUnlocked(door),time) &
% HoldsAt(NearPortal(agent,door),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',458).
% From E: 
% 
% '->'(
%    happens(
%       doorUnlock(Agent,Door), 
%       Time), 
%    ','(
%       holds(
%          awake(Agent), 
%          Time), 
%       ','(
%          holds(
%             not(doorUnlocked(Door)), 
%             Time), 
%          holds(
%             nearPortal(Agent,Door), 
%             Time)))).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',458).
 if((not(awake(Agent));doorUnlocked(Door);not(nearPortal(Agent, Door))),
      not(doorUnlock(Agent, Door))).


%; An effect axiom states that
%; if an agent unlocks a door,
%; the door will be unlocked:
% [agent,door,time]
% Initiates(DoorUnlock(agent,door),DoorUnlocked(door),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',467).
% From E: 
% 
% initiates_at(
%    doorUnlock(Agent,Door), 
%    doorUnlocked(Door), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',467).
initiates(doorUnlock(Agent,Door),doorUnlocked(Door)).


%; A precondition axiom states that
%; for an agent to lock a door,
%; the agent must be awake,
%; the door must be unlocked, and
%; the agent must be near the door:
% [agent,door,time]
% Happens(DoorLock(agent,door),time) ->
% HoldsAt(Awake(agent),time) &
% HoldsAt(DoorUnlocked(door),time) &
% HoldsAt(NearPortal(agent,door),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',475).
% From E: 
% 
% '->'(
%    happens(
%       doorLock(Agent,Door), 
%       Time), 
%    ','(
%       holds(
%          awake(Agent), 
%          Time), 
%       ','(
%          holds(
%             doorUnlocked(Door), 
%             Time), 
%          holds(
%             nearPortal(Agent,Door), 
%             Time)))).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',475).
 if((not(awake(Agent));not(doorUnlocked(Door));not(nearPortal(Agent, Door))),
      not(doorLock(Agent, Door))).


%; An effect axiom states that
%; if an agent locks a door,
%; the door will no longer be unlocked.
% [agent,door,time]
% Terminates(DoorLock(agent,door),DoorUnlocked(door),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',484).
% From E: 
% 
% terminates_at(
%    doorLock(Agent,Door), 
%    doorUnlocked(Door), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',484).
terminates(doorLock(Agent,Door),doorUnlocked(Door)).


%; A state constraint says that if a door is open,
%; it is unlocked:
% [door,time]
% HoldsAt(DoorIsOpen(door),time) -> HoldsAt(DoorUnlocked(door),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',489).
% From E: 
% 
% '->'(
%    holds(
%       doorIsOpen(Door), 
%       Time), 
%    holds(
%       doorUnlocked(Door), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',489).
if(not(doorUnlocked(Door)),not(doorIsOpen(Door))).


%; opening and closing doors
%; agent opens door.

% event DoorOpen(agent,door)
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',494).
% From E: 
% 
% event(doorOpen(agent,door)).
events([doorOpen/2]).
mpred_prop(doorOpen(agent, door), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',494).
actions([doorOpen/2]).


%; agent closes door.

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',497).
% event DoorClose(agent,door)
% From E: 
% 
% event(doorClose(agent,door)).
events([doorClose/2]).
mpred_prop(doorClose(agent, door), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',497).
actions([doorClose/2]).


%; door is open.

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',499).
% fluent DoorIsOpen(door)
% From E: 
% 
% fluent(doorIsOpen(door)).
mpred_prop(doorIsOpen(door), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',499).
fluents([doorIsOpen/1]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',501).
%; A precondition axiom states that
%; for an agent to open a door,
%; the agent must be awake,
%; the door must not already be open,
%; the door must be unlocked, and
%; the agent must be near the door:
% [agent,door,time]
% Happens(DoorOpen(agent,door),time) ->
% HoldsAt(Awake(agent),time) &
% !HoldsAt(DoorIsOpen(door),time) &
% HoldsAt(DoorUnlocked(door),time) &
% HoldsAt(NearPortal(agent,door),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',507).
% From E: 
% 
% '->'(
%    happens(
%       doorOpen(Agent,Door), 
%       Time), 
%    ','(
%       holds(
%          awake(Agent), 
%          Time), 
%       ','(
%          holds(
%             not(doorIsOpen(Door)), 
%             Time), 
%          ','(
%             holds(
%                doorUnlocked(Door), 
%                Time), 
%             holds(
%                nearPortal(Agent,Door), 
%                Time))))).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',507).
 if((not(awake(Agent));doorIsOpen(Door);not(doorUnlocked(Door));not(nearPortal(Agent, Door))),
      not(doorOpen(Agent, Door))).


%; An effect axiom states that
%; if an agent opens a door,
%; the door will be open:
% [agent,door,time]
% Initiates(DoorOpen(agent,door),DoorIsOpen(door),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',517).
% From E: 
% 
% initiates_at(
%    doorOpen(Agent,Door), 
%    doorIsOpen(Door), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',517).
initiates(doorOpen(Agent,Door),doorIsOpen(Door)).


%; A precondition axiom states that
%; for an agent to close a door,
%; the agent must be awake,
%; the door must be open,
%; the door must be unlocked, and
%; the agent must be near the door:
% [agent,door,time]
% Happens(DoorClose(agent,door),time) ->
% HoldsAt(Awake(agent),time) &
% HoldsAt(DoorIsOpen(door),time) &
% HoldsAt(DoorUnlocked(door),time) &
% HoldsAt(NearPortal(agent,door),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',526).
% From E: 
% 
% '->'(
%    happens(
%       doorClose(Agent,Door), 
%       Time), 
%    ','(
%       holds(
%          awake(Agent), 
%          Time), 
%       ','(
%          holds(
%             doorIsOpen(Door), 
%             Time), 
%          ','(
%             holds(
%                doorUnlocked(Door), 
%                Time), 
%             holds(
%                nearPortal(Agent,Door), 
%                Time))))).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',526).
 if((not(awake(Agent));not(doorIsOpen(Door));not(doorUnlocked(Door));not(nearPortal(Agent, Door))),
      not(doorClose(Agent, Door))).


%; An effect axiom states that
%; if an agent closes a door,
%; the door will no longer be open:
% [agent,door,time]
% Terminates(DoorClose(agent,door),DoorIsOpen(door),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',536).
% From E: 
% 
% terminates_at(
%    doorClose(Agent,Door), 
%    doorIsOpen(Door), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',536).
terminates(doorClose(Agent,Door),doorIsOpen(Door)).


%; passing through doors
%; agent walks through side one of door.

% event WalkThroughDoor12(agent,door)
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',541).
% From E: 
% 
% event(walkThroughDoor12(agent,door)).
events([walkThroughDoor12/2]).
mpred_prop(walkThroughDoor12(agent, door), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',541).
actions([walkThroughDoor12/2]).


%; agent walks through side two of door.

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',544).
% event WalkThroughDoor21(agent,door)
% From E: 
% 
% event(walkThroughDoor21(agent,door)).
events([walkThroughDoor21/2]).
mpred_prop(walkThroughDoor21(agent, door), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',544).
actions([walkThroughDoor21/2]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',546).
%; Precondition axioms state that
%; for an agent to walk through a side of a door,
%; the agent must be awake and standing,
%; the door must be open, and
%; the agent must be at the side of the door that
%; the agent walks through:
% [agent,door,time]
% Happens(WalkThroughDoor12(agent,door),time) ->
% HoldsAt(Awake(agent),time) &
% HoldsAt(Standing(agent),time) &
% HoldsAt(DoorIsOpen(door),time) &
% HoldsAt(At(agent,Side1(door)),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',552).
% From E: 
% 
% '->'(
%    happens(
%       walkThroughDoor12(Agent,Door), 
%       Time), 
%    ','(
%       holds(
%          awake(Agent), 
%          Time), 
%       ','(
%          holds(
%             standing(Agent), 
%             Time), 
%          ','(
%             holds(
%                doorIsOpen(Door), 
%                Time), 
%             holds(
%                at_loc(Agent, 
%                   side1(Door)), 
%                Time))))).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',552).
 if((not(awake(Agent));not(standing(Agent));not(doorIsOpen(Door));not(at_loc(Agent, side1(Door)))),
      not(walkThroughDoor12(Agent, Door))).


% [agent,door,time]
% Happens(WalkThroughDoor21(agent,door),time) ->
% HoldsAt(Awake(agent),time) &
% HoldsAt(Standing(agent),time) &
% HoldsAt(DoorIsOpen(door),time) &
% HoldsAt(At(agent,Side2(door)),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',560).
% From E: 
% 
% '->'(
%    happens(
%       walkThroughDoor21(Agent,Door), 
%       Time), 
%    ','(
%       holds(
%          awake(Agent), 
%          Time), 
%       ','(
%          holds(
%             standing(Agent), 
%             Time), 
%          ','(
%             holds(
%                doorIsOpen(Door), 
%                Time), 
%             holds(
%                at_loc(Agent, 
%                   side2(Door)), 
%                Time))))).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',560).
 if((not(awake(Agent));not(standing(Agent));not(doorIsOpen(Door));not(at_loc(Agent, side2(Door)))),
      not(walkThroughDoor21(Agent, Door))).


%; Effect axioms state that
%; if an agent walks through one side of a door,
%; the agent will be at the other side of the door:
% [agent,door,location,time]
% Side2(door)=location ->
% Initiates(WalkThroughDoor12(agent,door),At(agent,location),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',569).
% From E: 
% 
% '->'(
%    '='(
%       side2(Door), 
%       Location), 
%    initiates_at(
%       walkThroughDoor12(Agent,Door), 
%       at_loc(Agent,Location), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',569).
if(not(initiates(walkThroughDoor12(Agent,Door),
		 at(at_loc(Agent,Location),Time))),
   not(side2(Door,Location))).


% [agent,door,location,time]
% Side1(door)=location ->
% Initiates(WalkThroughDoor21(agent,door),At(agent,location),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',574).
% From E: 
% 
% '->'(
%    '='(
%       side1(Door), 
%       Location), 
%    initiates_at(
%       walkThroughDoor21(Agent,Door), 
%       at_loc(Agent,Location), 
%       Time)).
 %   [Time].
if(not(initiates(walkThroughDoor21(Agent,Door),
		 at(at_loc(Agent,Location),Time))),
   not(side1(Door,Location))).


% [agent,door,location,time]
% Side1(door)=location ->
% Terminates(WalkThroughDoor12(agent,door),At(agent,location),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',578).
% From E: 
% 
% '->'(
%    '='(
%       side1(Door), 
%       Location), 
%    terminates_at(
%       walkThroughDoor12(Agent,Door), 
%       at_loc(Agent,Location), 
%       Time)).
 %   [Time].
if(not(terminates(walkThroughDoor12(Agent,Door),
		  at(at_loc(Agent,Location),Time))),
   not(side1(Door,Location))).


% [agent,door,location,time]
% Side2(door)=location ->
% Terminates(WalkThroughDoor21(agent,door),At(agent,location),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',582).
% From E: 
% 
% '->'(
%    '='(
%       side2(Door), 
%       Location), 
%    terminates_at(
%       walkThroughDoor21(Agent,Door), 
%       at_loc(Agent,Location), 
%       Time)).
 %   [Time].
if(not(terminates(walkThroughDoor21(Agent,Door),
		  at(at_loc(Agent,Location),Time))),
   not(side2(Door,Location))).


%; walking from one end of a street to another
%; agent walks from the first end of street to the second end.

% event WalkStreet12(agent,street)
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',587).
% From E: 
% 
% event(walkStreet12(agent,street)).
events([walkStreet12/2]).
mpred_prop(walkStreet12(agent, street), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',587).
actions([walkStreet12/2]).


%; agent walks from the second end of street to the first end.

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',590).
% event WalkStreet21(agent,street)
% From E: 
% 
% event(walkStreet21(agent,street)).
events([walkStreet21/2]).
mpred_prop(walkStreet21(agent, street), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',590).
actions([walkStreet21/2]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',592).
%; Precondition axioms state that
%; for an agent to walk from one end of a street to another,
%; the agent must be awake,
%; the agent must be standing, and
%; the agent must be at the first end of the street:
% [agent,street,time]
% Happens(WalkStreet12(agent,street),time) ->
% HoldsAt(Awake(agent),time) &
% HoldsAt(Standing(agent),time) &
% HoldsAt(At(agent,Side1(street)),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',597).
% From E: 
% 
% '->'(
%    happens(
%       walkStreet12(Agent,Street), 
%       Time), 
%    ','(
%       holds(
%          awake(Agent), 
%          Time), 
%       ','(
%          holds(
%             standing(Agent), 
%             Time), 
%          holds(
%             at_loc(Agent, 
%                side1(Street)), 
%             Time)))).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',597).
 if((not(awake(Agent));not(standing(Agent));not(at_loc(Agent, side1(Street)))),
      not(walkStreet12(Agent, Street))).


% [agent,street,time]
% Happens(WalkStreet21(agent,street),time) ->
% HoldsAt(Awake(agent),time) &
% HoldsAt(Standing(agent),time) &
% HoldsAt(At(agent,Side2(street)),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',604).
% From E: 
% 
% '->'(
%    happens(
%       walkStreet21(Agent,Street), 
%       Time), 
%    ','(
%       holds(
%          awake(Agent), 
%          Time), 
%       ','(
%          holds(
%             standing(Agent), 
%             Time), 
%          holds(
%             at_loc(Agent, 
%                side2(Street)), 
%             Time)))).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',604).
 if((not(awake(Agent));not(standing(Agent));not(at_loc(Agent, side2(Street)))),
      not(walkStreet21(Agent, Street))).


%; Effect axioms state that
%; if an agent walks from one end of a street to another,
%; the agent will be at the other end of the street:
% [agent,street,location,time]
% Side2(street)=location ->
% Initiates(WalkStreet12(agent,street),At(agent,location),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',612).
% From E: 
% 
% '->'(
%    '='(
%       side2(Street), 
%       Location), 
%    initiates_at(
%       walkStreet12(Agent,Street), 
%       at_loc(Agent,Location), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',612).
if(not(initiates(walkStreet12(Agent,Street),
		 at(at_loc(Agent,Location),Time))),
   not(side2(Street,Location))).


% [agent,street,location,time]
% Side1(street)=location ->
% Initiates(WalkStreet21(agent,street),At(agent,location),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',617).
% From E: 
% 
% '->'(
%    '='(
%       side1(Street), 
%       Location), 
%    initiates_at(
%       walkStreet21(Agent,Street), 
%       at_loc(Agent,Location), 
%       Time)).
 %   [Time].
if(not(initiates(walkStreet21(Agent,Street),
		 at(at_loc(Agent,Location),Time))),
   not(side1(Street,Location))).


% [agent,street,location,time]
% Side1(street)=location ->
% Terminates(WalkStreet12(agent,street),At(agent,location),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',621).
% From E: 
% 
% '->'(
%    '='(
%       side1(Street), 
%       Location), 
%    terminates_at(
%       walkStreet12(Agent,Street), 
%       at_loc(Agent,Location), 
%       Time)).
 %   [Time].
if(not(terminates(walkStreet12(Agent,Street),
		  at(at_loc(Agent,Location),Time))),
   not(side1(Street,Location))).


% [agent,street,location,time]
% Side2(street)=location ->
% Terminates(WalkStreet21(agent,street),At(agent,location),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',625).
% From E: 
% 
% '->'(
%    '='(
%       side2(Street), 
%       Location), 
%    terminates_at(
%       walkStreet21(Agent,Street), 
%       at_loc(Agent,Location), 
%       Time)).
 %   [Time].
if(not(terminates(walkStreet21(Agent,Street),
		  at(at_loc(Agent,Location),Time))),
   not(side2(Street,Location))).


%; floors
%; The floor of room is integer.

% function Floor(room): integer
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',630).
% From E: 
% 
% function(
%    floor(room), 
%    integer).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',630).
function(floor(room),integer).
%; walking up and down staircases
%; agent walks down staircase.

% event WalkDownStaircase(agent,staircase)
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',635).
% From E: 
% 
% event(walkDownStaircase(agent,staircase)).
events([walkDownStaircase/2]).
mpred_prop(walkDownStaircase(agent, staircase), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',635).
actions([walkDownStaircase/2]).


%; agent walks up staircase.

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',638).
% event WalkUpStaircase(agent,staircase)
% From E: 
% 
% event(walkUpStaircase(agent,staircase)).
events([walkUpStaircase/2]).
mpred_prop(walkUpStaircase(agent, staircase), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',638).
actions([walkUpStaircase/2]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',640).
%; Precondition axioms state that
%; for an agent to walk down (up) a staircase,
%; the agent must be awake, standing, and
%; at the top (bottom) of the staircase:
% [agent,staircase,time]
% Happens(WalkDownStaircase(agent,staircase),time) ->
% HoldsAt(Awake(agent),time) &
% HoldsAt(Standing(agent),time) &
% HoldsAt(At(agent,Side2(staircase)),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',644).
% From E: 
% 
% '->'(
%    happens(
%       walkDownStaircase(Agent,Staircase), 
%       Time), 
%    ','(
%       holds(
%          awake(Agent), 
%          Time), 
%       ','(
%          holds(
%             standing(Agent), 
%             Time), 
%          holds(
%             at_loc(Agent, 
%                side2(Staircase)), 
%             Time)))).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',644).
 if((not(awake(Agent));not(standing(Agent));not(at_loc(Agent, side2(Staircase)))),
      not(walkDownStaircase(Agent, Staircase))).


% [agent,staircase,time]
% Happens(WalkUpStaircase(agent,staircase),time) ->
% HoldsAt(Awake(agent),time) &
% HoldsAt(Standing(agent),time) &
% HoldsAt(At(agent,Side1(staircase)),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',651).
% From E: 
% 
% '->'(
%    happens(
%       walkUpStaircase(Agent,Staircase), 
%       Time), 
%    ','(
%       holds(
%          awake(Agent), 
%          Time), 
%       ','(
%          holds(
%             standing(Agent), 
%             Time), 
%          holds(
%             at_loc(Agent, 
%                side1(Staircase)), 
%             Time)))).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',651).
 if((not(awake(Agent));not(standing(Agent));not(at_loc(Agent, side1(Staircase)))),
      not(walkUpStaircase(Agent, Staircase))).


%; Effect axioms state that
%; if an agent walks down (up) a staircase,
%; the agent will be at the bottom (top) of the staircase:
% [agent,staircase,room,time]
% Side1(staircase)=room ->
% Initiates(WalkDownStaircase(agent,staircase),At(agent,room),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',659).
% From E: 
% 
% '->'(
%    '='(
%       side1(Staircase), 
%       Room), 
%    initiates_at(
%       walkDownStaircase(Agent,Staircase), 
%       at_loc(Agent,Room), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',659).
if(not(initiates(walkDownStaircase(Agent,Staircase),
		 at(at_loc(Agent,Room),Time))),
   not(side1(Staircase,Room))).


% [agent,staircase,room,time]
% Side2(staircase)=room ->
% Terminates(WalkDownStaircase(agent,staircase),At(agent,room),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',664).
% From E: 
% 
% '->'(
%    '='(
%       side2(Staircase), 
%       Room), 
%    terminates_at(
%       walkDownStaircase(Agent,Staircase), 
%       at_loc(Agent,Room), 
%       Time)).
 %   [Time].
if(not(terminates(walkDownStaircase(Agent,Staircase),
		  at(at_loc(Agent,Room),Time))),
   not(side2(Staircase,Room))).


% [agent,staircase,room,time]
% Side2(staircase)=room ->
% Initiates(WalkUpStaircase(agent,staircase),At(agent,room),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',668).
% From E: 
% 
% '->'(
%    '='(
%       side2(Staircase), 
%       Room), 
%    initiates_at(
%       walkUpStaircase(Agent,Staircase), 
%       at_loc(Agent,Room), 
%       Time)).
 %   [Time].
if(not(initiates(walkUpStaircase(Agent,Staircase),
		 at(at_loc(Agent,Room),Time))),
   not(side2(Staircase,Room))).


% [agent,staircase,room,time]
% Side1(staircase)=room ->
% Terminates(WalkUpStaircase(agent,staircase),At(agent,room),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',672).
% From E: 
% 
% '->'(
%    '='(
%       side1(Staircase), 
%       Room), 
%    terminates_at(
%       walkUpStaircase(Agent,Staircase), 
%       at_loc(Agent,Room), 
%       Time)).
 %   [Time].
if(not(terminates(walkUpStaircase(Agent,Staircase),
		  at(at_loc(Agent,Room),Time))),
   not(side1(Staircase,Room))).


%; A state constraint says that if an agent is outside,
%; the agent is dressed.
% [agent,outside,time]
% HoldsAt(At(agent,outside),time) ->
% HoldsAt(Dressed(agent),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',677).
% From E: 
% 
% '->'(
%    holds(
%       at_loc(Agent,Outside), 
%       Time), 
%    holds(
%       dressed(Agent), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',677).
if(not(dressed(Agent)),not(at_loc(Agent,Outside))).


%; room looks out onto outside.

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',682).
% function LookOutOnto(room): outside
% From E: 
% 
% function(
%    lookOutOnto(room), 
%    outside).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',682).
function(lookOutOnto(room),outside).
%; location1 is adjacent to location2.

% predicate Adjacent(location,location)
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',684).
% From E: 
% 
% predicate(adjacent(location,location)).
mpred_prop(adjacent(location, location), predicate).
predicates([adjacent/2]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',687).
%; A state constraint says that
%; two locations are adjacent if and only if
%; they have a portal in common:
% [location1,location2]
 
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',690).
% Adjacent(location1,location2) <->
% {portal}% 
% (Side1(portal)=location1 &
%  Side2(portal)=location2) |
% (Side2(portal)=location1 &
%  Side1(portal)=location2).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',690).
% From E: 
% 
% exists(Portal, 
%    <->(
%       adjacent(Location1,Location2), 
%       ';'(
%          ','(
%             '='(
%                side1(Portal), 
%                Location1), 
%             '='(
%                side2(Portal), 
%                Location2)), 
%          ','(
%             '='(
%                side2(Portal), 
%                Location1), 
%             '='(
%                side1(Portal), 
%                Location2))))).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',690).
exists(Portal,  (((side1(Portal, Location1), side2(Portal, Location2);side2(Portal, Location1), side1(Portal, Location2));not(adjacent(Location1, Location2))), (adjacent(Location1, Location2);(not(side1(Portal, Location1));not(side2(Portal, Location2))), (not(side2(Portal, Location1));not(side1(Portal, Location2)))))).


%; The ground of outside is ground.

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',698).
% function GroundOf(outside): ground
% From E: 
% 
% function(
%    groundOf(outside), 
%    ground).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',698).
function(groundOf(outside),ground).
%; The sky of outside is sky.

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',700).
% function SkyOf(outside): sky
% From E: 
% 
% function(
%    skyOf(outside), 
%    sky).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',700).
function(skyOf(outside),sky).
%; State constraints fix the location of ground and sky:
% [outside,ground,time]
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',704).
% GroundOf(outside) = ground ->
% HoldsAt(At(ground,outside),time).
% From E: 
% 
% '->'(
%    '='(
%       groundOf(Outside), 
%       Ground), 
%    holds(
%       at_loc(Ground,Outside), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',704).
if(not(at_loc(Ground,Outside)),
   not(groundOf(Outside,Ground))).


% [outside,sky,time]
% SkyOf(outside) = sky ->
% HoldsAt(At(sky,outside),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',708).
% From E: 
% 
% '->'(
%    '='(
%       skyOf(Outside), 
%       Sky), 
%    holds(
%       at_loc(Sky,Outside), 
%       Time)).
 %   [Time].
if(not(at_loc(Sky,Outside)),
   not(skyOf(Outside,Sky))).


%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: ecnet/OTSpace.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; OTSpace: object-scale topological space
%;
%; The OTSpace representation deals with topological space at
%; the scale of objects such as agents (humans and animals)
%; and physical objects.
%;
%; PartOf
%; physobj is a part of object.

% predicate PartOf(physobj,object)
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',738).
% From E: 
% 
% predicate(partOf(physobj,object)).
mpred_prop(partOf(physobj, object), predicate).
predicates([partOf/2]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',741).
%; A state constraint says that if a physical object
%; is part of an object, the location of the
%; physical object is the same as the location of the object:
% [physobj,object,location,time]
% PartOf(physobj,object) &
% HoldsAt(At(object,location),time) ->
% HoldsAt(At(physobj,location),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',744).
% From E: 
% 
% '->'(
%    ','(
%       partOf(Physobj,Object), 
%       holds(
%          at_loc(Object,Location), 
%          Time)), 
%    holds(
%       at_loc(Physobj,Location), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',744).
 if(not(at_loc(Physobj, Location)),
       (not(partOf(Physobj, Object));not(at_loc(Object, Location)))).


%; rolling a snowball bigger
%; agent rolls stuff1 along stuff2.

% event RollAlong(agent,stuff,stuff)
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',751).
% From E: 
% 
% event(rollAlong(agent,stuff,stuff)).
events([rollAlong/3]).
mpred_prop(rollAlong(agent, stuff, stuff), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',751).
actions([rollAlong/3]).


%; The diameter of ball is diameter.

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',754).
% fluent Diameter(ball,diameter)
% From E: 
% 
% fluent(diameter(ball,diameter)).
mpred_prop(diameter(ball, diameter), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',754).
fluents([diameter/2]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',756).
%; A state constraint says that a ball has a unique diameter:
% [ball,diameter1,diameter2,time]
% HoldsAt(Diameter(ball,diameter1),time) &
% HoldsAt(Diameter(ball,diameter2),time) ->
% diameter1=diameter2.
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',758).
% From E: 
% 
% '->'(
%    ','(
%       holds(
%          diameter(Ball,Diameter1), 
%          Time), 
%       holds(
%          diameter(Ball,Diameter2), 
%          Time)), 
%    Diameter1=Diameter2).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',758).
 if(not(equals(Diameter1, Diameter2)),
       (not(diameter(Ball, Diameter1));not(diameter(Ball, Diameter2)))).


%; Effect axiom state that if an agent rolls some snow along
%; some other snow, the diameter of the first snow will increase:
% [agent,snow1,snow2,diameter1,diameter2,time]
% HoldsAt(Diameter(snow1,diameter1),time) &
% diameter2 = diameter1+1 ->
% Initiates(RollAlong(agent,snow1,snow2),
%           Diameter(snow1,diameter2),
%           time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',764).
% From E: 
% 
% '->'(
%    ','(
%       holds(
%          diameter(Snow1,Diameter1), 
%          Time), 
%       Diameter2=Diameter1+1), 
%    initiates_at(
%       rollAlong(Agent,Snow1,Snow2), 
%       diameter(Snow1,Diameter2), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',764).
 if(not(initiates(rollAlong(Agent, Snow1, Snow2),
                    at(diameter(Snow1, Diameter2), Time))),
       (not(holds(diameter(Snow1, Diameter1), Time));not(equals(Diameter2, Diameter1+1)))).


% [agent,snow1,snow2,diameter1,time]
% HoldsAt(Diameter(snow1,diameter1),time) ->
% Terminates(RollAlong(agent,snow1,snow2),
%            Diameter(snow1,diameter1),
%            time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',772).
% From E: 
% 
% '->'(
%    holds(
%       diameter(Snow1,Diameter1), 
%       Time), 
%    terminates_at(
%       rollAlong(Agent,Snow1,Snow2), 
%       diameter(Snow1,Diameter1), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',772).
if(not(terminates(rollAlong(Agent,Snow1,Snow2),
		  at(diameter(Snow1,Diameter1),Time))),
   not(holds(diameter(Snow1,Diameter1),Time))).


%; A precondition axiom states that
%; for an agent to roll some snow along some other snow,
%; there must be a location such that
%; the agent is at the location,
%; the first snow is at the location, and
%; the second snow is at the location:
%;[agent,snow1,snow2,time]
%;Happens(RollAlong(agent,snow1,snow2),time) ->
%;{location}
%;HoldsAt(At(agent,location),time) &
%;HoldsAt(At(snow1,location),time) &
%;HoldsAt(At(snow2,location),time).
%; motion
%; object moves (in place).

% event Move(object)
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',792).
% From E: 
% 
% event(move(object)).
mpred_prop(move(object), event).
events([move/1]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',795).
%; Holding
%; agent is holding physobj.

% fluent Holding(agent,physobj)
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',797).
% From E: 
% 
% fluent(holding(agent,physobj)).
mpred_prop(holding(agent, physobj), fluent).
fluents([holding/2]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',797).
%; agent holds or picks up physobj.

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',800).
% event Hold(agent,physobj)
% From E: 
% 
% event(hold(agent,physobj)).
events([hold/2]).
mpred_prop(hold(agent, physobj), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',800).
actions([hold/2]).


%; agent picks up some stuff1 from stuff2.

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',802).
% event HoldSome(agent,stuff,stuff)
% From E: 
% 
% event(holdSome(agent,stuff,stuff)).
events([holdSome/3]).
mpred_prop(holdSome(agent, stuff, stuff), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',802).
actions([holdSome/3]).


%; agent releases or lets go of physobj.

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',804).
% event LetGoOf(agent,physobj)
% From E: 
% 
% event(letGoOf(agent,physobj)).
events([letGoOf/2]).
mpred_prop(letGoOf(agent, physobj), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',804).
actions([letGoOf/2]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',806).
%; An effect axiom states that if an agent holds
%; a physical object, the agent will be holding the
%; physical object:
% [agent,physobj,time]
% Initiates(Hold(agent,physobj),Holding(agent,physobj),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',809).
% From E: 
% 
% initiates_at(
%    hold(Agent,Physobj), 
%    holding(Agent,Physobj), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',809).
initiates(hold(Agent,Physobj),
	  holding(Agent,Physobj)).


%; A precondition axiom states that
%; for an agent to hold a physical object,
%; there must be a location such that
%; the agent is at the location and
%; the physical object is at the location:
%;[agent,physobj,time]
%;Happens(Hold(agent,physobj),time) ->
%;{location}
%;  HoldsAt(At(agent,location),time) &
%;  HoldsAt(At(physobj,location),time).
%; An effect axiom states that if an agent
%; lets go of a physical object, the agent is no longer holding
%; the physical object:
% [agent,physobj,time]
% Terminates(LetGoOf(agent,physobj),Holding(agent,physobj),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',826).
% From E: 
% 
% terminates_at(
%    letGoOf(Agent,Physobj), 
%    holding(Agent,Physobj), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',826).
terminates(letGoOf(Agent,Physobj),
	   holding(Agent,Physobj)).


%; A precondition axiom states that
%; for an agent to let go of a physical object,
%; the agent must be holding the physical object:
% [agent,physobj,time]
% Happens(LetGoOf(agent,physobj),time) ->
% HoldsAt(Holding(agent,physobj),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',832).
% From E: 
% 
% '->'(
%    happens(
%       letGoOf(Agent,Physobj), 
%       Time), 
%    holds(
%       holding(Agent,Physobj), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',832).
if(not(holding(Agent,Physobj)),
   not(letGoOf(Agent,Physobj))).


%; A releases axiom states that if an agent holds
%; a physical object,
%; the physical object's location will be released
%; from inertia:
% [agent,physobj,location,time]
% Releases(Hold(agent,physobj),At(physobj,location),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',840).
% From E: 
% 
% releases_at(
%    hold(Agent,Physobj), 
%    at_loc(Physobj,Location), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',840).
releases(hold(Agent,Physobj),
	 at_loc(Physobj,Location)).


%; A state constraint says that if an agent is holding
%; a physical object and the agent is at a location,
%; the physical object is also at the location:
% [agent,physobj,location,time]
% HoldsAt(Holding(agent,physobj),time) &
% HoldsAt(At(agent,location),time) ->
% HoldsAt(At(physobj,location),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',846).
% From E: 
% 
% '->'(
%    ','(
%       holds(
%          holding(Agent,Physobj), 
%          Time), 
%       holds(
%          at_loc(Agent,Location), 
%          Time)), 
%    holds(
%       at_loc(Physobj,Location), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',846).
 if(not(at_loc(Physobj, Location)),
       (not(holding(Agent, Physobj));not(at_loc(Agent, Location)))).


%; A releases axiom states that if an agent holds
%; a physical object,
%; the locations of the parts of the physical object
%; will be released from inertia:
% [agent,physobj1,physobj2,location,time]
% PartOf(physobj1,physobj2) ->
% Releases(Hold(agent,physobj2),At(physobj1,location),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',855).
% From E: 
% 
% '->'(
%    partOf(Physobj1,Physobj2), 
%    releases_at(
%       hold(Agent,Physobj2), 
%       at_loc(Physobj1,Location), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',855).
if(not(terminates(hold(Agent,Physobj2),
		  at(at_loc(Physobj1,Location),Time))),
   not(partOf(Physobj1,Physobj2))).


%; Further, if an agent holds a physical object,
%; the locations of the physical objects of which
%; the physical object is a part
%; will be released from inertia:
% [agent,physobj1,physobj2,location,time]
% PartOf(physobj1,physobj2) ->
% Releases(Hold(agent,physobj1),At(physobj2,location),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',863).
% From E: 
% 
% '->'(
%    partOf(Physobj1,Physobj2), 
%    releases_at(
%       hold(Agent,Physobj1), 
%       at_loc(Physobj2,Location), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',863).
if(not(terminates(hold(Agent,Physobj1),
		  at(at_loc(Physobj2,Location),Time))),
   not(partOf(Physobj1,Physobj2))).


%;[agent,physobj,location1,location2,time]
%;(!{object} PartOf(physobj,object)) &
%;HoldsAt(At(agent,location1),time) &
%;location1 != location2 ->
%;Terminates(LetGoOf(agent,physobj),At(physobj,location2),time).
% [agent,physobj,location,time]
% (!{object} PartOf(physobj,object)) &
% HoldsAt(At(agent,location),time) ->
% Initiates(LetGoOf(agent,physobj),At(physobj,location),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',873).
% From E: 
% 
% '->'(
%    ','(
%       not(thereExists(Object, 
%              partOf(Physobj,Object))), 
%       holds(
%          at_loc(Agent,Location), 
%          Time)), 
%    initiates_at(
%       letGoOf(Agent,Physobj), 
%       at_loc(Physobj,Location), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',873).
 if(not(initiates(letGoOf(Agent, Physobj),
                    at(at_loc(Physobj, Location), Time))),
       (thereExists(Object, partOf(Physobj, Object));not(holds(at_loc(Agent, Location), Time)))).


%;[agent,physobj1,physobj2,location1,location2,time]
%;PartOf(physobj1,physobj2) &
%;(!{object} PartOf(physobj2,object)) &
%;HoldsAt(At(agent,location1),time) &
%;location1 != location2 ->
%;Terminates(LetGoOf(agent,physobj1),At(physobj2,location2),time).
% [agent,physobj1,physobj2,location,time]
% PartOf(physobj1,physobj2) &
% (!{object} PartOf(physobj2,object)) &
% HoldsAt(At(agent,location),time) ->
% Initiates(LetGoOf(agent,physobj1),At(physobj2,location),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',885).
% From E: 
% 
% '->'(
%    ','(
%       partOf(Physobj1,Physobj2), 
%       ','(
%          not(thereExists(Object, 
%                 partOf(Physobj2,Object))), 
%          holds(
%             at_loc(Agent,Location), 
%             Time))), 
%    initiates_at(
%       letGoOf(Agent,Physobj1), 
%       at_loc(Physobj2,Location), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',885).
 if(not(initiates(letGoOf(Agent, Physobj1),
                    at(at_loc(Physobj2, Location), Time))),
       (not(partOf(Physobj1, Physobj2));thereExists(Object, partOf(Physobj2, Object));not(holds(at_loc(Agent, Location), Time)))).


%; An effect axiom states that if an agent is at a location
%; and lets go of a physical object, the physical object
%; will be at the location:
% [agent,physobj,location,time]
% HoldsAt(At(agent,location),time) ->
% Initiates(LetGoOf(agent,physobj),At(physobj,location),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',894).
% From E: 
% 
% '->'(
%    holds(
%       at_loc(Agent,Location), 
%       Time), 
%    initiates_at(
%       letGoOf(Agent,Physobj), 
%       at_loc(Physobj,Location), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',894).
if(not(initiates(letGoOf(Agent,Physobj),
		 at(at_loc(Physobj,Location),Time))),
   not(holds(at_loc(Agent,Location),Time))).


%; An effect axiom states that if an agent picks up
%; some stuff out of some other stuff, the agent will
%; be holding the first stuff:
% [agent,stuff1,stuff2,time]
% Initiates(HoldSome(agent,stuff1,stuff2),
%           Holding(agent,stuff1),
%           time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',901).
% From E: 
% 
% initiates_at(
%    holdSome(Agent,Stuff1,Stuff2), 
%    holding(Agent,Stuff1), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',901).
initiates(holdSome(Agent,Stuff1,Stuff2),
	  holding(Agent,Stuff1)).


%; A precondition axiom states that
%; for an agent to pick up some stuff out of some other stuff,
%; the first stuff must be a part of the second stuff and
%; there must be a location such that the agent is at the location,
%; the first stuff is at the location, and the second stuff is
%; at the location:
% [agent,stuff1,stuff2,time]
% Happens(HoldSome(agent,stuff1,stuff2),time) ->
% PartOf(stuff1,stuff2) &
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',912).
% {location}% 
%   HoldsAt(At(agent,location),time) &
%   HoldsAt(At(stuff1,location),time) &
%   HoldsAt(At(stuff2,location),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',915).
% From E: 
% 
% exists(Location, 
%    '->'(
%       happens(
%          holdSome(Agent,Stuff1,Stuff2), 
%          Time), 
%       ','(
%          partOf(Stuff1,Stuff2), 
%          ','(
%             holds(
%                at_loc(Agent,Location), 
%                Time), 
%             ','(
%                holds(
%                   at_loc(Stuff1,Location), 
%                   Time), 
%                holds(
%                   at_loc(Stuff2,Location), 
%                   Time)))))).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',915).
exists(Location,  (partOf(Stuff1, Stuff2), at_loc(Agent, Location), at_loc(Stuff1, Location), at_loc(Stuff2, Location);not(holdSome(Agent, Stuff1, Stuff2)))).


%; A releases axiom states that if an agent picks up some
%; stuff out of some other stuff,
%; the first stuff's location will be released
%; from inertia:
% [agent,stuff1,stuff2,location,time]
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',927).
% Releases(HoldSome(agent,stuff1,stuff2),At(stuff1,location),time).
% From E: 
% 
% releases_at(
%    holdSome(Agent,Stuff1,Stuff2), 
%    at_loc(Stuff1,Location), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',927).
releases(holdSome(Agent,Stuff1,Stuff2),
	 at_loc(Stuff1,Location)).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',929).
%; Inside
%; physobj1 is inside physobj2.

% fluent Inside(physobj,physobj)
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',931).
% From E: 
% 
% fluent(inside(physobj,physobj)).
mpred_prop(inside(physobj, physobj), fluent).
fluents([inside/2]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',931).
%; agent puts physobj1 inside physobj2.

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',934).
% event PutInside(agent,physobj,physobj)
% From E: 
% 
% event(putInside(agent,physobj,physobj)).
events([putInside/3]).
mpred_prop(putInside(agent, physobj, physobj), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',934).
actions([putInside/3]).


%; agent takes physobj1 out of physobj2.

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',936).
% event TakeOutOf(agent,physobj,physobj)
% From E: 
% 
% event(takeOutOf(agent,physobj,physobj)).
events([takeOutOf/3]).
mpred_prop(takeOutOf(agent, physobj, physobj), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',936).
actions([takeOutOf/3]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',938).
%; A state constraint says that a physical object cannot
%; be inside itself:
% [physobj1,physobj2,time]
% HoldsAt(Inside(physobj1,physobj2),time) ->
% physobj1!=physobj2.
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',941).
% From E: 
% 
% '->'(
%    holds(
%       inside(Physobj1,Physobj2), 
%       Time), 
%    Physobj1\=Physobj2).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',941).
if(not({dif(Physobj1,Physobj2)}),
   not(inside(Physobj1,Physobj2))).


% holdsAt(inside(physobj1,physobj2),time) -> physobj1 != physobj2.
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',944).
% From E: 
% 
% '->'(
%    holds(
%       inside(physobj1,physobj2), 
%       time), 
%    physobj1\=physobj2).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',944).
if(not({dif(physobj1,physobj2)}),
   not(holds(inside(physobj1,physobj2),time))).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',948).
%; A state constraint says that if a physical object is
%; inside another physical object, the second physical object
%; is not inside the first physical object:
% [physobj1,physobj2,time]
% HoldsAt(Inside(physobj1,physobj2),time) ->
% !HoldsAt(Inside(physobj2,physobj1),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',951).
% From E: 
% 
% '->'(
%    holds(
%       inside(Physobj1,Physobj2), 
%       Time), 
%    holds(
%       not(inside(Physobj2,Physobj1)), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',951).
if(inside(Physobj2,Physobj1),
   not(inside(Physobj1,Physobj2))).


%; An effect axiom states that if an agent puts a physical
%; object inside another physical object, the first
%; physical object will be inside the second physical object:
% [agent,physobj1,physobj2,time]
% Initiates(PutInside(agent,physobj1,physobj2),
%           Inside(physobj1,physobj2),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',958).
% From E: 
% 
% initiates_at(
%    putInside(Agent,Physobj1,Physobj2), 
%    inside(Physobj1,Physobj2), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',958).
initiates(putInside(Agent,Physobj1,Physobj2),
	  inside(Physobj1,Physobj2)).


%; An effect axiom states that if an agent puts a physical
%; object inside another physical object, the agent will
%; no longer be holding the first physical object:
% [agent,physobj1,physobj2,time]
% Terminates(PutInside(agent,physobj1,physobj2),
%            Holding(agent,physobj1),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',965).
% From E: 
% 
% terminates_at(
%    putInside(Agent,Physobj1,Physobj2), 
%    holding(Agent,Physobj1), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',965).
terminates(putInside(Agent,Physobj1,Physobj2),
	   holding(Agent,Physobj1)).


%; A precondition axiom states that
%; for an agent to put a physical object inside another
%; physical object,
%; the agent must be holding the first physical object
%; and there must be a location such that
%; the agent is at the location and
%; the second physical object is at the location:
%;[agent,physobj1,physobj2,time]
%;Happens(PutInside(agent,physobj1,physobj2),time) ->
%;HoldsAt(Holding(agent,physobj1),time) &
%;{location}
%; HoldsAt(At(agent,location),time) &
%; HoldsAt(At(physobj2,location),time).
%; An effect axiom states that
%; if an agent takes a physical object out of another
%; physical object, the first physical object
%; will no longer be inside the second physical object:
% [agent,physobj1,physobj2,time]
% Terminates(TakeOutOf(agent,physobj1,physobj2),
%            Inside(physobj1,physobj2),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',987).
% From E: 
% 
% terminates_at(
%    takeOutOf(Agent,Physobj1,Physobj2), 
%    inside(Physobj1,Physobj2), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',987).
terminates(takeOutOf(Agent,Physobj1,Physobj2),
	   inside(Physobj1,Physobj2)).


%; A precondition axiom states that
%; for an agent to take a physical object out of another
%; physical object,
%; the first physical object must be inside the second physical object
%; and there must be a location such that
%; the agent is at the location,
%; the first physical object is at the location, and
%; the second physical object is at the location:
% [agent,physobj1,physobj2,time]
% Happens(TakeOutOf(agent,physobj1,physobj2),time) ->
% HoldsAt(Inside(physobj1,physobj2),time) &
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',999).
% {location}% 
%  HoldsAt(At(agent,location),time) &
%  HoldsAt(At(physobj1,location),time) &
%  HoldsAt(At(physobj2,location),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1002).
% From E: 
% 
% exists(Location, 
%    '->'(
%       happens(
%          takeOutOf(Agent,Physobj1,Physobj2), 
%          Time), 
%       ','(
%          holds(
%             inside(Physobj1,Physobj2), 
%             Time), 
%          ','(
%             holds(
%                at_loc(Agent,Location), 
%                Time), 
%             ','(
%                holds(
%                   at_loc(Physobj1,Location), 
%                   Time), 
%                holds(
%                   at_loc(Physobj2,Location), 
%                   Time)))))).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1002).
exists(Location,  (inside(Physobj1, Physobj2), at_loc(Agent, Location), at_loc(Physobj1, Location), at_loc(Physobj2, Location);not(takeOutOf(Agent, Physobj1, Physobj2)))).


%; A releases axiom states that if an agent puts a physical
%; object inside another physical object,
%; the first physical object's location will be released
%; from inertia:
% [agent,physobj1,physobj2,location,time]
% Releases(PutInside(agent,physobj1,physobj2),
%          At(physobj1,location),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1011).
% From E: 
% 
% releases_at(
%    putInside(Agent,Physobj1,Physobj2), 
%    at_loc(Physobj1,Location), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1011).
releases(putInside(Agent,Physobj1,Physobj2),
	 at_loc(Physobj1,Location)).


%; A state constraint says that if a physical object is inside
%; another physical object and the second physical object is
%; at a location, the first physical object is also at the location:
% [physobj1,physobj2,location,time]
% HoldsAt(Inside(physobj1,physobj2),time) &
% HoldsAt(At(physobj2,location),time) ->
% HoldsAt(At(physobj1,location),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1018).
% From E: 
% 
% '->'(
%    ','(
%       holds(
%          inside(Physobj1,Physobj2), 
%          Time), 
%       holds(
%          at_loc(Physobj2,Location), 
%          Time)), 
%    holds(
%       at_loc(Physobj1,Location), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1018).
 if(not(at_loc(Physobj1, Location)),
       (not(inside(Physobj1, Physobj2));not(at_loc(Physobj2, Location)))).


%; An effect axiom states that if an agent takes a physical
%; object out of another physical object,
%; the agent will be holding the first physical object:
% [agent,physobj1,physobj2,time]
% Initiates(TakeOutOf(agent,physobj1,physobj2),
%           Holding(agent,physobj1),
%           time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1026).
% From E: 
% 
% initiates_at(
%    takeOutOf(Agent,Physobj1,Physobj2), 
%    holding(Agent,Physobj1), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1026).
initiates(takeOutOf(Agent,Physobj1,Physobj2),
	  holding(Agent,Physobj1)).


%; On
%; physobj1 is on physobj2.

% fluent On(physobj,physobj)
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1033).
% From E: 
% 
% fluent(on(physobj,physobj)).
mpred_prop(on(physobj, physobj), fluent).
fluents([on/2]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1036).
%; agent places physobj1 on physobj2.

% event PlaceOn(agent,physobj,physobj)
% From E: 
% 
% event(placeOn(agent,physobj,physobj)).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1036).
events([placeOn/3]).
mpred_prop(placeOn(agent, physobj, physobj), action).
actions([placeOn/3]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1036).
%; agent takes physobj1 off of physobj2.

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1039).
% event TakeOffOf(agent,physobj,physobj)
% From E: 
% 
% event(takeOffOf(agent,physobj,physobj)).
events([takeOffOf/3]).
mpred_prop(takeOffOf(agent, physobj, physobj), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1039).
actions([takeOffOf/3]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1041).
%; A state constraint says that a physical object cannot
%; be on itself:
% [physobj1,physobj2,time]
% HoldsAt(On(physobj1,physobj2),time) ->
% physobj1!=physobj2.
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1043).
% From E: 
% 
% '->'(
%    holds(
%       on(Physobj1,Physobj2), 
%       Time), 
%    Physobj1\=Physobj2).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1043).
if(not({dif(Physobj1,Physobj2)}),
   not(on(Physobj1,Physobj2))).


%; A state constraint says that if a physical object is
%; on another physical object, the second physical object
%; is not on the first physical object:
% [physobj1,physobj2,time]
% HoldsAt(On(physobj1,physobj2),time) ->
% !HoldsAt(On(physobj2,physobj1),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1050).
% From E: 
% 
% '->'(
%    holds(
%       on(Physobj1,Physobj2), 
%       Time), 
%    holds(
%       not(on(Physobj2,Physobj1)), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1050).
if(on(Physobj2,Physobj1),
   not(on(Physobj1,Physobj2))).


%; An effect axiom states that if an agent places a physical
%; object on another physical object, the first
%; physical object will be on the second physical object:
% [agent,physobj1,physobj2,time]
% Initiates(PlaceOn(agent,physobj1,physobj2),
%           On(physobj1,physobj2),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1057).
% From E: 
% 
% initiates_at(
%    placeOn(Agent,Physobj1,Physobj2), 
%    on(Physobj1,Physobj2), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1057).
initiates(placeOn(Agent,Physobj1,Physobj2),
	  on(Physobj1,Physobj2)).


%; An effect axiom states that if an agent places a physical
%; object on another physical object, the agent will
%; no longer be holding the first physical object:
% [agent,physobj1,physobj2,time]
% Terminates(PlaceOn(agent,physobj1,physobj2),
%            Holding(agent,physobj1),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1064).
% From E: 
% 
% terminates_at(
%    placeOn(Agent,Physobj1,Physobj2), 
%    holding(Agent,Physobj1), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1064).
terminates(placeOn(Agent,Physobj1,Physobj2),
	   holding(Agent,Physobj1)).


%; A precondition axiom states that
%; for an agent to place a physical object on another
%; physical object,
%; the agent must be holding the first physical object
%; and there must be a location such that
%; the agent is at the location and
%; the second physical object is at the location:
%;[agent,physobj1,physobj2,time]
%;Happens(PlaceOn(agent,physobj1,physobj2),time) ->
%;HoldsAt(Holding(agent,physobj1),time) &
%;{location}
%; HoldsAt(At(agent,location),time) &
%; HoldsAt(At(physobj2,location),time).
%; An effect axiom states that
%; if an agent takes a physical object off of another
%; physical object, the first physical object
%; will no longer be on the second physical object:
% [agent,physobj1,physobj2,time]
% Terminates(TakeOffOf(agent,physobj1,physobj2),
%            On(physobj1,physobj2),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1086).
% From E: 
% 
% terminates_at(
%    takeOffOf(Agent,Physobj1,Physobj2), 
%    on(Physobj1,Physobj2), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1086).
terminates(takeOffOf(Agent,Physobj1,Physobj2),
	   on(Physobj1,Physobj2)).


%; An effect axiom states that if an agent takes a physical
%; object off of another physical object,
%; the agent will be holding the first physical object:
% [agent,physobj1,physobj2,time]
% Initiates(TakeOffOf(agent,physobj1,physobj2),
%           Holding(agent,physobj1),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1093).
% From E: 
% 
% initiates_at(
%    takeOffOf(Agent,Physobj1,Physobj2), 
%    holding(Agent,Physobj1), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1093).
initiates(takeOffOf(Agent,Physobj1,Physobj2),
	  holding(Agent,Physobj1)).


%; A precondition axiom states that
%; for an agent to take a physical object off of another
%; physical object,
%; the first physical object must be on the second physical object
%; and there must be a location such that
%; the agent is at the location and
%; the first physical object is at the location:
%; the second physical object is at the location:
% [agent,physobj1,physobj2,time]
% Happens(TakeOffOf(agent,physobj1,physobj2),time) ->
% HoldsAt(On(physobj1,physobj2),time) &
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1105).
% {location}% 
%  HoldsAt(At(agent,location),time) &
%  HoldsAt(At(physobj1,location),time) &
%  HoldsAt(At(physobj2,location),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1108).
% From E: 
% 
% exists(Location, 
%    '->'(
%       happens(
%          takeOffOf(Agent,Physobj1,Physobj2), 
%          Time), 
%       ','(
%          holds(
%             on(Physobj1,Physobj2), 
%             Time), 
%          ','(
%             holds(
%                at_loc(Agent,Location), 
%                Time), 
%             ','(
%                holds(
%                   at_loc(Physobj1,Location), 
%                   Time), 
%                holds(
%                   at_loc(Physobj2,Location), 
%                   Time)))))).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1108).
exists(Location,  (on(Physobj1, Physobj2), at_loc(Agent, Location), at_loc(Physobj1, Location), at_loc(Physobj2, Location);not(takeOffOf(Agent, Physobj1, Physobj2)))).


%; A releases axiom states that if an agent places a physical
%; object on another physical object,
%; the first physical object's location will be released
%; from inertia:
% [agent,physobj1,physobj2,location,time]
% Releases(PlaceOn(agent,physobj1,physobj2),
%          At(physobj1,location),
%          time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1117).
% From E: 
% 
% releases_at(
%    placeOn(Agent,Physobj1,Physobj2), 
%    at_loc(Physobj1,Location), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1117).
releases(placeOn(Agent,Physobj1,Physobj2),
	 at_loc(Physobj1,Location)).


%; A state constraint says that if a physical object is on
%; another physical object and the second physical object is
%; at a location, the first physical object is also at the location:
% [physobj1,physobj2,location,time]
% HoldsAt(On(physobj1,physobj2),time) &
% HoldsAt(At(physobj2,location),time) ->
% HoldsAt(At(physobj1,location),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1125).
% From E: 
% 
% '->'(
%    ','(
%       holds(
%          on(Physobj1,Physobj2), 
%          Time), 
%       holds(
%          at_loc(Physobj2,Location), 
%          Time)), 
%    holds(
%       at_loc(Physobj1,Location), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1125).
 if(not(at_loc(Physobj1, Location)),
       (not(on(Physobj1, Physobj2));not(at_loc(Physobj2, Location)))).

% fluent Near(agent,object)
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1129).
% From E: 
% 
% fluent(near(agent,object)).
mpred_prop(near(agent, object), fluent).
fluents([near/2]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1131).
% event WalkFromTo(agent,object,object)
% From E: 
% 
% event(walkFromTo(agent,object,object)).
events([walkFromTo/3]).
mpred_prop(walkFromTo(agent, object, object), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1131).
actions([walkFromTo/3]).

% event WalkFrom(agent,object)
% From E: 
% 
% event(walkFrom(agent,object)).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1131).
events([walkFrom/2]).
mpred_prop(walkFrom(agent, object), action).
actions([walkFrom/2]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1133).
% event RunFromTo(agent,object,object)
% From E: 
% 
% event(runFromTo(agent,object,object)).
events([runFromTo/3]).
mpred_prop(runFromTo(agent, object, object), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1133).
actions([runFromTo/3]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1135).
% [agent,object1,object2,time]
% Initiates(WalkFromTo(agent,object1,object2),
%           Near(agent,object2),
%           time).
% From E: 
% 
% initiates_at(
%    walkFromTo(Agent,Object1,Object2), 
%    near(Agent,Object2), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1135).
initiates(walkFromTo(Agent,Object1,Object2),
	  near(Agent,Object2)).


% [agent,object1,object2,time]
% Terminates(WalkFromTo(agent,object1,object2),
%            Near(agent,object1),
%            time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1141).
% From E: 
% 
% terminates_at(
%    walkFromTo(Agent,Object1,Object2), 
%    near(Agent,Object1), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1141).
terminates(walkFromTo(Agent,Object1,Object2),
	   near(Agent,Object1)).


% [agent,object1,object2,time]
% Happens(WalkFromTo(agent,object1,object2),time) ->
% {location}% 
% HoldsAt(At(agent,location),time) &
% HoldsAt(At(object1,location),time) &
% HoldsAt(At(object2,location),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1146).
% From E: 
% 
% exists(Location, 
%    '->'(
%       happens(
%          walkFromTo(Agent,Object1,Object2), 
%          Time), 
%       ','(
%          holds(
%             at_loc(Agent,Location), 
%             Time), 
%          ','(
%             holds(
%                at_loc(Object1,Location), 
%                Time), 
%             holds(
%                at_loc(Object2,Location), 
%                Time))))).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1146).
exists(Location,  (at_loc(Agent, Location), at_loc(Object1, Location), at_loc(Object2, Location);not(walkFromTo(Agent, Object1, Object2)))).


% [agent,object1,object2,time]
% Initiates(RunFromTo(agent,object1,object2),
%           Near(agent,object2),
%           time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1153).
% From E: 
% 
% initiates_at(
%    runFromTo(Agent,Object1,Object2), 
%    near(Agent,Object2), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1153).
initiates(runFromTo(Agent,Object1,Object2),
	  near(Agent,Object2)).


% [agent,object1,object2,time]
% Terminates(RunFromTo(agent,object1,object2),
%            Near(agent,object1),
%            time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1158).
% From E: 
% 
% terminates_at(
%    runFromTo(Agent,Object1,Object2), 
%    near(Agent,Object1), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1158).
terminates(runFromTo(Agent,Object1,Object2),
	   near(Agent,Object1)).


% [agent,object1,object2,time]
% Happens(RunFromTo(agent,object1,object2),time) ->
% {location}% 
% HoldsAt(At(agent,location),time) &
% HoldsAt(At(object1,location),time) &
% HoldsAt(At(object2,location),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1163).
% From E: 
% 
% exists(Location, 
%    '->'(
%       happens(
%          runFromTo(Agent,Object1,Object2), 
%          Time), 
%       ','(
%          holds(
%             at_loc(Agent,Location), 
%             Time), 
%          ','(
%             holds(
%                at_loc(Object1,Location), 
%                Time), 
%             holds(
%                at_loc(Object2,Location), 
%                Time))))).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1163).
exists(Location,  (at_loc(Agent, Location), at_loc(Object1, Location), at_loc(Object2, Location);not(runFromTo(Agent, Object1, Object2)))).


% [agent,object,time]
% Terminates(WalkFrom(agent,object),
%            Near(agent,object),
%            time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1170).
% From E: 
% 
% terminates_at(
%    walkFrom(Agent,Object), 
%    near(Agent,Object), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1170).
terminates(walkFrom(Agent,Object),
	   near(Agent,Object)).


% [agent,object,location,door,time]
% HoldsAt(Near(agent,object),time) &
% HoldsAt(At(agent,location),time) &
% HoldsAt(At(object,location),time) &
% Side1(door)=location &
% Happens(WalkThroughDoor12(agent,door),time) ->
% Happens(WalkFrom(agent,object),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1175).
% From E: 
% 
% '->'(
%    ','(
%       holds(
%          near(Agent,Object), 
%          Time), 
%       ','(
%          holds(
%             at_loc(Agent,Location), 
%             Time), 
%          ','(
%             holds(
%                at_loc(Object,Location), 
%                Time), 
%             ','(
%                '='(
%                   side1(Door), 
%                   Location), 
%                happens(
%                   walkThroughDoor12(Agent,Door), 
%                   Time))))), 
%    happens(
%       walkFrom(Agent,Object), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1175).
 if(not(walkFrom(Agent, Object)),
       (not(near(Agent, Object));not(at_loc(Agent, Location));not(at_loc(Object, Location));not(side1(Door, Location));not(walkThroughDoor12(Agent, Door)))).


% [agent,object,location,door,time]
% HoldsAt(Near(agent,object),time) &
% HoldsAt(At(agent,location),time) &
% HoldsAt(At(object,location),time) &
% Side2(door)=location &
% Happens(WalkThroughDoor21(agent,door),time) ->
% Happens(WalkFrom(agent,object),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1183).
% From E: 
% 
% '->'(
%    ','(
%       holds(
%          near(Agent,Object), 
%          Time), 
%       ','(
%          holds(
%             at_loc(Agent,Location), 
%             Time), 
%          ','(
%             holds(
%                at_loc(Object,Location), 
%                Time), 
%             ','(
%                '='(
%                   side2(Door), 
%                   Location), 
%                happens(
%                   walkThroughDoor21(Agent,Door), 
%                   Time))))), 
%    happens(
%       walkFrom(Agent,Object), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1183).
 if(not(walkFrom(Agent, Object)),
       (not(near(Agent, Object));not(at_loc(Agent, Location));not(at_loc(Object, Location));not(side2(Door, Location));not(walkThroughDoor21(Agent, Door)))).


% [agent,object,room,staircase,time]
% HoldsAt(Near(agent,object),time) &
% HoldsAt(At(agent,room),time) &
% HoldsAt(At(object,room),time) &
% Side1(staircase)=room &
% Happens(WalkUpStaircase(agent,staircase),time) ->
% Happens(WalkFrom(agent,object),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1191).
% From E: 
% 
% '->'(
%    ','(
%       holds(
%          near(Agent,Object), 
%          Time), 
%       ','(
%          holds(
%             at_loc(Agent,Room), 
%             Time), 
%          ','(
%             holds(
%                at_loc(Object,Room), 
%                Time), 
%             ','(
%                '='(
%                   side1(Staircase), 
%                   Room), 
%                happens(
%                   walkUpStaircase(Agent,Staircase), 
%                   Time))))), 
%    happens(
%       walkFrom(Agent,Object), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1191).
 if(not(walkFrom(Agent, Object)),
       (not(near(Agent, Object));not(at_loc(Agent, Room));not(at_loc(Object, Room));not(side1(Staircase, Room));not(walkUpStaircase(Agent, Staircase)))).


% [agent,object,room,staircase,time]
% HoldsAt(Near(agent,object),time) &
% HoldsAt(At(agent,room),time) &
% HoldsAt(At(object,room),time) &
% Side2(staircase)=room &
% Happens(WalkDownStaircase(agent,staircase),time) ->
% Happens(WalkFrom(agent,object),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1199).
% From E: 
% 
% '->'(
%    ','(
%       holds(
%          near(Agent,Object), 
%          Time), 
%       ','(
%          holds(
%             at_loc(Agent,Room), 
%             Time), 
%          ','(
%             holds(
%                at_loc(Object,Room), 
%                Time), 
%             ','(
%                '='(
%                   side2(Staircase), 
%                   Room), 
%                happens(
%                   walkDownStaircase(Agent,Staircase), 
%                   Time))))), 
%    happens(
%       walkFrom(Agent,Object), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1199).
 if(not(walkFrom(Agent, Object)),
       (not(near(Agent, Object));not(at_loc(Agent, Room));not(at_loc(Object, Room));not(side2(Staircase, Room));not(walkDownStaircase(Agent, Staircase)))).


%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: ecnet/OMSpace.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; OMSpace: object-scale metric space
%;
%; The OMSpace representation deals with metric space at
%; the scale of objects.
%;
%; @article{Morgenstern:2001,
%;   author = "Morgenstern, Leora",
%;   year = "2001",
%;   title = "Mid-sized axiomatizations of commonsense problems: A case study in egg cracking",
%;   journal = "Studia Logica",
%;   volume = "67",
%;   pages = "333--384",
%; }
%;
%; @article{Shanahan:2003,
%;   author = "Shanahan, Murray",
%;   year = "2004",
%;   title = "An attempt to formalise a non-trivial benchmark problem in common sense reasoning",
%;   journal = "Artificial Intelligence",
%;   volume = "153",
%;   pages = "141--165",
%; }
%;

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1248).
% sort height: integer
% From E: 
% 
% subsort(height,integer).
subsort(height, integer).

% sort distance: integer
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1248).
% From E: 
% 
% subsort(distance,integer).
subsort(distance, integer).
%; Height
%; The height of object is height.

% fluent Height(object,height)
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1253).
% From E: 
% 
% fluent(height(object,height)).
mpred_prop(height(object, height), fluent).
fluents([height/2]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1256).
%; State constraint represent the fact that each
%; object has a unique height:
% [object,height1,height2,time]
% HoldsAt(Height(object,height1),time) &
% HoldsAt(Height(object,height2),time) ->
% height1=height2.
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1258).
% From E: 
% 
% '->'(
%    ','(
%       holds(
%          height(Object,Height1), 
%          Time), 
%       holds(
%          height(Object,Height2), 
%          Time)), 
%    Height1=Height2).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1258).
 if(not(equals(Height1, Height2)),
       (not(height(Object, Height1));not(height(Object, Height2)))).


% [object,time]
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1264).
% {height}% HoldsAt(Height(object,height),time).
% From E: 
% 
% exists(Height, 
%    holds(
%       height(Object,Height), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1264).
exists(Height,
 height(Object,Height)).


%; falling
%; physobj1 is falling from physobj2 to physobj3.

% fluent FallingFromTo(physobj,physobj,physobj)
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1269).
% From E: 
% 
% fluent(fallingFromTo(physobj,physobj,physobj)).
mpred_prop(fallingFromTo(physobj, physobj, physobj), fluent).
fluents([fallingFromTo/3]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1269).
%; physobj1 starts falling from physobj2 to physobj3.

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1272).
% event StartFallingFromTo(physobj,physobj,physobj)
% From E: 
% 
% event(startFallingFromTo(physobj,physobj,physobj)).
mpred_prop(startFallingFromTo(physobj, physobj, physobj), event).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1272).
events([startFallingFromTo/3]).


%; physobj1 collides with physobj2.

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1274).
% event CollideWith(physobj,physobj)
% From E: 
% 
% event(collideWith(physobj,physobj)).
mpred_prop(collideWith(physobj, physobj), event).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1274).
events([collideWith/2]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1276).
%; An effect axiom states that if a first physical object starts
%; falling from a second physical object to a third physical
%; object, the first physical object will be falling from the
%; second physical object to the third physical object:
% [physobj1,physobj2,physobj3,time]
% Initiates(StartFallingFromTo(physobj1,physobj2,physobj3),
%           FallingFromTo(physobj1,physobj2,physobj3),
%           time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1280).
% From E: 
% 
% initiates_at(
%    startFallingFromTo(Physobj1,Physobj2,Physobj3), 
%    fallingFromTo(Physobj1,Physobj2,Physobj3), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1280).
initiates(startFallingFromTo(Physobj1,
			     Physobj2,
			     Physobj3),
	  fallingFromTo(Physobj1,Physobj2,Physobj3)).


%; A precondition axiom states that for
%; a first physical object to start
%; falling from a second physical object to a third physical
%; object,
%; the height of the first physical object and the
%; second physical object must be the same.
% [physobj1,physobj2,physobj3,height1,height2,time]
% Happens(StartFallingFromTo(physobj1,physobj2,physobj3),time) &
% HoldsAt(Height(physobj1,height1),time) &
% HoldsAt(Height(physobj2,height2),time) ->
% height1=height2.
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1291).
% From E: 
% 
% '->'(
%    ','(
%       happens(
%          startFallingFromTo(Physobj1,Physobj2,Physobj3), 
%          Time), 
%       ','(
%          holds(
%             height(Physobj1,Height1), 
%             Time), 
%          holds(
%             height(Physobj2,Height2), 
%             Time))), 
%    Height1=Height2).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1291).
 if(not(equals(Height1, Height2)),
       (not(startFallingFromTo(Physobj1, Physobj2, Physobj3));not(height(Physobj1, Height1));not(height(Physobj2, Height2)))).


%; A state constraint says that a physical object
%; cannot fall from itself, cannot fall to itself,
%; and cannot fall from and to the same physical object:
% [physobj1,physobj2,physobj3,time]
% HoldsAt(FallingFromTo(physobj1,physobj2,physobj3),time) ->
% physobj1!=physobj2 &
% physobj1!=physobj3 &
% physobj2!=physobj3.
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1300).
% From E: 
% 
% '->'(
%    holds(
%       fallingFromTo(Physobj1,Physobj2,Physobj3), 
%       Time), 
%    ','(
%       Physobj1\=Physobj2, 
%       ','(
%          Physobj1\=Physobj3, 
%          Physobj2\=Physobj3))).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1300).
 if((not({dif(Physobj1, Physobj2)});not({dif(Physobj1, Physobj3)});not({dif(Physobj2, Physobj3)})),
      not(fallingFromTo(Physobj1, Physobj2, Physobj3))).


%; A state constraint says that the sky cannot fall:
% [sky,physobj1,physobj2,time]
% !HoldsAt(FallingFromTo(sky,physobj1,physobj2),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1307).
% From E: 
% 
% holds(
%    not(fallingFromTo(Sky,Physobj1,Physobj2)), 
%    Time).
 %   [Time].
not(fallingFromTo(Sky,Physobj1,Physobj2)).


%; A releases axiom states that if
%; if a first physical object starts
%; falling from a second physical object to a third physical
%; object, the height of the first physical object
%; will be released from inertia:
% [physobj1,physobj2,physobj3,height,time]
% Releases(StartFallingFromTo(physobj1,physobj2,physobj3),
%          Height(physobj1,height),
%          time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1315).
% From E: 
% 
% releases_at(
%    startFallingFromTo(Physobj1,Physobj2,Physobj3), 
%    height(Physobj1,Height), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1315).
releases(startFallingFromTo(Physobj1,
			    Physobj2,
			    Physobj3),
	 height(Physobj1,Height)).


%; A trajectory axiom states that
%; if a first physical object starts falling
%; from a second physical object
%; to a third physical object
%; at a time and
%; the first physical object has a height at the time,
%; then the first physical object will have a height
%; equal to the height minus an offset
%; at a time equal to the time plus the offset:
% [physobj1,physobj2,physobj3,height1,height2,offset,time]
% HoldsAt(Height(physobj1,height1),time) &
% height2=height1-offset ->
% Trajectory(FallingFromTo(physobj1,physobj2,physobj3),time,
%            Height(physobj1,height2),offset).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1329).
% From E: 
% 
% '->'(
%    ','(
%       holds(
%          height(Physobj1,Height1), 
%          Time), 
%       Height2=Height1-Offset), 
%    trajectory(
%       fallingFromTo(Physobj1,Physobj2,Physobj3), 
%       Time, 
%       height(Physobj1,Height2), 
%       Offset)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1329).
 if(not(trajectory(fallingFromTo(Physobj1,
                                   Physobj2,
                                   Physobj3),
                     Time,
                     height(Physobj1, Height2),
                     Offset)),
       (not(holds(height(Physobj1, Height1), Time));not(equals(Height2, Height1-Offset)))).


%; A trigger axiom states that
%; if a first physical object is falling
%; from a second physical object
%; to a third physical object and
%; the height of the first physical object
%; is the same as the height of the third physical object,
%; the first physical object collides with the
%; third physical object:
% [physobj1,physobj2,physobj3,height,time]
% HoldsAt(FallingFromTo(physobj1,physobj2,physobj3),time) &
% HoldsAt(Height(physobj1,height),time) &
% HoldsAt(Height(physobj3,height),time) ->
% Happens(CollideWith(physobj1,physobj3),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1343).
% From E: 
% 
% '->'(
%    ','(
%       holds(
%          fallingFromTo(Physobj1,Physobj2,Physobj3), 
%          Time), 
%       ','(
%          holds(
%             height(Physobj1,Height), 
%             Time), 
%          holds(
%             height(Physobj3,Height), 
%             Time))), 
%    happens(
%       collideWith(Physobj1,Physobj3), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1343).
 if(not(collideWith(Physobj1, Physobj3)),
       (not(fallingFromTo(Physobj1, Physobj2, Physobj3));not(height(Physobj1, Height));not(height(Physobj3, Height)))).


%; An effect axiom states that
%; if a first physical object is falling
%; from a second physical object
%; to a third physical object and
%; the first physical object collides with
%; the third physical object,
%; the first physical object will be on the third physical object:
% [physobj1,physobj2,physobj3,time]
% HoldsAt(FallingFromTo(physobj1,physobj2,physobj3),time) ->
% Initiates(CollideWith(physobj1,physobj3),
%           On(physobj1,physobj3),
%           time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1356).
% From E: 
% 
% '->'(
%    holds(
%       fallingFromTo(Physobj1,Physobj2,Physobj3), 
%       Time), 
%    initiates_at(
%       collideWith(Physobj1,Physobj3), 
%       on(Physobj1,Physobj3), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1356).
if(not(initiates(collideWith(Physobj1,Physobj3),
		 at(on(Physobj1,Physobj3),Time))),
   not(holds(fallingFromTo(Physobj1,
			   Physobj2,
			   Physobj3),
	     Time))).


%; An effect axiom states that
%; if a physical object collides with another
%; physical object,
%; the height of the first physical object will
%; be the height of the second physical object:
% [physobj1,physobj2,height,time]
% HoldsAt(Height(physobj2,height),time) ->
% Initiates(CollideWith(physobj1,physobj2),
%           Height(physobj1,height),
%           time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1367).
% From E: 
% 
% '->'(
%    holds(
%       height(Physobj2,Height), 
%       Time), 
%    initiates_at(
%       collideWith(Physobj1,Physobj2), 
%       height(Physobj1,Height), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1367).
if(not(initiates(collideWith(Physobj1,Physobj2),
		 at(height(Physobj1,Height),Time))),
   not(holds(height(Physobj2,Height),Time))).


%;[physobj1,physobj2,height1,height2,time]
%;HoldsAt(Height(physobj2,height1),time) &
%;height1 != height2 ->
%;Terminates(CollideWith(physobj1,physobj2),
%;           Height(physobj1,height2),
%;           time).
%; An effect axiom states that
%; if a first physical object is falling
%; from a second physical object
%; to a third physical object and
%; the first physical object collides with
%; the third physical object,
%; the first physical object will no longer be
%; falling from the second physical object to the
%; third physical object:
% [physobj1,physobj2,physobj3,time]
% HoldsAt(FallingFromTo(physobj1,physobj2,physobj3),time) ->
% Terminates(CollideWith(physobj1,physobj3),
%            FallingFromTo(physobj1,physobj2,physobj3),
%            time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1389).
% From E: 
% 
% '->'(
%    holds(
%       fallingFromTo(Physobj1,Physobj2,Physobj3), 
%       Time), 
%    terminates_at(
%       collideWith(Physobj1,Physobj3), 
%       fallingFromTo(Physobj1,Physobj2,Physobj3), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1389).
if(not(terminates(collideWith(Physobj1,Physobj3),
		  at(fallingFromTo(Physobj1,
				   Physobj2,
				   Physobj3),
		     Time))),
   not(holds(fallingFromTo(Physobj1,
			   Physobj2,
			   Physobj3),
	     Time))).


%; flying
%; agent is flying from physobj1 to physobj2.

% fluent FlyingFromTo(agent,physobj,physobj)
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1397).
% From E: 
% 
% fluent(flyingFromTo(agent,physobj,physobj)).
mpred_prop(flyingFromTo(agent, physobj, physobj), fluent).
fluents([flyingFromTo/3]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1397).
%; agent starts flying from physobj1 to physobj2.

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1400).
% event StartFlyingFromTo(agent,physobj,physobj)
% From E: 
% 
% event(startFlyingFromTo(agent,physobj,physobj)).
events([startFlyingFromTo/3]).
mpred_prop(startFlyingFromTo(agent, physobj, physobj), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1400).
actions([startFlyingFromTo/3]).


%; agent reaches physobj.

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1402).
% event Reach(agent,physobj)
% From E: 
% 
% event(reach(agent,physobj)).
events([reach/2]).
mpred_prop(reach(agent, physobj), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1402).
actions([reach/2]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1404).
%; An effect axiom states that if an agent starts
%; flying from a physical object to another physical object,
%; the agent will be flying from the first physical object
%; to the second physical object:
% [agent,physobj1,physobj2,time]
% Initiates(StartFlyingFromTo(agent,physobj1,physobj2),
%           FlyingFromTo(agent,physobj1,physobj2),
%           time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1408).
% From E: 
% 
% initiates_at(
%    startFlyingFromTo(Agent,Physobj1,Physobj2), 
%    flyingFromTo(Agent,Physobj1,Physobj2), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1408).
initiates(startFlyingFromTo(Agent,Physobj1,Physobj2),
	  flyingFromTo(Agent,Physobj1,Physobj2)).


%; A precondition axiom states that for
%; an agent to start flying from a physical object to
%; another physical object,
%; the height of the agent and
%; the first physical object must be the same:
% [agent,physobj1,physobj2,height1,height2,time]
% Happens(StartFlyingFromTo(agent,physobj1,physobj2),time) &
% HoldsAt(Height(agent,height1),time) &
% HoldsAt(Height(physobj1,height2),time) ->
% height1=height2.
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1418).
% From E: 
% 
% '->'(
%    ','(
%       happens(
%          startFlyingFromTo(Agent,Physobj1,Physobj2), 
%          Time), 
%       ','(
%          holds(
%             height(Agent,Height1), 
%             Time), 
%          holds(
%             height(Physobj1,Height2), 
%             Time))), 
%    Height1=Height2).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1418).
 if(not(equals(Height1, Height2)),
       (not(startFlyingFromTo(Agent, Physobj1, Physobj2));not(height(Agent, Height1));not(height(Physobj1, Height2)))).


%; A state constraint says that an agent
%; cannot fly from and to the same physical object:
% [agent,physobj1,physobj2,time]
% HoldsAt(FlyingFromTo(agent,physobj1,physobj2),time) ->
% physobj1!=physobj2.
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1426).
% From E: 
% 
% '->'(
%    holds(
%       flyingFromTo(Agent,Physobj1,Physobj2), 
%       Time), 
%    Physobj1\=Physobj2).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1426).
if(not({dif(Physobj1,Physobj2)}),
   not(flyingFromTo(Agent,Physobj1,Physobj2))).


%; A releases axiom states that if an agent
%; starts flying from a physical object to another
%; physical object, the height of the agent will
%; be released from inertia:
% [agent,physobj1,physobj2,height,time]
% Releases(StartFlyingFromTo(agent,physobj1,physobj2),
%          Height(agent,height),
%          time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1434).
% From E: 
% 
% releases_at(
%    startFlyingFromTo(Agent,Physobj1,Physobj2), 
%    height(Agent,Height), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1434).
releases(startFlyingFromTo(Agent,Physobj1,Physobj2),
	 height(Agent,Height)).


%; A trajectory axiom states that
%; if an agent starts flying from
%; from a physical object
%; to another physical object
%; at a time and
%; the agent has a height at the time,
%; then the agent will have a height
%; equal to the height plus an offset
%; at a time equal to the time plus the offset:
% [agent,physobj1,physobj2,height1,height2,offset,time]
% HoldsAt(Height(agent,height1),time) &
% height2=height1+offset ->
% Trajectory(FlyingFromTo(agent,physobj1,physobj2),time,
%            Height(agent,height2),offset).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1448).
% From E: 
% 
% '->'(
%    ','(
%       holds(
%          height(Agent,Height1), 
%          Time), 
%       Height2=Height1+Offset), 
%    trajectory(
%       flyingFromTo(Agent,Physobj1,Physobj2), 
%       Time, 
%       height(Agent,Height2), 
%       Offset)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1448).
 if(not(trajectory(flyingFromTo(Agent, Physobj1, Physobj2),
                     Time,
                     height(Agent, Height2),
                     Offset)),
       (not(holds(height(Agent, Height1), Time));not(equals(Height2, Height1+Offset)))).


%; A trigger axiom states that
%; if an agent is flying
%; from a physical object
%; to another physical object and
%; the height of the agent
%; is the same as the height of the second physical object,
%; the agent reaches the second physical object:
% [agent,physobj1,physobj2,height,time]
% HoldsAt(FlyingFromTo(agent,physobj1,physobj2),time) &
% HoldsAt(Height(agent,height),time) &
% HoldsAt(Height(physobj2,height),time) ->
% Happens(Reach(agent,physobj2),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1461).
% From E: 
% 
% '->'(
%    ','(
%       holds(
%          flyingFromTo(Agent,Physobj1,Physobj2), 
%          Time), 
%       ','(
%          holds(
%             height(Agent,Height), 
%             Time), 
%          holds(
%             height(Physobj2,Height), 
%             Time))), 
%    happens(
%       reach(Agent,Physobj2), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1461).
 if(not(reach(Agent, Physobj2)),
       (not(flyingFromTo(Agent, Physobj1, Physobj2));not(height(Agent, Height));not(height(Physobj2, Height)))).


%; An effect axiom states that
%; if an agent reaches a physical object,
%; the height of the agent will be the
%; height of the physical object:
% [agent,physobj,height,time]
% HoldsAt(Height(physobj,height),time) ->
% Initiates(Reach(agent,physobj),Height(agent,height),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1471).
% From E: 
% 
% '->'(
%    holds(
%       height(Physobj,Height), 
%       Time), 
%    initiates_at(
%       reach(Agent,Physobj), 
%       height(Agent,Height), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1471).
if(not(initiates(reach(Agent,Physobj),
		 at(height(Agent,Height),Time))),
   not(holds(height(Physobj,Height),Time))).


%;[agent,physobj,height1,height2,time]
%;HoldsAt(Height(physobj,height1),time) &
%;height1!=height2 ->
%;Terminates(Reach(agent,physobj),Height(agent,height2),time).
%; An effect axiom states that
%; if an agent is flying
%; from a physical object
%; to another physical object and
%; the agent reaches the second physical object,
%; the agent will no longer be
%; flying from the first physical object
%; to the second physical object:
% [agent,physobj1,physobj2,time]
% HoldsAt(FlyingFromTo(agent,physobj1,physobj2),time) ->
% Terminates(Reach(agent,physobj2),
%            FlyingFromTo(agent,physobj1,physobj2),
%            time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1488).
% From E: 
% 
% '->'(
%    holds(
%       flyingFromTo(Agent,Physobj1,Physobj2), 
%       Time), 
%    terminates_at(
%       reach(Agent,Physobj2), 
%       flyingFromTo(Agent,Physobj1,Physobj2), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1488).
if(not(terminates(reach(Agent,Physobj2),
		  at(flyingFromTo(Agent,
				  Physobj1,
				  Physobj2),
		     Time))),
   not(holds(flyingFromTo(Agent,Physobj1,Physobj2),
	     Time))).


%; A releases axiom states that
%; if an agent holds a physical object,
%; the height of the physical object is released from inertia:
% [agent,physobj,height,time]
% Releases(Hold(agent,physobj),Height(physobj,height),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1497).
% From E: 
% 
% releases_at(
%    hold(Agent,Physobj), 
%    height(Physobj,Height), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1497).
releases(hold(Agent,Physobj),
	 height(Physobj,Height)).


%;[agent,physobj,height1,height2,time]
%;(!{object} PartOf(physobj,object)) &
%;HoldsAt(Height(physobj,height1),time) &
%;height1 != height2 ->
%;Terminates(LetGoOf(agent,physobj),Height(physobj,height2),time).
% [agent,physobj,height,time]
% (!{object} PartOf(physobj,object)) &
% HoldsAt(Height(physobj,height),time) ->
% Initiates(LetGoOf(agent,physobj),Height(physobj,height),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1506).
% From E: 
% 
% '->'(
%    ','(
%       not(thereExists(Object, 
%              partOf(Physobj,Object))), 
%       holds(
%          height(Physobj,Height), 
%          Time)), 
%    initiates_at(
%       letGoOf(Agent,Physobj), 
%       height(Physobj,Height), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1506).
 if(not(initiates(letGoOf(Agent, Physobj),
                    at(height(Physobj, Height), Time))),
       (thereExists(Object, partOf(Physobj, Object));not(holds(height(Physobj, Height), Time)))).


%; A state constraint says that
%; if an agent is holding a physical object and
%; the height of the agent is height,
%; the height of the physical object is height:
% [agent,physobj,height,time]
% HoldsAt(Holding(agent,physobj),time) &
% HoldsAt(Height(agent,height),time) ->
% HoldsAt(Height(physobj,height),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1515).
% From E: 
% 
% '->'(
%    ','(
%       holds(
%          holding(Agent,Physobj), 
%          Time), 
%       holds(
%          height(Agent,Height), 
%          Time)), 
%    holds(
%       height(Physobj,Height), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1515).
 if(not(height(Physobj, Height)),
       (not(holding(Agent, Physobj));not(height(Agent, Height)))).


%; A state constraint says that if a physical object
%; is part of an object,
%; the height of the physical object
%; is the same as the height of the object:
% [physobj,object,height,time]
% PartOf(physobj,object) &
% HoldsAt(Height(object,height),time) ->
% HoldsAt(Height(physobj,height),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1524).
% From E: 
% 
% '->'(
%    ','(
%       partOf(Physobj,Object), 
%       holds(
%          height(Object,Height), 
%          Time)), 
%    holds(
%       height(Physobj,Height), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1524).
 if(not(height(Physobj, Height)),
       (not(partOf(Physobj, Object));not(height(Object, Height)))).


%;event Catch(agent,physobj)
%;event HitFromTo(agent,physobj,object,object)
%;fluent Distance(physobj,physobj,distance)
%;fluent FlyingAcrossFromTo(physobj,object,object)
%;[agent,physobj1,physobj2,physobj3,time]
%;Initiates(HitFromTo(agent,physobj1,physobj2,physobj3),
%;          FlyingAcrossFromTo(physobj1,physobj2,physobj3),
%;          time).
%;[agent,physobj1,physobj2,physobj3,distance,time]
%;Releases(HitFromTo(agent,physobj1,physobj2,physobj3),
%;         Distance(physobj1,physobj2,distance),
%;         time).
%;[agent,physobj1,physobj2,physobj3,distance,time]
%;Releases(HitFromTo(agent,physobj1,physobj2,physobj3),
%;         Distance(physobj1,physobj3,distance),
%;         time).
%;[physobj1,physobj2,physobj3,offset,time]
%;Trajectory(FlyingAcrossFromTo(physobj1,physobj2,physobj3),time,
%;           Distance(physobj1,physobj2,offset),offset).
%;[physobj1,physobj2,physobj3,distance1,distance2,offset,time]
%;HoldsAt(Distance(physobj2,physobj3,distance1),time) &
%;distance2 = distance1 - time ->
%;Trajectory(FlyingAcrossFromTo(physobj1,physobj2,physobj3),time,
%;           Distance(physobj1,physobj3,distance2),offset).
%;[agent,physobj1,physobj2,physobj3,time]
%;HoldsAt(FlyingAcrossFromTo(physobj1,physobj2,physobj3),time) ->
%;Initiates(Catch(agent,physobj1),
%;          Holding(agent,physobj1),
%;          time).
%;[agent,physobj1,physobj2,physobj3,time]
%;HoldsAt(FlyingAcrossFromTo(physobj1,physobj2,physobj3),time) ->
%;Terminates(Catch(agent,physobj1),
%;           FlyingAcrossFromTo(physobj1,physobj2,physobj3),
%;           time).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: ecnet/GSpace.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; GSpace: grid space
%;
%; @book{Mueller:1998,
%;   author = "Erik T. Mueller",
%;   year = "1998",
%;   title = "Natural Language Processing with \uppercase{T}hought\uppercase{T}reasure",
%;   address = "New York",
%;   publisher = "Signiform",
%; }
%;

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1600).
% sort coord: integer
% From E: 
% 
% subsort(coord,integer).
subsort(coord, integer).

% sort grid
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1600).
% From E: 
% 
% sort(grid).
sort(grid).
%; object is at (coord1, coord2) in grid.

% fluent GridAt(grid,object,coord,coord)
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1603).
% From E: 
% 
% fluent(gridAt(grid, object, coord, 
%           coord)).
mpred_prop(gridAt(grid, object, coord, coord), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1603).
fluents([gridAt/4]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1606).
%; agent walks from (coord1, coord2)
%; to (coord3, coord4) in grid.

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1608).
% event GridWalk(grid,agent,coord,coord,coord,coord)
% From E: 
% 
% event(gridWalk(grid, agent, coord, coord, coord, 
%          coord)).
mpred_prop(gridWalk(grid, agent, coord, coord, coord, coord), event).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1608).
events([gridWalk/6]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1610).
%; A state constraint says that for a given grid an
%; object is at one cell in that grid at a time:
% [grid,object,coord1,coord2,coord3,coord4,time]
% HoldsAt(GridAt(grid,object,coord1,coord2),time) &
% HoldsAt(GridAt(grid,object,coord3,coord4),time) ->
% coord1=coord3 & coord2=coord4.
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1612).
% From E: 
% 
% '->'(
%    ','(
%       holds(
%          gridAt(Grid, Object, Coord1, 
%             Coord2), 
%          Time), 
%       holds(
%          gridAt(Grid, Object, Coord3, 
%             Coord4), 
%          Time)), 
%    ','(
%       Coord1=Coord3, 
%       Coord2=Coord4)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1612).
 if((not(equals(Coord1, Coord3));not(equals(Coord2, Coord4))),
       (not(gridAt(Grid, Object, Coord1, Coord2));not(gridAt(Grid, Object, Coord3, Coord4)))).


%; An effect axiom states that
%; if an agent walks from one cell in a grid to another cell,
%; the agent will be at second cell:
% [grid,agent,coord1,coord2,coord3,coord4,time]
% Initiates(GridWalk(grid,agent,coord1,coord2,coord3,coord4),
%           GridAt(grid,agent,coord3,coord4),
%           time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1620).
% From E: 
% 
% initiates_at(
%    gridWalk(Grid, Agent, Coord1, Coord2, Coord3, 
%       Coord4), 
%    gridAt(Grid, Agent, Coord3, 
%       Coord4), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1620).
initiates(gridWalk(Grid,
		   Agent,
		   Coord1,
		   Coord2,
		   Coord3,
		   Coord4),
	  gridAt(Grid,Agent,Coord3,Coord4)).


%; An effect axiom states that
%; if an agent walks from one cell in a grid to another cell,
%; the agent will no longer be at the first cell:
% [grid,agent,coord1,coord2,coord3,coord4,time]
% Terminates(GridWalk(grid,agent,coord1,coord2,coord3,coord4),
%            GridAt(grid,agent,coord1,coord2),
%            time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1628).
% From E: 
% 
% terminates_at(
%    gridWalk(Grid, Agent, Coord1, Coord2, Coord3, 
%       Coord4), 
%    gridAt(Grid, Agent, Coord1, 
%       Coord2), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1628).
terminates(gridWalk(Grid,
		    Agent,
		    Coord1,
		    Coord2,
		    Coord3,
		    Coord4),
	   gridAt(Grid,Agent,Coord1,Coord2)).


%; A precondition axiom states that for an agent to walk
%; from one cell in a grid to another cell, the agent
%; must be at the first cell, the second cell must not
%; be occupied, and the first cell must be adjacent to
%; the second cell:
% [grid,agent,coord1,coord2,coord3,coord4,time]
% Happens(GridWalk(grid,agent,coord1,coord2,coord3,coord4),time) ->
% HoldsAt(GridAt(grid,agent,coord1,coord2),time) &
% (!{object} HoldsAt(GridAt(grid,object,coord3,coord4),time)) &
% (coord1=coord3 |
%  coord1=coord3+1 |
%  coord1=coord3-1) &
% (coord2=coord4 |
%  coord2=coord4+1 |
%  coord2=coord4-1).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1638).
% From E: 
% 
% '->'(
%    happens(
%       gridWalk(Grid, Agent, Coord1, Coord2, Coord3, 
%          Coord4), 
%       Time), 
%    ','(
%       holds(
%          gridAt(Grid, Agent, Coord1, 
%             Coord2), 
%          Time), 
%       ','(
%          not(thereExists(Object, 
%                 holds(
%                    gridAt(Grid, Object, Coord3, 
%                       Coord4), 
%                    Time))), 
%          ','(
%             ';'(
%                Coord1=Coord3, 
%                ';'(
%                   Coord1=Coord3+1, 
%                   Coord1=Coord3-1)), 
%             ';'(
%                Coord2=Coord4, 
%                ';'(
%                   Coord2=Coord4+1, 
%                   Coord2=Coord4-1)))))).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1638).
if((not(gridAt(Grid, Agent, Coord1, Coord2));thereExists(Object, gridAt(Grid, Object, Coord3, Coord4));not(equals(Coord1, Coord3)), not(equals(Coord1, Coord3+1)), not(equals(Coord1, Coord3-1));not(equals(Coord2, Coord4)), not(equals(Coord2, Coord4+1)), not(equals(Coord2, Coord4-1))), not(gridWalk(Grid, Agent, Coord1, Coord2, Coord3, Coord4))).


%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: ecnet/PolySpace.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @phdthesis{Cassimatis:2002,
%;   author = "Nicholas L. Cassimatis",
%;   year = "2002",
%;   title = "Polyscheme: A Cognitive Architecture for Integrating Multiple Representation and Inference Schemes",
%;   address = "Cambridge, MA",
%;   school = "Program in Media Arts and Sciences, School of Architecture and Planning, Massachusetts Institute of Technology",
%; }
%;
%; sorts

% sort object
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1676).
% From E: 
% 
% sort(object).
sort(object).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1678).
% sort xcoord: integer
% From E: 
% 
% subsort(xcoord,integer).
subsort(xcoord, integer).

% sort ycoord: integer
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1678).
% From E: 
% 
% subsort(ycoord,integer).
subsort(ycoord, integer).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1680).
% sort grid
% From E: 
% 
% sort(grid).
sort(grid).

% sort shape
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1680).
% From E: 
% 
% sort(shape).
sort(shape).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1682).
% sort color
% From E: 
% 
% sort(color).
sort(color).
%; constants

% shape Round,Square
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1684).
% From E: 
% 
% t(shape,round).
shape(round).
% From E: 
% 
% t(shape,square).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1684).
shape(square).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1686).
% color Red,Green
% From E: 
% 
% t(color,red).
color(red).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1686).
% From E: 
% 
% t(color,green).
color(green).
%; predicates, fluents, and events

% predicate Equal(object,object)
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1688).
% From E: 
% 
% predicate(equal(object,object)).
mpred_prop(equal(object, object), predicate).
predicates([equal/2]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1690).
% predicate Shape(object,shape)
% From E: 
% 
% predicate(shape(object,shape)).
mpred_prop(shape(object, shape), predicate).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1690).
predicates([shape/2]).

% predicate Color(object,color)
% From E: 
% 
% predicate(color(object,color)).
mpred_prop(color(object, color), predicate).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1690).
predicates([color/2]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1692).
% fluent Location(grid,object,xcoord,ycoord)
% From E: 
% 
% fluent(location(grid, object, xcoord, 
%           ycoord)).
mpred_prop(location(grid, object, xcoord, ycoord), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1692).
fluents([location/4]).

% event Move(grid,object,xcoord,ycoord,xcoord,ycoord)
% From E: 
% 
% event(move(grid, object, xcoord, ycoord, xcoord, 
%          ycoord)).
mpred_prop(move(grid, object, xcoord, ycoord, xcoord, ycoord), event).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1692).
events([move/6]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1695).
%; axioms
% [object1,object2]
 % Equal(object1,object2) -> Equal(object2,object1).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1697).
% From E: 
% 
% '->'(
%    equal(Object1,Object2), 
%    equal(Object2,Object1)).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1697).
if(not(equal(Object2,Object1)),
   not(equal(Object1,Object2))).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1699).
%; objects have unique shape
% [object,shape1,shape2]
% Shape(object,shape1) & Shape(object,shape2) ->
% shape1=shape2.
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1701).
% From E: 
% 
% '->'(
%    ','(
%       shape(Object,Shape1), 
%       shape(Object,Shape2)), 
%    Shape1=Shape2).
 if(not(equals(Shape1, Shape2)),
       (not(shape(Object, Shape1));not(shape(Object, Shape2)))).


%; objects have unique color
% [object,color1,color2]
% Color(object,color1) & Color(object,color2) ->
% color1=color2.
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1705).
% From E: 
% 
% '->'(
%    ','(
%       color(Object,Color1), 
%       color(Object,Color2)), 
%    Color1=Color2).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1705).
 if(not(equals(Color1, Color2)),
       (not(color(Object, Color1));not(color(Object, Color2)))).


%; if objects are the same, they have the same shape
% [object1,object2]
% Equal(object1,object2) ->
% ({shape} Shape(object1,shape) & Shape(object2,shape)).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1710).
% From E: 
% 
% '->'(
%    equal(Object1,Object2), 
%    thereExists(Shape, 
%       ','(
%          shape(Object1,Shape), 
%          shape(Object2,Shape)))).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1710).
if(not(thereExists(Shape,  (shape(Object1, Shape), shape(Object2, Shape)))), not(equal(Object1, Object2))).


%; if objects are the same, they have the same color
% [object1,object2]
% Equal(object1,object2) ->
% ({color} Color(object1,color) & Color(object2,color)).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1715).
% From E: 
% 
% '->'(
%    equal(Object1,Object2), 
%    thereExists(Color, 
%       ','(
%          color(Object1,Color), 
%          color(Object2,Color)))).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1715).
if(not(thereExists(Color,  (color(Object1, Color), color(Object2, Color)))), not(equal(Object1, Object2))).


%; if objects are the same, they have the same location
% [grid,object1,object2,xcoord1,ycoord1,xcoord2,ycoord2,time]
% Equal(object1,object2) ->
% (HoldsAt(Location(grid,object1,xcoord1,ycoord1),time) &
%  HoldsAt(Location(grid,object2,xcoord2,ycoord2),time) ->
%  xcoord1=xcoord2 & ycoord1=ycoord2).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1720).
% From E: 
% 
% '->'(
%    equal(Object1,Object2), 
%    '->'(
%       ','(
%          holds(
%             location(Grid, Object1, Xcoord1, 
%                Ycoord1), 
%             Time), 
%          holds(
%             location(Grid, Object2, Xcoord2, 
%                Ycoord2), 
%             Time)), 
%       ','(
%          Xcoord1=Xcoord2, 
%          Ycoord1=Ycoord2))).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1720).
if(((not(equals(Xcoord1, Xcoord2));not(equals(Ycoord1, Ycoord2))), location(Grid, Object1, Xcoord1, Ycoord1), location(Grid, Object2, Xcoord2, Ycoord2)), not(equal(Object1, Object2))).


%; object in one location at a time
% [grid,object,xcoord1,ycoord1,xcoord2,ycoord2,time]
% HoldsAt(Location(grid,object,xcoord1,ycoord1),time) &
% HoldsAt(Location(grid,object,xcoord2,ycoord2),time) ->
% xcoord1=xcoord2 & ycoord1=ycoord2.
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1727).
% From E: 
% 
% '->'(
%    ','(
%       holds(
%          location(Grid, Object, Xcoord1, 
%             Ycoord1), 
%          Time), 
%       holds(
%          location(Grid, Object, Xcoord2, 
%             Ycoord2), 
%          Time)), 
%    ','(
%       Xcoord1=Xcoord2, 
%       Ycoord1=Ycoord2)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1727).
 if((not(equals(Xcoord1, Xcoord2));not(equals(Ycoord1, Ycoord2))),
       (not(location(Grid, Object, Xcoord1, Ycoord1));not(location(Grid, Object, Xcoord2, Ycoord2)))).


%; objects have locations
% [grid,object,time]
% (% {xcoord,ycoord} HoldsAt(Location(grid,object,xcoord,ycoord),time)).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1733).
% From E: 
% 
% exists(
%    [Xcoord,Ycoord], 
%    holds(
%       location(Grid, Object, Xcoord, 
%          Ycoord), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1733).
exists(Xcoord,
 exists(Ycoord,
 location(Grid,Object,Xcoord,Ycoord))).


%; different objects are not at same location
% [grid,object1,object2,xcoord1,ycoord1,time]
% HoldsAt(Location(grid,object1,xcoord1,ycoord1),time) &
% HoldsAt(Location(grid,object2,xcoord1,ycoord1),time) ->
% Equal(object1,object2).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1737).
% From E: 
% 
% '->'(
%    ','(
%       holds(
%          location(Grid, Object1, Xcoord1, 
%             Ycoord1), 
%          Time), 
%       holds(
%          location(Grid, Object2, Xcoord1, 
%             Ycoord1), 
%          Time)), 
%    equal(Object1,Object2)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1737).
 if(not(equal(Object1, Object2)),
       (not(location(Grid, Object1, Xcoord1, Ycoord1));not(location(Grid, Object2, Xcoord1, Ycoord1)))).


%; moving to a location causes an object to be at that location
% [grid,object,xcoord1,ycoord1,xcoord2,ycoord2,time]
% Initiates(Move(grid,object,xcoord1,ycoord1,xcoord2,ycoord2),
%           Location(grid,object,xcoord2,ycoord2),
%           time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1743).
% From E: 
% 
% initiates_at(
%    move(Grid, Object, Xcoord1, Ycoord1, Xcoord2, 
%       Ycoord2), 
%    location(Grid, Object, Xcoord2, 
%       Ycoord2), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1743).
initiates(move(Grid,
	       Object,
	       Xcoord1,
	       Ycoord1,
	       Xcoord2,
	       Ycoord2),
	  location(Grid,Object,Xcoord2,Ycoord2)).


%; moving to a location causes the object no longer to be at its previous
%; location
% [grid,object,xcoord1,ycoord1,xcoord2,ycoord2,time]
% Terminates(Move(grid,object,xcoord1,ycoord1,xcoord2,ycoord2),
%            Location(grid,object,xcoord1,ycoord1),
%            time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1750).
% From E: 
% 
% terminates_at(
%    move(Grid, Object, Xcoord1, Ycoord1, Xcoord2, 
%       Ycoord2), 
%    location(Grid, Object, Xcoord1, 
%       Ycoord1), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1750).
terminates(move(Grid,
		Object,
		Xcoord1,
		Ycoord1,
		Xcoord2,
		Ycoord2),
	   location(Grid,
		    Object,
		    Xcoord1,
		    Ycoord1)).


%;; allow diagonal movements
%;[grid,object,xcoord1,ycoord1,xcoord2,ycoord2,time]
%;Happens(Move(grid,object,xcoord1,ycoord1,xcoord2,ycoord2),time) ->
%;HoldsAt(Location(grid,object,xcoord1,ycoord1),time) &
%;(xcoord1=xcoord2 |
%; xcoord1=xcoord2+1 |
%; xcoord1=xcoord2-1) &
%;(ycoord1=ycoord2 |
%; ycoord1=ycoord2+1 |
%; ycoord1=ycoord2-1).
%; only allow right angle movements
% [grid,object,xcoord1,ycoord1,xcoord2,ycoord2,time]
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1768).
% Happens(Move(grid,object,xcoord1,ycoord1,xcoord2,ycoord2),time) ->
% HoldsAt(Location(grid,object,xcoord1,ycoord1),time) &
% ((xcoord1=xcoord2 & (ycoord1=ycoord2+1 | ycoord1=ycoord2-1)) |
%  (ycoord1=ycoord2 & (xcoord1=xcoord2+1 | xcoord1=xcoord2-1))).
% From E: 
% 
% '->'(
%    happens(
%       move(Grid, Object, Xcoord1, Ycoord1, Xcoord2, 
%          Ycoord2), 
%       Time), 
%    ','(
%       holds(
%          location(Grid, Object, Xcoord1, 
%             Ycoord1), 
%          Time), 
%       ';'(
%          ','(
%             Xcoord1=Xcoord2, 
%             ';'(
%                Ycoord1=Ycoord2+1, 
%                Ycoord1=Ycoord2-1)), 
%          ','(
%             Ycoord1=Ycoord2, 
%             ';'(
%                Xcoord1=Xcoord2+1, 
%                Xcoord1=Xcoord2-1))))).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1768).
if((not(location(Grid, Object, Xcoord1, Ycoord1));(not(equals(Xcoord1, Xcoord2));not(equals(Ycoord1, Ycoord2+1)), not(equals(Ycoord1, Ycoord2-1))), (not(equals(Ycoord1, Ycoord2));not(equals(Xcoord1, Xcoord2+1)), not(equals(Xcoord1, Xcoord2-1)))), not(move(Grid, Object, Xcoord1, Ycoord1, Xcoord2, Ycoord2))).


%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: ecnet/HandTo.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1792).
% event HandTo(agent,agent,physobj)
% From E: 
% 
% event(handTo(agent,agent,physobj)).
events([handTo/3]).
mpred_prop(handTo(agent, agent, physobj), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1792).
actions([handTo/3]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1794).
% [agent1,agent2,physobj,time]
% Initiates(HandTo(agent1,agent2,physobj),
%           Holding(agent2,physobj),
%           time).
% From E: 
% 
% initiates_at(
%    handTo(Agent1,Agent2,Physobj), 
%    holding(Agent2,Physobj), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1794).
initiates(handTo(Agent1,Agent2,Physobj),
	  holding(Agent2,Physobj)).


% [agent1,agent2,physobj,time]
% Terminates(HandTo(agent1,agent2,physobj),
%            Holding(agent1,physobj),
%            time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1800).
% From E: 
% 
% terminates_at(
%    handTo(Agent1,Agent2,Physobj), 
%    holding(Agent1,Physobj), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1800).
terminates(handTo(Agent1,Agent2,Physobj),
	   holding(Agent1,Physobj)).


% [agent1,agent2,physobj,time]
% Happens(HandTo(agent1,agent2,physobj),time) ->
% HoldsAt(Holding(agent1,physobj),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1805).
% From E: 
% 
% '->'(
%    happens(
%       handTo(Agent1,Agent2,Physobj), 
%       Time), 
%    holds(
%       holding(Agent1,Physobj), 
%       Time)).
 %   [Time].
if(not(holding(Agent1,Physobj)),
   not(handTo(Agent1,Agent2,Physobj))).

% event ShakeHands(agent,agent)
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1807).
% From E: 
% 
% event(shakeHands(agent,agent)).
events([shakeHands/2]).
mpred_prop(shakeHands(agent, agent), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1807).
actions([shakeHands/2]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1810).
% event WriteOn(agent,paper,pen)
% From E: 
% 
% event(writeOn(agent,paper,pen)).
events([writeOn/3]).
mpred_prop(writeOn(agent, paper, pen), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1810).
actions([writeOn/3]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1814).
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: ecnet/Container.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%;
%; Container: container
%;
%; linkage to OTSpace(M):
% [agent,container1,container2,time]
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1834).
% Happens(TakeOutOf(agent,container1,container2),time) ->
% HoldsAt(ContainerIsOpen(container2),time).
% From E: 
% 
% '->'(
%    happens(
%       takeOutOf(Agent,Container1,Container2), 
%       Time), 
%    holds(
%       containerIsOpen(Container2), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1834).
if(not(containerIsOpen(Container2)),
   not(takeOutOf(Agent,Container1,Container2))).


% [agent,container1,container2,time]
% Happens(PutInside(agent,container1,container2),time) ->
% HoldsAt(ContainerIsOpen(container2),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1838).
% From E: 
% 
% '->'(
%    happens(
%       putInside(Agent,Container1,Container2), 
%       Time), 
%    holds(
%       containerIsOpen(Container2), 
%       Time)).
 %   [Time].
if(not(containerIsOpen(Container2)),
   not(putInside(Agent,Container1,Container2))).


%; agent opens container.

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1842).
% event ContainerOpen(agent,container)
% From E: 
% 
% event(containerOpen(agent,container)).
events([containerOpen/2]).
mpred_prop(containerOpen(agent, container), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1842).
actions([containerOpen/2]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1844).
%; agent closes container.

% event ContainerClose(agent,container)
% From E: 
% 
% event(containerClose(agent,container)).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1844).
events([containerClose/2]).
mpred_prop(containerClose(agent, container), action).
actions([containerClose/2]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1847).
%; container is open.

% fluent ContainerIsOpen(container)
% From E: 
% 
% fluent(containerIsOpen(container)).
mpred_prop(containerIsOpen(container), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1847).
fluents([containerIsOpen/1]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1850).
% fluent ContainerClosed(container)
% From E: 
% 
% fluent(containerClosed(container)).
mpred_prop(containerClosed(container), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1850).
fluents([containerClosed/1]).

% noninertial ContainerClosed
% From E: 
% 
% ':-'(call_pel_directive(noninertial(containerClosed))).
:- call_pel_directive(noninertial(containerClosed)).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1853).
% [container,time]
% HoldsAt(ContainerClosed(container),time) <->
% !HoldsAt(ContainerIsOpen(container),time).
% From E: 
% 
% <->(
%    holds(
%       containerClosed(Container), 
%       Time), 
%    holds(
%       not(containerIsOpen(Container)), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1853).
if(containerIsOpen(Container), not(containerClosed(Container))),
if(not(containerClosed(Container)), containerIsOpen(Container)).


%; A precondition axiom states that
%; for an agent to open a container,
%; the agent must be awake,
%; the container must not already be open, and
%; the agent must be holding the container.
% [agent,container,time]
% Happens(ContainerOpen(agent,container),time) ->
% HoldsAt(Awake(agent),time) &
% !HoldsAt(ContainerIsOpen(container),time) &
% HoldsAt(Holding(agent,container),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1862).
% From E: 
% 
% '->'(
%    happens(
%       containerOpen(Agent,Container), 
%       Time), 
%    ','(
%       holds(
%          awake(Agent), 
%          Time), 
%       ','(
%          holds(
%             not(containerIsOpen(Container)), 
%             Time), 
%          holds(
%             holding(Agent,Container), 
%             Time)))).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1862).
 if((not(awake(Agent));containerIsOpen(Container);not(holding(Agent, Container))),
      not(containerOpen(Agent, Container))).


%; An effect axiom states that
%; if an agent opens a container,
%; the container will be open:
% [agent,container,time]
% Initiates(ContainerOpen(agent,container),ContainerIsOpen(container),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1871).
% From E: 
% 
% initiates_at(
%    containerOpen(Agent,Container), 
%    containerIsOpen(Container), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1871).
initiates(containerOpen(Agent,Container),
	  containerIsOpen(Container)).


%; A precondition axiom states that
%; for an agent to close a container,
%; the agent must be awake,
%; the container must be open, and
%; the agent must be holding the container.
% [agent,container,time]
% Happens(ContainerClose(agent,container),time) ->
% HoldsAt(Awake(agent),time) &
% HoldsAt(ContainerIsOpen(container),time) &
% HoldsAt(Holding(agent,container),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1879).
% From E: 
% 
% '->'(
%    happens(
%       containerClose(Agent,Container), 
%       Time), 
%    ','(
%       holds(
%          awake(Agent), 
%          Time), 
%       ','(
%          holds(
%             containerIsOpen(Container), 
%             Time), 
%          holds(
%             holding(Agent,Container), 
%             Time)))).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1879).
 if((not(awake(Agent));not(containerIsOpen(Container));not(holding(Agent, Container))),
      not(containerClose(Agent, Container))).


%; An effect axiom states that
%; if an agent closes a container,
%; the container will no longer be open:
% [agent,container,time]
% Terminates(ContainerClose(agent,container),ContainerIsOpen(container),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1888).
% From E: 
% 
% terminates_at(
%    containerClose(Agent,Container), 
%    containerIsOpen(Container), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1888).
terminates(containerClose(Agent,Container),
	   containerIsOpen(Container)).


%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: ecnet/SpeechAct.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; The SpeechAct representation deals with a few speech acts
%; \fullcite{Searle:1969}.
%;
%; @book{Searle:1969,
%;   author = "John R. Searle",
%;   year = "1969",
%;   title = "Speech Acts: An Essay in the Philosophy of Language",
%;   address = "Cambridge",
%;   publisher = "Cambridge University Press",
%; }
%;
%; We handle
%; the illocutionary acts of
%; inviting someone into one's house (a form of request) and
%; greeting someone,
%; and the expressive speech act of crying for joy.
%;
%; inviting in
%; agent1 invites agent2 into room.

% event InviteIn(agent,agent,room)
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1929).
% From E: 
% 
% event(inviteIn(agent,agent,room)).
events([inviteIn/3]).
mpred_prop(inviteIn(agent, agent, room), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1929).
actions([inviteIn/3]).


%; agent1 is invited into room by agent2.

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1932).
% fluent InvitedIn(agent,room,agent)
% From E: 
% 
% fluent(invitedIn(agent,room,agent)).
mpred_prop(invitedIn(agent, room, agent), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1932).
fluents([invitedIn/3]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1934).
%; A precondition axiom states that for
%; an agent to invite another agent into a room,
%; the first agent must be in the room and
%; there must be an outside area such that
%; the second agent is at the outside area and
%; the outside area is adjacent to the room:
% [agent1,agent2,room,time]
% Happens(InviteIn(agent1,agent2,room),time) ->
% HoldsAt(At(agent1,room),time) &
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1940).
% {outside}% 
% HoldsAt(At(agent2,outside),time) &
% Adjacent(room,outside).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1943).
% From E: 
% 
% exists(Outside, 
%    '->'(
%       happens(
%          inviteIn(Agent1,Agent2,Room), 
%          Time), 
%       ','(
%          holds(
%             at_loc(Agent1,Room), 
%             Time), 
%          ','(
%             holds(
%                at_loc(Agent2,Outside), 
%                Time), 
%             adjacent(Room,Outside))))).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1943).
exists(Outside,  (at_loc(Agent1, Room), at_loc(Agent2, Outside), adjacent(Room, Outside);not(inviteIn(Agent1, Agent2, Room)))).


%; An effect axiom states that if
%; an agent invites another agent into a room,
%; the second agent will be invited into the room by the first agent:
% [agent1,agent2,room,time]
% Initiates(InviteIn(agent1,agent2,room),
%           InvitedIn(agent2,room,agent1),
%           time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1950).
% From E: 
% 
% initiates_at(
%    inviteIn(Agent1,Agent2,Room), 
%    invitedIn(Agent2,Room,Agent1), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1950).
initiates(inviteIn(Agent1,Agent2,Room),
	  invitedIn(Agent2,Room,Agent1)).


%; agent intends to walk into room.

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1956).
% event IntendToWalkIn(agent,room)
% From E: 
% 
% event(intendToWalkIn(agent,room)).
events([intendToWalkIn/2]).
mpred_prop(intendToWalkIn(agent, room), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1956).
actions([intendToWalkIn/2]).


%; agent has the intention to walk into room.

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1958).
% fluent IntentionToWalkIn(agent,room)
% From E: 
% 
% fluent(intentionToWalkIn(agent,room)).
mpred_prop(intentionToWalkIn(agent, room), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1958).
fluents([intentionToWalkIn/2]).


%; agent acts on the intention to walk into room.

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1960).
% fluent ActOnIntentionToWalkIn(agent,room)
% From E: 
% 
% fluent(actOnIntentionToWalkIn(agent,room)).
mpred_prop(actOnIntentionToWalkIn(agent, room), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1960).
fluents([actOnIntentionToWalkIn/2]).

% noninertial ActOnIntentionToWalkIn
% From E: 
% 
% ':-'(call_pel_directive(noninertial(actOnIntentionToWalkIn))).
:- call_pel_directive(noninertial(actOnIntentionToWalkIn)).
%; A trigger axiom states that
%; if an agent is invited into a room by another agent,
%; the first agent likes the second agent, and
%; the first agent does not already have the intention to
%; walk into the room,
%; the first agent intends to walk into the room:
% [agent1,agent2,room,time]
% HoldsAt(InvitedIn(agent1,room,agent2),time) &
% HoldsAt(Like(agent1,agent2),time) &
% !HoldsAt(IntentionToWalkIn(agent1,room),time) ->
% Happens(IntendToWalkIn(agent1,room),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1969).
% From E: 
% 
% '->'(
%    ','(
%       holds(
%          invitedIn(Agent1,Room,Agent2), 
%          Time), 
%       ','(
%          holds(
%             like(Agent1,Agent2), 
%             Time), 
%          holds(
%             not(intentionToWalkIn(Agent1,Room)), 
%             Time))), 
%    happens(
%       intendToWalkIn(Agent1,Room), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1969).
 if(not(intendToWalkIn(Agent1, Room)),
       (not(invitedIn(Agent1, Room, Agent2));not(like(Agent1, Agent2));intentionToWalkIn(Agent1, Room))).


%; An effect axiom states that
%; if an agent intends to walk into a room,
%; the agent will have the intention to walk into the room:
% [agent,room,time]
% Initiates(IntendToWalkIn(agent,room),
%           IntentionToWalkIn(agent,room),
%           time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1978).
% From E: 
% 
% initiates_at(
%    intendToWalkIn(Agent,Room), 
%    intentionToWalkIn(Agent,Room), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1978).
initiates(intendToWalkIn(Agent,Room),
	  intentionToWalkIn(Agent,Room)).


%; Two trigger axioms state that
%; if an agent has the intention to walk into a room,
%; the agent acts on the intention to walk into the room,
%; the agent is at a location,
%; side one (two) of a door is the room,
%; side two (one) of the door is the location,
%; agent will walk through side two (one) of the door:
% [agent,room,location,door,time]
% HoldsAt(IntentionToWalkIn(agent,room),time) &
% HoldsAt(ActOnIntentionToWalkIn(agent,room),time) &
% HoldsAt(At(agent,location),time) &
% Side1(door)=room &
% Side2(door)=location ->
% Happens(WalkThroughDoor21(agent,door),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1990).
% From E: 
% 
% '->'(
%    ','(
%       holds(
%          intentionToWalkIn(Agent,Room), 
%          Time), 
%       ','(
%          holds(
%             actOnIntentionToWalkIn(Agent,Room), 
%             Time), 
%          ','(
%             holds(
%                at_loc(Agent,Location), 
%                Time), 
%             ','(
%                '='(
%                   side1(Door), 
%                   Room), 
%                '='(
%                   side2(Door), 
%                   Location))))), 
%    happens(
%       walkThroughDoor21(Agent,Door), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1990).
 if(not(walkThroughDoor21(Agent, Door)),
       (not(intentionToWalkIn(Agent, Room));not(actOnIntentionToWalkIn(Agent, Room));not(at_loc(Agent, Location));not(side1(Door, Room));not(side2(Door, Location)))).


% [agent,room,location,door,time]
% HoldsAt(IntentionToWalkIn(agent,room),time) &
% HoldsAt(ActOnIntentionToWalkIn(agent,room),time) &
% HoldsAt(At(agent,location),time) &
% Side2(door)=room &
% Side1(door)=location ->
% Happens(WalkThroughDoor12(agent,door),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1999).
% From E: 
% 
% '->'(
%    ','(
%       holds(
%          intentionToWalkIn(Agent,Room), 
%          Time), 
%       ','(
%          holds(
%             actOnIntentionToWalkIn(Agent,Room), 
%             Time), 
%          ','(
%             holds(
%                at_loc(Agent,Location), 
%                Time), 
%             ','(
%                '='(
%                   side2(Door), 
%                   Room), 
%                '='(
%                   side1(Door), 
%                   Location))))), 
%    happens(
%       walkThroughDoor12(Agent,Door), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',1999).
 if(not(walkThroughDoor12(Agent, Door)),
       (not(intentionToWalkIn(Agent, Room));not(actOnIntentionToWalkIn(Agent, Room));not(at_loc(Agent, Location));not(side2(Door, Room));not(side1(Door, Location)))).


%; Two effect axioms state that
%; if side one (two) of a door is a room and
%; an agent walks through side two (one) of the door,
%; the agent will no longer have the intention to
%; walk into the room:
% [agent,room,door,time]
% Side1(door)=room ->
% Terminates(WalkThroughDoor21(agent,door),
%            IntentionToWalkIn(agent,room),
%            time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2011).
% From E: 
% 
% '->'(
%    '='(
%       side1(Door), 
%       Room), 
%    terminates_at(
%       walkThroughDoor21(Agent,Door), 
%       intentionToWalkIn(Agent,Room), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2011).
if(not(terminates(walkThroughDoor21(Agent,Door),
		  at(intentionToWalkIn(Agent,Room),
		     Time))),
   not(side1(Door,Room))).


% [agent,room,door,time]
% Side2(door)=room ->
% Terminates(WalkThroughDoor12(agent,door),
%            IntentionToWalkIn(agent,room),
%            time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2018).
% From E: 
% 
% '->'(
%    '='(
%       side2(Door), 
%       Room), 
%    terminates_at(
%       walkThroughDoor12(Agent,Door), 
%       intentionToWalkIn(Agent,Room), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2018).
if(not(terminates(walkThroughDoor12(Agent,Door),
		  at(intentionToWalkIn(Agent,Room),
		     Time))),
   not(side2(Door,Room))).


%; agent greets object.

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2024).
% event Greet(agent,object)
% From E: 
% 
% event(greet(agent,object)).
events([greet/2]).
mpred_prop(greet(agent, object), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2024).
actions([greet/2]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2026).
% event SayPleasedToMeet(agent,agent)
% From E: 
% 
% event(sayPleasedToMeet(agent,agent)).
events([sayPleasedToMeet/2]).
mpred_prop(sayPleasedToMeet(agent, agent), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2026).
actions([sayPleasedToMeet/2]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2028).
%; agent says goodbye to object.

% event SayGoodbye(agent,object)
% From E: 
% 
% event(sayGoodbye(agent,object)).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2028).
events([sayGoodbye/2]).
mpred_prop(sayGoodbye(agent, object), action).
actions([sayGoodbye/2]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2031).
% event TalkAbout(agent,content)
% From E: 
% 
% event(talkAbout(agent,content)).
events([talkAbout/2]).
mpred_prop(talkAbout(agent, content), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2031).
actions([talkAbout/2]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2033).
% event Converse(agent,agent)
% From E: 
% 
% event(converse(agent,agent)).
events([converse/2]).
mpred_prop(converse(agent, agent), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2033).
actions([converse/2]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2035).
% [agent1,agent2,time]
% Happens(Converse(agent1,agent2),time) ->
% {location}% 
% HoldsAt(At(agent1,location),time) &
% HoldsAt(At(agent2,location),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2037).
% From E: 
% 
% exists(Location, 
%    '->'(
%       happens(
%          converse(Agent1,Agent2), 
%          Time), 
%       ','(
%          holds(
%             at_loc(Agent1,Location), 
%             Time), 
%          holds(
%             at_loc(Agent2,Location), 
%             Time)))).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2037).
exists(Location,  (at_loc(Agent1, Location), at_loc(Agent2, Location);not(converse(Agent1, Agent2)))).


%; A precondition axiom states that for
%; an agent to greet an object,
%; there must be a location such that
%; the agent is at the location and
%; the object is at the location:
% [agent,object,time]
% Happens(Greet(agent,object),time) ->
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2046).
% {location}% 
% HoldsAt(At(agent,location),time) &
% HoldsAt(At(object,location),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2048).
% From E: 
% 
% exists(Location, 
%    '->'(
%       happens(
%          greet(Agent,Object), 
%          Time), 
%       ','(
%          holds(
%             at_loc(Agent,Location), 
%             Time), 
%          holds(
%             at_loc(Object,Location), 
%             Time)))).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2048).
exists(Location,  (at_loc(Agent, Location), at_loc(Object, Location);not(greet(Agent, Object)))).


% [agent,object,time]
% Happens(SayGoodbye(agent,object),time) ->
% {location}% 
% HoldsAt(At(agent,location),time) &
% HoldsAt(At(object,location),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2053).
% From E: 
% 
% exists(Location, 
%    '->'(
%       happens(
%          sayGoodbye(Agent,Object), 
%          Time), 
%       ','(
%          holds(
%             at_loc(Agent,Location), 
%             Time), 
%          holds(
%             at_loc(Object,Location), 
%             Time)))).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2053).
exists(Location,  (at_loc(Agent, Location), at_loc(Object, Location);not(sayGoodbye(Agent, Object)))).


%; speech: expression of emotions
%; agent cries for joy.

% event CryForJoy(agent)
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2060).
% From E: 
% 
% event(cryForJoy(agent)).
events([cryForJoy/1]).
mpred_prop(cryForJoy(agent), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2060).
actions([cryForJoy/1]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2063).
%; A precondition axiom states that for
%; an agent to cry for joy,
%; the agent must be happy:
% [agent,time]
% Happens(CryForJoy(agent),time) ->
% HoldsAt(Happy(agent),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2067).
% From E: 
% 
% '->'(
%    happens(
%       cryForJoy(Agent), 
%       Time), 
%    holds(
%       happy(Agent), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2067).
if(not(happy(Agent)),not(cryForJoy(Agent))).

% event Threaten(agent,agent,weapon)
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2070).
% From E: 
% 
% event(threaten(agent,agent,weapon)).
events([threaten/3]).
mpred_prop(threaten(agent, agent, weapon), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2070).
actions([threaten/3]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2073).
% event ReleaseFromThreat(agent,agent)
% From E: 
% 
% event(releaseFromThreat(agent,agent)).
events([releaseFromThreat/2]).
mpred_prop(releaseFromThreat(agent, agent), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2073).
actions([releaseFromThreat/2]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2075).
% fluent ThreatenedBy(agent,agent)
% From E: 
% 
% fluent(threatenedBy(agent,agent)).
mpred_prop(threatenedBy(agent, agent), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2075).
fluents([threatenedBy/2]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2077).
% [agent1,agent2,weapon,time]
% Happens(Threaten(agent1,agent2,weapon), time) ->
% HoldsAt(Holding(agent1,weapon),time) &
% {location}% 
% HoldsAt(At(agent1,location),time) &
% HoldsAt(At(agent2,location),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2080).
% From E: 
% 
% exists(Location, 
%    '->'(
%       happens(
%          threaten(Agent1,Agent2,Weapon), 
%          Time), 
%       ','(
%          holds(
%             holding(Agent1,Weapon), 
%             Time), 
%          ','(
%             holds(
%                at_loc(Agent1,Location), 
%                Time), 
%             holds(
%                at_loc(Agent2,Location), 
%                Time))))).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2080).
exists(Location,  (holding(Agent1, Weapon), at_loc(Agent1, Location), at_loc(Agent2, Location);not(threaten(Agent1, Agent2, Weapon)))).


% [agent1,agent2,weapon,time]
% Happens(Threaten(agent1,agent2,weapon), time) ->
% Happens(BecomeAngryAt(agent2,agent1),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2085).
% From E: 
% 
% '->'(
%    happens(
%       threaten(Agent1,Agent2,Weapon), 
%       Time), 
%    happens(
%       becomeAngryAt(Agent2,Agent1), 
%       Time)).
 %   [Time].
if(not(becomeAngryAt(Agent2,Agent1)),
   not(threaten(Agent1,Agent2,Weapon))).


% [agent1,agent2,weapon,time]
% Initiates(Threaten(agent1,agent2,weapon),
%           ThreatenedBy(agent2,agent1),
%           time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2089).
% From E: 
% 
% initiates_at(
%    threaten(Agent1,Agent2,Weapon), 
%    threatenedBy(Agent2,Agent1), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2089).
initiates(threaten(Agent1,Agent2,Weapon),
	  threatenedBy(Agent2,Agent1)).


% [agent1,agent2,time]
% Terminates(ReleaseFromThreat(agent1,agent2),
%            ThreatenedBy(agent2,agent1),
%            time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2094).
% From E: 
% 
% terminates_at(
%    releaseFromThreat(Agent1,Agent2), 
%    threatenedBy(Agent2,Agent1), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2094).
terminates(releaseFromThreat(Agent1,Agent2),
	   threatenedBy(Agent2,Agent1)).

% event Order(agent,agent,physobj)
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2097).
% From E: 
% 
% event(order(agent,agent,physobj)).
events([order/3]).
mpred_prop(order(agent, agent, physobj), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2097).
actions([order/3]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2100).
% fluent KnowOrder(agent,agent,physobj)
% From E: 
% 
% fluent(knowOrder(agent,agent,physobj)).
mpred_prop(knowOrder(agent, agent, physobj), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2100).
fluents([knowOrder/3]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2102).
% [agent1,agent2,physobj,time]
% Initiates(Order(agent1,agent2,physobj),
%           KnowOrder(agent2,agent1,physobj),
%           time).
% From E: 
% 
% initiates_at(
%    order(Agent1,Agent2,Physobj), 
%    knowOrder(Agent2,Agent1,Physobj), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2102).
initiates(order(Agent1,Agent2,Physobj),
	  knowOrder(Agent2,Agent1,Physobj)).


% [agent1,agent2,physobj,time]
% Happens(Order(agent1,agent2,physobj),time) ->
% {location}% 
% HoldsAt(At(agent1,location),time) &
% HoldsAt(At(agent2,location),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2108).
% From E: 
% 
% exists(Location, 
%    '->'(
%       happens(
%          order(Agent1,Agent2,Physobj), 
%          Time), 
%       ','(
%          holds(
%             at_loc(Agent1,Location), 
%             Time), 
%          holds(
%             at_loc(Agent2,Location), 
%             Time)))).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2108).
exists(Location,  (at_loc(Agent1, Location), at_loc(Agent2, Location);not(order(Agent1, Agent2, Physobj)))).

% event Request(agent,agent,physobj)
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2112).
% From E: 
% 
% event(request(agent,agent,physobj)).
events([request/3]).
mpred_prop(request(agent, agent, physobj), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2112).
actions([request/3]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2115).
% fluent KnowRequest(agent,agent,physobj)
% From E: 
% 
% fluent(knowRequest(agent,agent,physobj)).
mpred_prop(knowRequest(agent, agent, physobj), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2115).
fluents([knowRequest/3]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2117).
% [agent1,agent2,physobj,time]
% Initiates(Request(agent1,agent2,physobj),
%           KnowRequest(agent2,agent1,physobj),
%           time).
% From E: 
% 
% initiates_at(
%    request(Agent1,Agent2,Physobj), 
%    knowRequest(Agent2,Agent1,Physobj), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2117).
initiates(request(Agent1,Agent2,Physobj),
	  knowRequest(Agent2,Agent1,Physobj)).


% [agent1,agent2,physobj,time]
% Happens(Request(agent1,agent2,physobj),time) ->
% {location}% 
% HoldsAt(At(agent1,location),time) &
% HoldsAt(At(agent2,location),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2123).
% From E: 
% 
% exists(Location, 
%    '->'(
%       happens(
%          request(Agent1,Agent2,Physobj), 
%          Time), 
%       ','(
%          holds(
%             at_loc(Agent1,Location), 
%             Time), 
%          holds(
%             at_loc(Agent2,Location), 
%             Time)))).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2123).
exists(Location,  (at_loc(Agent1, Location), at_loc(Agent2, Location);not(request(Agent1, Agent2, Physobj)))).


%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: ecnet/Sleep.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; The Sleep representation deals with the activity of sleeping and
%; body posture.
%; It is similar to the finite automaton representation of sleep
%; used in ThoughtTreasure \fullcite[chap. 7]{Mueller:1998}.
%;
%; @book{Mueller:1998,
%;   author = "Erik T. Mueller",
%;   year = "1998",
%;   title = "Natural Language Processing with \uppercase{T}hought\uppercase{T}reasure",
%;   address = "New York",
%;   publisher = "Signiform",
%; }
%;
%; sleep
%; agent wakes up.

% event WakeUp(agent)
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2162).
% From E: 
% 
% event(wakeUp(agent)).
events([wakeUp/1]).
mpred_prop(wakeUp(agent), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2162).
actions([wakeUp/1]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2165).
%; agent gets tired.

% event GetTired(agent)
% From E: 
% 
% event(getTired(agent)).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2165).
events([getTired/1]).
mpred_prop(getTired(agent), action).
actions([getTired/1]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2168).
%; agent falls asleep.

% event FallAsleep(agent)
% From E: 
% 
% event(fallAsleep(agent)).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2168).
events([fallAsleep/1]).
mpred_prop(fallAsleep(agent), action).
actions([fallAsleep/1]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2171).
%; agent is asleep.

% fluent Sleep0(agent)
% From E: 
% 
% fluent(sleep0(agent)).
mpred_prop(sleep0(agent), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2171).
fluents([sleep0/1]).


%; agent is awake and in bed.

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2174).
% fluent Sleep1(agent)
% From E: 
% 
% fluent(sleep1(agent)).
mpred_prop(sleep1(agent), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2174).
fluents([sleep1/1]).


%; agent is awake, out of bed, and undressed.

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2176).
% fluent Sleep2(agent)
% From E: 
% 
% fluent(sleep2(agent)).
mpred_prop(sleep2(agent), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2176).
fluents([sleep2/1]).


%; agent is awake and dressed.

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2178).
% fluent Sleep3(agent)
% From E: 
% 
% fluent(sleep3(agent)).
mpred_prop(sleep3(agent), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2178).
fluents([sleep3/1]).


%; agent is tired and dressed.

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2180).
% fluent Sleep4(agent)
% From E: 
% 
% fluent(sleep4(agent)).
mpred_prop(sleep4(agent), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2180).
fluents([sleep4/1]).


%; agent is tired and undressed.

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2182).
% fluent Sleep5(agent)
% From E: 
% 
% fluent(sleep5(agent)).
mpred_prop(sleep5(agent), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2182).
fluents([sleep5/1]).


%; agent is in bed, waiting to fall asleep.

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2184).
% fluent Sleep6(agent)
% From E: 
% 
% fluent(sleep6(agent)).
mpred_prop(sleep6(agent), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2184).
fluents([sleep6/1]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2186).
%; At any time, an agent is in one of seven sleep states:

% xor Sleep0, Sleep1, Sleep2, Sleep3, Sleep4, Sleep5, Sleep6
% From E: 
% 
% xor([sleep0,sleep1,sleep2,sleep3,sleep4,sleep5,sleep6]).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2186).
xor([sleep0,sleep1,sleep2,sleep3,sleep4,sleep5,sleep6]).
%; constraints
%; agent is asleep.

% fluent Asleep(agent)
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2191).
% From E: 
% 
% fluent(asleep(agent)).
mpred_prop(asleep(agent), fluent).
fluents([asleep/1]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2191).
%; agent is awake.

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2194).
% fluent Awake(agent)
% From E: 
% 
% fluent(awake(agent)).
mpred_prop(awake(agent), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2194).
fluents([awake/1]).

% noninertial Asleep
% From E: 
% 
% ':-'(call_pel_directive(noninertial(asleep))).
:- call_pel_directive(noninertial(asleep)).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2196).
% noninertial Awake
% From E: 
% 
% ':-'(call_pel_directive(noninertial(awake))).
:- call_pel_directive(noninertial(awake)).
%; Sleep0 indicates that the agent is asleep:
% [agent,time]
 % HoldsAt(Asleep(agent),time) <-> HoldsAt(Sleep0(agent),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2198).
% From E: 
% 
% <->(
%    holds(
%       asleep(Agent), 
%       Time), 
%    holds(
%       sleep0(Agent), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2198).
if(not(sleep0(Agent)), not(asleep(Agent))),
if(not(asleep(Agent)), not(sleep0(Agent))).


%; In all other sleep states, the agent is awake:
% [agent,time]
% HoldsAt(Awake(agent),time) <->
% HoldsAt(Sleep1(agent),time) |
% HoldsAt(Sleep2(agent),time) |
% HoldsAt(Sleep3(agent),time) |
% HoldsAt(Sleep4(agent),time) |
% HoldsAt(Sleep5(agent),time) |
% HoldsAt(Sleep6(agent),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2202).
% From E: 
% 
% <->(
%    holds(
%       awake(Agent), 
%       Time), 
%    ';'(
%       holds(
%          sleep1(Agent), 
%          Time), 
%       ';'(
%          holds(
%             sleep2(Agent), 
%             Time), 
%          ';'(
%             holds(
%                sleep3(Agent), 
%                Time), 
%             ';'(
%                holds(
%                   sleep4(Agent), 
%                   Time), 
%                ';'(
%                   holds(
%                      sleep5(Agent), 
%                      Time), 
%                   holds(
%                      sleep6(Agent), 
%                      Time))))))).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2202).
if((not(sleep1(Agent)), not(sleep2(Agent)), not(sleep3(Agent)), not(sleep4(Agent)), not(sleep5(Agent)), not(sleep6(Agent))), not(awake(Agent))),
if(not(awake(Agent)),  (not(sleep1(Agent)), not(sleep2(Agent)), not(sleep3(Agent)), not(sleep4(Agent)), not(sleep5(Agent)), not(sleep6(Agent)))).


%; A number of axioms are used to specify the transitions of
%; a finite automaton.
%;--
%; Waking up causes a transition from Sleep0
%; to Sleep1:
% [agent,time]
 
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2217).
% Terminates(WakeUp(agent),Sleep0(agent),time).
% From E: 
% 
% terminates_at(
%    wakeUp(Agent), 
%    sleep0(Agent), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2217).
terminates(wakeUp(Agent),sleep0(Agent)).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2219).
% [agent,time]
 % Initiates(WakeUp(agent),Sleep1(agent),time).
% From E: 
% 
% initiates_at(
%    wakeUp(Agent), 
%    sleep1(Agent), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2219).
initiates(wakeUp(Agent),sleep1(Agent)).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2221).
% [agent,time]
 % Happens(WakeUp(agent),time) -> HoldsAt(Sleep0(agent),time).
% From E: 
% 
% '->'(
%    happens(
%       wakeUp(Agent), 
%       Time), 
%    holds(
%       sleep0(Agent), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2221).
if(not(sleep0(Agent)),not(wakeUp(Agent))).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2223).
%;--
%; Getting out of bed causes a transition from Sleep1
%; to Sleep2:
% [agent,bed,time]
 
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2227).
% Terminates(RiseFrom(agent,bed),Sleep1(agent),time).
% From E: 
% 
% terminates_at(
%    riseFrom(Agent,Bed), 
%    sleep1(Agent), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2227).
terminates(riseFrom(Agent,Bed),sleep1(Agent)).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2229).
% [agent,bed,time]
 % Initiates(RiseFrom(agent,bed),Sleep2(agent),time).
% From E: 
% 
% initiates_at(
%    riseFrom(Agent,Bed), 
%    sleep2(Agent), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2229).
initiates(riseFrom(Agent,Bed),sleep2(Agent)).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2231).
% [agent,bed,time]
% Happens(RiseFrom(agent,bed),time) -> HoldsAt(Sleep1(agent),time).
% From E: 
% 
% '->'(
%    happens(
%       riseFrom(Agent,Bed), 
%       Time), 
%    holds(
%       sleep1(Agent), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2231).
if(not(sleep1(Agent)),not(riseFrom(Agent,Bed))).


%;--
%; Getting dressed causes a transition from Sleep2
%; to Sleep3, the normal state of awakeness:
% [agent,time]
 
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2238).
% Terminates(GetDressed(agent),Sleep2(agent),time).
% From E: 
% 
% terminates_at(
%    getDressed(Agent), 
%    sleep2(Agent), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2238).
terminates(getDressed(Agent),sleep2(Agent)).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2240).
% [agent,time]
 % Initiates(GetDressed(agent),Sleep3(agent),time).
% From E: 
% 
% initiates_at(
%    getDressed(Agent), 
%    sleep3(Agent), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2240).
initiates(getDressed(Agent),sleep3(Agent)).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2242).
% [agent,time]
 % Happens(GetDressed(agent),time) -> HoldsAt(Sleep2(agent),time).
% From E: 
% 
% '->'(
%    happens(
%       getDressed(Agent), 
%       Time), 
%    holds(
%       sleep2(Agent), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2242).
if(not(sleep2(Agent)),not(getDressed(Agent))).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2244).
%;--
%; Getting tired causes a transition from Sleep3
%; to Sleep4:
% [agent,time]
 
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2248).
% Terminates(GetTired(agent),Sleep3(agent),time).
% From E: 
% 
% terminates_at(
%    getTired(Agent), 
%    sleep3(Agent), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2248).
terminates(getTired(Agent),sleep3(Agent)).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2250).
% [agent,time]
 % Initiates(GetTired(agent),Sleep4(agent),time).
% From E: 
% 
% initiates_at(
%    getTired(Agent), 
%    sleep4(Agent), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2250).
initiates(getTired(Agent),sleep4(Agent)).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2252).
% [agent,time]
 % Happens(GetTired(agent),time) -> HoldsAt(Sleep3(agent),time).
% From E: 
% 
% '->'(
%    happens(
%       getTired(Agent), 
%       Time), 
%    holds(
%       sleep3(Agent), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2252).
if(not(sleep3(Agent)),not(getTired(Agent))).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2254).
%;--
%; Getting undressed causes a transition from Sleep4
%; to Sleep5:
% [agent,time]
 
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2258).
% Terminates(GetUndressed(agent),Sleep4(agent),time).
% From E: 
% 
% terminates_at(
%    getUndressed(Agent), 
%    sleep4(Agent), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2258).
terminates(getUndressed(Agent),sleep4(Agent)).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2260).
% [agent,time]
 % Initiates(GetUndressed(agent),Sleep5(agent),time).
% From E: 
% 
% initiates_at(
%    getUndressed(Agent), 
%    sleep5(Agent), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2260).
initiates(getUndressed(Agent),sleep5(Agent)).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2262).
% [agent,time]
 % Happens(GetUndressed(agent),time) -> HoldsAt(Sleep4(agent),time).
% From E: 
% 
% '->'(
%    happens(
%       getUndressed(Agent), 
%       Time), 
%    holds(
%       sleep4(Agent), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2262).
if(not(sleep4(Agent)),not(getUndressed(Agent))).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2264).
%;--
%; Lying on a bed causes a transition from Sleep5
%; to Sleep6:
% [agent,bed,time]
 
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2268).
% Terminates(LieOn(agent,bed),Sleep5(agent),time).
% From E: 
% 
% terminates_at(
%    lieOn(Agent,Bed), 
%    sleep5(Agent), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2268).
terminates(lieOn(Agent,Bed),sleep5(Agent)).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2270).
% [agent,bed,time]
 % Initiates(LieOn(agent,bed),Sleep6(agent),time).
% From E: 
% 
% initiates_at(
%    lieOn(Agent,Bed), 
%    sleep6(Agent), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2270).
initiates(lieOn(Agent,Bed),sleep6(Agent)).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2272).
% [agent,bed,time]
 % Happens(LieOn(agent,bed),time) -> HoldsAt(Sleep5(agent),time).
% From E: 
% 
% '->'(
%    happens(
%       lieOn(Agent,Bed), 
%       Time), 
%    holds(
%       sleep5(Agent), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2272).
if(not(sleep5(Agent)),not(lieOn(Agent,Bed))).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2274).
%;--
%; Falling asleep causes a transition from Sleep6
%; to Sleep0:
% [agent,time]
 
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2278).
% Terminates(FallAsleep(agent),Sleep6(agent),time).
% From E: 
% 
% terminates_at(
%    fallAsleep(Agent), 
%    sleep6(Agent), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2278).
terminates(fallAsleep(Agent),sleep6(Agent)).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2280).
% [agent,time]
 % Initiates(FallAsleep(agent),Sleep0(agent),time).
% From E: 
% 
% initiates_at(
%    fallAsleep(Agent), 
%    sleep0(Agent), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2280).
initiates(fallAsleep(Agent),sleep0(Agent)).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2282).
% [agent,time]
 % Happens(FallAsleep(agent),time) -> HoldsAt(Sleep6(agent),time).
% From E: 
% 
% '->'(
%    happens(
%       fallAsleep(Agent), 
%       Time), 
%    holds(
%       sleep6(Agent), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2282).
if(not(sleep6(Agent)),not(fallAsleep(Agent))).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2284).
%;--
%; agent acts on being in state Sleep5.

% fluent ActOnSleep5(agent)
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2286).
% From E: 
% 
% fluent(actOnSleep5(agent)).
mpred_prop(actOnSleep5(agent), fluent).
fluents([actOnSleep5/1]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2288).
% noninertial ActOnSleep5
% From E: 
% 
% ':-'(call_pel_directive(noninertial(actOnSleep5))).
:- call_pel_directive(noninertial(actOnSleep5)).
%; We reduce the number of models by asserting that
%; an agent only acts on being in state Sleep5 while in
%; that state:
% [agent,time]
% !HoldsAt(Sleep5(agent),time) ->
% !HoldsAt(ActOnSleep5(agent),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2293).
% From E: 
% 
% '->'(
%    holds(
%       not(sleep5(Agent)), 
%       Time), 
%    holds(
%       not(actOnSleep5(Agent)), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2293).
if(actOnSleep5(Agent),sleep5(Agent)).


%; Undressed is like IntentionToPlay
%; ActOnSleep5 is like ActOnIntentionToPlay
%; A trigger axiom states that if an agent is in state Sleep5,
%; the agent acts on this state, the agent is in a room, and
%; a bed is at the room, the agent lies on the bed:
% [agent,room,bed,time]
% HoldsAt(Sleep5(agent),time) &
% HoldsAt(ActOnSleep5(agent),time) &
% HoldsAt(At(agent,room),time) &
% HoldsAt(At(bed,room),time) ->
% Happens(LieOn(agent,bed),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2303).
% From E: 
% 
% '->'(
%    ','(
%       holds(
%          sleep5(Agent), 
%          Time), 
%       ','(
%          holds(
%             actOnSleep5(Agent), 
%             Time), 
%          ','(
%             holds(
%                at_loc(Agent,Room), 
%                Time), 
%             holds(
%                at_loc(Bed,Room), 
%                Time)))), 
%    happens(
%       lieOn(Agent,Bed), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2303).
 if(not(lieOn(Agent, Bed)),
       (not(sleep5(Agent));not(actOnSleep5(Agent));not(at_loc(Agent, Room));not(at_loc(Bed, Room)))).


%; A precondition axiom states that for
%; an agent to lie on a bed,
%; the agent must be in state Sleep5,
%; the agent must act on this state, and
%; there must be a room such that
%; the agent is in the room and the bed is in the room:
% [agent,bed,time]
% Happens(LieOn(agent,bed),time) ->
% HoldsAt(Sleep5(agent),time) &
% HoldsAt(ActOnSleep5(agent),time) &
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2316).
% {room}% 
%  HoldsAt(At(agent,room),time) &
%  HoldsAt(At(bed,room),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2320).
% From E: 
% 
% exists(Room, 
%    '->'(
%       happens(
%          lieOn(Agent,Bed), 
%          Time), 
%       ','(
%          holds(
%             sleep5(Agent), 
%             Time), 
%          ','(
%             holds(
%                actOnSleep5(Agent), 
%                Time), 
%             ','(
%                holds(
%                   at_loc(Agent,Room), 
%                   Time), 
%                holds(
%                   at_loc(Bed,Room), 
%                   Time)))))).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2320).
exists(Room,  (sleep5(Agent), actOnSleep5(Agent), at_loc(Agent, Room), at_loc(Bed, Room);not(lieOn(Agent, Bed)))).


%; (body) posture
%; agent lies on physobj.

% event LieOn(agent,physobj)
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2326).
% From E: 
% 
% event(lieOn(agent,physobj)).
events([lieOn/2]).
mpred_prop(lieOn(agent, physobj), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2326).
actions([lieOn/2]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2329).
%; agent sits on physobj.

% event SitOn(agent,physobj)
% From E: 
% 
% event(sitOn(agent,physobj)).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2329).
events([sitOn/2]).
mpred_prop(sitOn(agent, physobj), action).
actions([sitOn/2]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2332).
% [agent,physobj,time]
% Happens(SitOn(agent,physobj),time) ->
% {location}% 
%  HoldsAt(At(agent,location),time) &
%  HoldsAt(At(physobj,location),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2334).
% From E: 
% 
% exists(Location, 
%    '->'(
%       happens(
%          sitOn(Agent,Physobj), 
%          Time), 
%       ','(
%          holds(
%             at_loc(Agent,Location), 
%             Time), 
%          holds(
%             at_loc(Physobj,Location), 
%             Time)))).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2334).
exists(Location,  (at_loc(Agent, Location), at_loc(Physobj, Location);not(sitOn(Agent, Physobj)))).


%; agent rises from physobj.

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2339).
% event RiseFrom(agent,physobj)
% From E: 
% 
% event(riseFrom(agent,physobj)).
events([riseFrom/2]).
mpred_prop(riseFrom(agent, physobj), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2339).
actions([riseFrom/2]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2341).
%; agent is lying on physobj.

% fluent LyingOn(agent,physobj)
% From E: 
% 
% fluent(lyingOn(agent,physobj)).
mpred_prop(lyingOn(agent, physobj), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2341).
fluents([lyingOn/2]).


%; agent is sitting on physobj.

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2344).
% fluent SittingOn(agent,physobj)
% From E: 
% 
% fluent(sittingOn(agent,physobj)).
mpred_prop(sittingOn(agent, physobj), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2344).
fluents([sittingOn/2]).


%; agent is standing.

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2346).
% fluent Standing(agent)
% From E: 
% 
% fluent(standing(agent)).
mpred_prop(standing(agent), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2346).
fluents([standing/1]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2348).
%; agent is lying down.

% fluent Lying(agent)
% From E: 
% 
% fluent(lying(agent)).
mpred_prop(lying(agent), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2348).
fluents([lying/1]).


%; agent is sitting.

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2351).
% fluent Sitting(agent)
% From E: 
% 
% fluent(sitting(agent)).
mpred_prop(sitting(agent), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2351).
fluents([sitting/1]).

% noninertial Lying
% From E: 
% 
% ':-'(call_pel_directive(noninertial(lying))).
:- call_pel_directive(noninertial(lying)).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2353).
% noninertial Sitting
% From E: 
% 
% ':-'(call_pel_directive(noninertial(sitting))).
:- call_pel_directive(noninertial(sitting)).
%; At any time, an agent is either lying, sitting, or standing:

% xor Lying, Sitting, Standing
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2355).
% From E: 
% 
% xor([lying,sitting,standing]).
xor([lying,sitting,standing]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2358).
% [agent,physobj,time]
% HoldsAt(LyingOn(agent,physobj),time) ->
% HoldsAt(Lying(agent),time).
% From E: 
% 
% '->'(
%    holds(
%       lyingOn(Agent,Physobj), 
%       Time), 
%    holds(
%       lying(Agent), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2358).
if(not(lying(Agent)),not(lyingOn(Agent,Physobj))).


% [agent,physobj,time]
% HoldsAt(SittingOn(agent,physobj),time) ->
% HoldsAt(Sitting(agent),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2363).
% From E: 
% 
% '->'(
%    holds(
%       sittingOn(Agent,Physobj), 
%       Time), 
%    holds(
%       sitting(Agent), 
%       Time)).
 %   [Time].
if(not(sitting(Agent)),not(sittingOn(Agent,Physobj))).


%; State constraints represent that an agent can lie or sit
%; on at most one object at a time:
% [agent,physobj1,physobj2,time]
% HoldsAt(LyingOn(agent,physobj1),time) &
% HoldsAt(LyingOn(agent,physobj2),time) ->
% physobj1=physobj2.
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2368).
% From E: 
% 
% '->'(
%    ','(
%       holds(
%          lyingOn(Agent,Physobj1), 
%          Time), 
%       holds(
%          lyingOn(Agent,Physobj2), 
%          Time)), 
%    Physobj1=Physobj2).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2368).
 if(not(equals(Physobj1, Physobj2)),
       (not(lyingOn(Agent, Physobj1));not(lyingOn(Agent, Physobj2)))).


% [agent,physobj1,physobj2,time]
% HoldsAt(SittingOn(agent,physobj1),time) &
% HoldsAt(SittingOn(agent,physobj2),time) ->
% physobj1=physobj2.
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2374).
% From E: 
% 
% '->'(
%    ','(
%       holds(
%          sittingOn(Agent,Physobj1), 
%          Time), 
%       holds(
%          sittingOn(Agent,Physobj2), 
%          Time)), 
%    Physobj1=Physobj2).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2374).
 if(not(equals(Physobj1, Physobj2)),
       (not(sittingOn(Agent, Physobj1));not(sittingOn(Agent, Physobj2)))).


%; An effect axiom states that if an agent is standing and
%; lies on a physical object, the agent will be lying on
%; the physical object:
% [agent,physobj,time]
% HoldsAt(Standing(agent),time) ->
% Initiates(LieOn(agent,physobj),
%           LyingOn(agent,physobj),
%           time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2381).
% From E: 
% 
% '->'(
%    holds(
%       standing(Agent), 
%       Time), 
%    initiates_at(
%       lieOn(Agent,Physobj), 
%       lyingOn(Agent,Physobj), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2381).
if(not(initiates(lieOn(Agent,Physobj),
		 at(lyingOn(Agent,Physobj),Time))),
   not(holds(standing(Agent),Time))).


%; An effect axiom states that if an agent
%; lies on a physical object, the agent will no longer
%; be standing:
% [agent,physobj,time]
% Terminates(LieOn(agent,physobj),
%            Standing(agent),
%            time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2390).
% From E: 
% 
% terminates_at(
%    lieOn(Agent,Physobj), 
%    standing(Agent), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2390).
terminates(lieOn(Agent,Physobj),standing(Agent)).


%; An effect axiom states that if an agent is standing and
%; sits on a physical object, the agent will be sitting on
%; the physical object:
% [agent,physobj,time]
% HoldsAt(Standing(agent),time) ->
% Initiates(SitOn(agent,physobj),
%           SittingOn(agent,physobj),
%           time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2398).
% From E: 
% 
% '->'(
%    holds(
%       standing(Agent), 
%       Time), 
%    initiates_at(
%       sitOn(Agent,Physobj), 
%       sittingOn(Agent,Physobj), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2398).
if(not(initiates(sitOn(Agent,Physobj),
		 at(sittingOn(Agent,Physobj),Time))),
   not(holds(standing(Agent),Time))).


%; An effect axiom states that if an agent
%; sits on a physical object, the agent will no longer
%; be standing:
% [agent,physobj,time]
% Terminates(SitOn(agent,physobj),
%            Standing(agent),
%            time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2407).
% From E: 
% 
% terminates_at(
%    sitOn(Agent,Physobj), 
%    standing(Agent), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2407).
terminates(sitOn(Agent,Physobj),standing(Agent)).


%; An effect axiom states that if an agent
%; is sitting or lying on a physical object and
%; the agent rises from the physical object,
%; the agent will be standing:
% [agent,physobj,time]
% (HoldsAt(SittingOn(agent,physobj),time) |
%  HoldsAt(LyingOn(agent,physobj),time)) ->
% Initiates(RiseFrom(agent,physobj),
%           Standing(agent),
%           time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2416).
% From E: 
% 
% '->'(
%    ';'(
%       holds(
%          sittingOn(Agent,Physobj), 
%          Time), 
%       holds(
%          lyingOn(Agent,Physobj), 
%          Time)), 
%    initiates_at(
%       riseFrom(Agent,Physobj), 
%       standing(Agent), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2416).
if(not(initiates(riseFrom(Agent, Physobj), at(standing(Agent), Time))),  (not(holds(sittingOn(Agent, Physobj), Time)), not(holds(lyingOn(Agent, Physobj), Time)))).


%; An effect axiom states that if an agent is sitting on
%; a physical object and the agent rises from the physical
%; object, the agent will no longer be sitting on the
%; physical object:
% [agent,physobj,time]
% HoldsAt(SittingOn(agent,physobj),time) ->
% Terminates(RiseFrom(agent,physobj),
%            SittingOn(agent,physobj),
%            time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2427).
% From E: 
% 
% '->'(
%    holds(
%       sittingOn(Agent,Physobj), 
%       Time), 
%    terminates_at(
%       riseFrom(Agent,Physobj), 
%       sittingOn(Agent,Physobj), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2427).
if(not(terminates(riseFrom(Agent,Physobj),
		  at(sittingOn(Agent,Physobj),Time))),
   not(holds(sittingOn(Agent,Physobj),Time))).


%; An effect axiom states that if an agent is lying on
%; a physical object and the agent rises from the physical
%; object, the agent will no longer be lying on the
%; physical object:
% [agent,physobj,time]
% HoldsAt(LyingOn(agent,physobj),time) ->
% Terminates(RiseFrom(agent,physobj),
%            LyingOn(agent,physobj),
%            time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2437).
% From E: 
% 
% '->'(
%    holds(
%       lyingOn(Agent,Physobj), 
%       Time), 
%    terminates_at(
%       riseFrom(Agent,Physobj), 
%       lyingOn(Agent,Physobj), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2437).
if(not(terminates(riseFrom(Agent,Physobj),
		  at(lyingOn(Agent,Physobj),Time))),
   not(holds(lyingOn(Agent,Physobj),Time))).


%; dressing
%; agent gets undressed.

% event GetDressed(agent)
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2445).
% From E: 
% 
% event(getDressed(agent)).
events([getDressed/1]).
mpred_prop(getDressed(agent), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2445).
actions([getDressed/1]).


%; agent gets dressed.

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2448).
% event GetUndressed(agent)
% From E: 
% 
% event(getUndressed(agent)).
events([getUndressed/1]).
mpred_prop(getUndressed(agent), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2448).
actions([getUndressed/1]).


%; agent is dressed.

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2450).
% fluent Dressed(agent)
% From E: 
% 
% fluent(dressed(agent)).
mpred_prop(dressed(agent), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2450).
fluents([dressed/1]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2452).
%; Effect axioms deal with getting dressed and undressed:
% [agent,time]
 % Initiates(GetDressed(agent),Dressed(agent),time).
% From E: 
% 
% initiates_at(
%    getDressed(Agent), 
%    dressed(Agent), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2452).
initiates(getDressed(Agent),dressed(Agent)).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2454).
% [agent,time]
 % Terminates(GetUndressed(agent),Dressed(agent),time).
% From E: 
% 
% terminates_at(
%    getUndressed(Agent), 
%    dressed(Agent), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2454).
terminates(getUndressed(Agent),dressed(Agent)).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2456).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: ecnet/Sleeping.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Mueller:2004c,
%;   author = "Erik T. Mueller",
%;   year = "2004",
%;   title = "Understanding script-based stories using commonsense reasoning",
%;   journal = "Cognitive Systems Research",
%;   volume = "5",
%;   number = "4",
%;   pages = "307--340",
%; }
%;

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2485).
% option modeldiff on
% From E: 
% 
% ':-'(call_pel_directive(option(modeldiff,on))).
:- call_pel_directive(option(modeldiff, on)).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2487).
% ignore Love, ThreatenedBy
% From E: 
% 
% ':-'(call_pel_directive(ignore(love))).
:- call_pel_directive(ignore(love)).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2487).
% From E: 
% 
% ':-'(call_pel_directive(ignore(threatenedBy))).
:- call_pel_directive(ignore(threatenedBy)).

% ignore LookOutOnto, Floor, BuildingOf, SkyOf, GroundOf
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2487).
% From E: 
% 
% ':-'(call_pel_directive(ignore(lookOutOnto))).
:- call_pel_directive(ignore(lookOutOnto)).
% From E: 
% 
% ':-'(call_pel_directive(ignore(floor))).
:- call_pel_directive(ignore(floor)).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2487).
% From E: 
% 
% ':-'(call_pel_directive(ignore(buildingOf))).
:- call_pel_directive(ignore(buildingOf)).
% From E: 
% 
% ':-'(call_pel_directive(ignore(skyOf))).
:- call_pel_directive(ignore(skyOf)).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2487).
% From E: 
% 
% ':-'(call_pel_directive(ignore(groundOf))).
:- call_pel_directive(ignore(groundOf)).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2489).
% ignore Inside, Near
% From E: 
% 
% ':-'(call_pel_directive(ignore(inside))).
:- call_pel_directive(ignore(inside)).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2489).
% From E: 
% 
% ':-'(call_pel_directive(ignore(near))).
:- call_pel_directive(ignore(near)).

% ignore See
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2489).
% From E: 
% 
% ':-'(call_pel_directive(ignore(see))).
:- call_pel_directive(ignore(see)).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2492).
% ignore ActOnSleep5
% From E: 
% 
% ':-'(call_pel_directive(ignore(actOnSleep5))).
:- call_pel_directive(ignore(actOnSleep5)).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2494).
% option renaming off
% From E: 
% 
% ':-'(call_pel_directive(option(renaming,off))).
:- call_pel_directive(option(renaming, off)).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2496).
% load foundations/Root.e
% From E: 
% 
% ':-'(call_pel_directive(load('foundations/Root.e'))).
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2496).
% From E: 
% 
% ':-'(call_pel_directive(load('foundations/EC.e'))).
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2498).
% load answers/Mueller2003/Ontology.e
% From E: 
% 
% ':-'(call_pel_directive(load('answers/Mueller2003/Ontology.e'))).
:- call_pel_directive(load('answers/Mueller2003/Ontology.e')).

% load answers/Mueller2004c/RTSpaceM.e
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2498).
% From E: 
% 
% ':-'(call_pel_directive(load('answers/Mueller2004c/RTSpaceM.e'))).
:- call_pel_directive(load('answers/Mueller2004c/RTSpaceM.e')).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2500).
% load answers/Mueller2004c/OTSpaceM.e
% From E: 
% 
% ':-'(call_pel_directive(load('answers/Mueller2004c/OTSpaceM.e'))).
:- call_pel_directive(load('answers/Mueller2004c/OTSpaceM.e')).

% load answers/Mueller2004c/Cognition.e
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2500).
% From E: 
% 
% ':-'(call_pel_directive(load('answers/Mueller2004c/Cognition.e'))).
:- call_pel_directive(load('answers/Mueller2004c/Cognition.e')).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2502).
% load answers/Mueller2003/Sleep.e
% From E: 
% 
% ':-'(call_pel_directive(load('answers/Mueller2003/Sleep.e'))).
:- call_pel_directive(load('answers/Mueller2003/Sleep.e')).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2504).
% door Door1
% From E: 
% 
% t(door,door1).
door(door1).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2506).
% room Room0
% From E: 
% 
% t(room,room0).
room(room0).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2508).
% room Room1
% From E: 
% 
% t(room,room1).
room(room1).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2510).
% Side1(Door1)=Room0.
% From E: 
% 
% '='(
%    side1(door1), 
%    room0).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2510).
side1(door1,room0).


% Side2(Door1)=Room1.
% From E: 
% 
% '='(
%    side2(door1), 
%    room1).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2510).
side2(door1,room1).

% agent Sleeper1
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2512).
% From E: 
% 
% t(agent,sleeper1).
agent(sleeper1).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2515).
% bed Bed1
% From E: 
% 
% t(bed,bed1).
bed(bed1).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2517).
% outside Outside1
% From E: 
% 
% t(outside,outside1).
outside(outside1).
%; initial state
% [agent,object]
 % !HoldsAt(Holding(agent,object),0).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2519).
% From E: 
% 
% holds(
%    not(holding(Agent,Object)), 0).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2519).
initially(not(holding(Agent,Object))).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2521).
% [agent,physobj]
 % !HoldsAt(SittingOn(agent,physobj),0).
% From E: 
% 
% holds(
%    not(sittingOn(Agent,Physobj)), 0).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2521).
initially(not(sittingOn(Agent,Physobj))).


% [agent,physobj]
 % !HoldsAt(LyingOn(agent,physobj),0).
% From E: 
% 
% holds(
%    not(lyingOn(Agent,Physobj)), 0).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2521).
initially(not(lyingOn(Agent,Physobj))).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2523).
% HoldsAt(Dressed(Sleeper1),0).
% From E: 
% 
% holds(
%    dressed(sleeper1), 0).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2523).
initially(dressed(sleeper1)).


% HoldsAt(Awake(Sleeper1),0).
% From E: 
% 
% holds(
%    awake(sleeper1), 0).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2523).
initially(awake(sleeper1)).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2525).
% HoldsAt(Sleep3(Sleeper1),0).
% From E: 
% 
% holds(
%    sleep3(sleeper1), 0).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2525).
initially(sleep3(sleeper1)).


% HoldsAt(Standing(Sleeper1),0).
% From E: 
% 
% holds(
%    standing(sleeper1), 0).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2525).
initially(standing(sleeper1)).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2527).
% HoldsAt(DoorUnlocked(Door1),0).
% From E: 
% 
% holds(
%    doorUnlocked(door1), 0).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2527).
initially(doorUnlocked(door1)).


% HoldsAt(DoorIsOpen(Door1),0).
% From E: 
% 
% holds(
%    doorIsOpen(door1), 0).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2527).
initially(doorIsOpen(door1)).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2529).
% HoldsAt(At(Sleeper1,Room0),0).
% From E: 
% 
% holds(
%    at_loc(sleeper1,room0), 0).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2529).
initially(at_loc(sleeper1,room0)).


% HoldsAt(At(Bed1,Room1),0).
% From E: 
% 
% holds(
%    at_loc(bed1,room1), 0).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2529).
initially(at_loc(bed1,room1)).


%; narrative


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2533).
% Happens(GetTired(Sleeper1),0).
% From E: 
% 
% happens(
%    getTired(sleeper1), 0).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2533).
observe(at(getTired(sleeper1),0)).


% Happens(WalkThroughDoor12(Sleeper1,Door1),1).
% From E: 
% 
% happens(
%    walkThroughDoor12(sleeper1,door1), 1).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2533).
observe(at(walkThroughDoor12(sleeper1,door1),1)).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2535).
% Happens(GetUndressed(Sleeper1),2).
% From E: 
% 
% happens(
%    getUndressed(sleeper1), 2).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2535).
observe(at(getUndressed(sleeper1),2)).


% Happens(LieOn(Sleeper1,Bed1),3).
% From E: 
% 
% happens(
%    lieOn(sleeper1,bed1), 3).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2535).
observe(at(lieOn(sleeper1,bed1),3)).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2537).
% Happens(FallAsleep(Sleeper1),4).
% From E: 
% 
% happens(
%    fallAsleep(sleeper1), 4).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2537).
observe(at(fallAsleep(sleeper1),4)).


% Happens(Dream(Sleeper1),5).
% From E: 
% 
% happens(
%    dream(sleeper1), 5).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2537).
observe(at(dream(sleeper1),5)).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2539).
% Happens(WakeUp(Sleeper1),6).
% From E: 
% 
% happens(
%    wakeUp(sleeper1), 6).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2539).
observe(at(wakeUp(sleeper1),6)).


% Happens(RiseFrom(Sleeper1,Bed1),7).
% From E: 
% 
% happens(
%    riseFrom(sleeper1,bed1), 7).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2539).
observe(at(riseFrom(sleeper1,bed1),7)).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2541).
% Happens(GetDressed(Sleeper1),8).
% From E: 
% 
% happens(
%    getDressed(sleeper1), 8).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2541).
observe(at(getDressed(sleeper1),8)).


% Happens(WalkThroughDoor21(Sleeper1,Door1),9).
% From E: 
% 
% happens(
%    walkThroughDoor21(sleeper1,door1), 9).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2541).
observe(at(walkThroughDoor21(sleeper1,door1),9)).

% range time 0 10
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2543).
% From E: 
% 
% ':-'(call_pel_directive(range(time,0,10))).
:- call_pel_directive(range(time, 0, 10)).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2545).
% range offset 0 0
% From E: 
% 
% ':-'(call_pel_directive(range(offset,0,0))).
:- call_pel_directive(range(offset, 0, 0)).

% range diameter 0 0
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2545).
% From E: 
% 
% ':-'(call_pel_directive(range(diameter,0,0))).
:- call_pel_directive(range(diameter, 0, 0)).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2548).
% completion Happens
% From E: 
% 
% ':-'(call_pel_directive(completion(happens))).
:- call_pel_directive(completion(happens)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: ecnet/Rest.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Mueller:InPress,
%;   author = "Erik T. Mueller",
%;   year = "in press",
%;   title = "Modelling space and time in narratives about restaurants",
%;   journal = "Literary and Linguistic Computing",
%; }
%;

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2576).
% option renaming off
% From E: 
% 
% ':-'(call_pel_directive(option(renaming,off))).
:- call_pel_directive(option(renaming, off)).

% option encoding 3
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2576).
% From E: 
% 
% ':-'(call_pel_directive(option(encoding,3))).
:- call_pel_directive(option(encoding, 3)).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2579).
% load foundations/Root.e
% From E: 
% 
% ':-'(call_pel_directive(load('foundations/Root.e'))).
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2579).
% From E: 
% 
% ':-'(call_pel_directive(load('foundations/EC.e'))).
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2581).
% load answers/Mueller2003/Ontology.e
% From E: 
% 
% ':-'(call_pel_directive(load('answers/Mueller2003/Ontology.e'))).
:- call_pel_directive(load('answers/Mueller2003/Ontology.e')).

% load answers/MuellerInPress/RepRest.e
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2581).
% From E: 
% 
% ':-'(call_pel_directive(load('answers/MuellerInPress/RepRest.e'))).
:- call_pel_directive(load('answers/MuellerInPress/RepRest.e')).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2584).
% door MainEntrance1
% From E: 
% 
% t(door,mainEntrance1).
door(mainEntrance1).
%; room-scale topological space

% outside Street1
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2586).
% From E: 
% 
% t(outside,street1).
outside(street1).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2588).
% room DiningRoom1
% From E: 
% 
% t(room,diningRoom1).
room(diningRoom1).

% door KitchenDoor1
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2588).
% From E: 
% 
% t(door,kitchenDoor1).
door(kitchenDoor1).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2590).
% room Kitchen1
% From E: 
% 
% t(room,kitchen1).
room(kitchen1).


% Side1(MainEntrance1)=Street1.
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2590).
% From E: 
% 
% '='(
%    side1(mainEntrance1), 
%    street1).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2590).
side1(mainEntrance1,street1).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2592).
% Side2(MainEntrance1)=DiningRoom1.
% From E: 
% 
% '='(
%    side2(mainEntrance1), 
%    diningRoom1).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2592).
side2(mainEntrance1,diningRoom1).


% Side1(KitchenDoor1)=DiningRoom1.
% From E: 
% 
% '='(
%    side1(kitchenDoor1), 
%    diningRoom1).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2592).
side1(kitchenDoor1,diningRoom1).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2594).
% Side2(KitchenDoor1)=Kitchen1.
% From E: 
% 
% '='(
%    side2(kitchenDoor1), 
%    kitchen1).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2594).
side2(kitchenDoor1,kitchen1).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2596).
% agent Customer1
% From E: 
% 
% t(agent,customer1).
agent(customer1).

% menu Menu1
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2596).
% From E: 
% 
% t(menu,menu1).
menu(menu1).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2598).
% chair Chair1
% From E: 
% 
% t(chair,chair1).
chair(chair1).

% food Food1
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2598).
% From E: 
% 
% t(food,food1).
food(food1).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2600).
% HoldsAt(At(Customer1,Street1),0).
% From E: 
% 
% holds(
%    at_loc(customer1,street1), 0).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2600).
initially(at_loc(customer1,street1)).


% HoldsAt(Hungry(Customer1),0).
% From E: 
% 
% holds(
%    hungry(customer1), 0).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2600).
initially(hungry(customer1)).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2602).
% HoldsAt(At(Chair1,DiningRoom1),0).
% From E: 
% 
% holds(
%    at_loc(chair1,diningRoom1), 0).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2602).
initially(at_loc(chair1,diningRoom1)).


% HoldsAt(At(Menu1,DiningRoom1),0).
% From E: 
% 
% holds(
%    at_loc(menu1,diningRoom1), 0).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2602).
initially(at_loc(menu1,diningRoom1)).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2604).
% HoldsAt(On(Menu1,Table1),0).
% From E: 
% 
% holds(
%    on(menu1,table1), 0).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2604).
initially(on(menu1,table1)).


% HoldsAt(At(Food1,Kitchen1),0).
% From E: 
% 
% holds(
%    at_loc(food1,kitchen1), 0).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2604).
initially(at_loc(food1,kitchen1)).

% waiter Waiter1
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2606).
% From E: 
% 
% t(waiter,waiter1).
waiter(waiter1).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2608).
% cook Cook1
% From E: 
% 
% t(cook,cook1).
cook(cook1).
%; props

% table Table1
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2610).
% From E: 
% 
% t(table,table1).
table table1.

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2612).
% bill Bill1
% From E: 
% 
% t(bill,bill1).
bill(bill1).
%; restaurant

% restaurant Restaurant1
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2614).
% From E: 
% 
% t(restaurant,restaurant1).
restaurant(restaurant1).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2616).
% CookOf(Restaurant1)=Cook1.
% From E: 
% 
% '='(
%    cookOf(restaurant1), 
%    cook1).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2616).
cookOf(restaurant1,cook1).


% TableOf(Restaurant1)=Table1.
% From E: 
% 
% '='(
%    tableOf(restaurant1), 
%    table1).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2616).
tableOf(restaurant1,table1).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2618).
% WaiterOf(Restaurant1)=Waiter1.
% From E: 
% 
% '='(
%    waiterOf(restaurant1), 
%    waiter1).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2618).
waiterOf(restaurant1,waiter1).


% KitchenDoorOf(Restaurant1)=KitchenDoor1.
% From E: 
% 
% '='(
%    kitchenDoorOf(restaurant1), 
%    kitchenDoor1).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2618).
kitchenDoorOf(restaurant1,kitchenDoor1).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2620).
% BillOf(Restaurant1)=Bill1.
% From E: 
% 
% '='(
%    billOf(restaurant1), 
%    bill1).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2620).
billOf(restaurant1,bill1).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2622).
%; prune

% sort ona, onb
% From E: 
% 
% sort(ona).
sort(ona).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2622).
% From E: 
% 
% sort(onb).
sort(onb).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2624).
% fluent! On(ona,onb)
% From E: 
% 
% fluent(on(ona,onb)).
mpred_prop(on(ona, onb), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2624).
fluents([on/2]).

% event! PlaceOn(agent,ona,onb)
% From E: 
% 
% event(placeOn(agent,ona,onb)).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2624).
events([placeOn/3]).
mpred_prop(placeOn(agent, ona, onb), action).
actions([placeOn/3]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2626).
% event! TakeOffOf(agent,ona,onb)
% From E: 
% 
% event(takeOffOf(agent,ona,onb)).
events([takeOffOf/3]).
mpred_prop(takeOffOf(agent, ona, onb), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2626).
actions([takeOffOf/3]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2628).
% sort ordera, orderb, orderc
% From E: 
% 
% sort(ordera).
sort(ordera).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2628).
% From E: 
% 
% sort(orderb).
sort(orderb).
% From E: 
% 
% sort(orderc).
sort(orderc).

% event! Order(ordera,orderb,orderc)
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2628).
% From E: 
% 
% event(order(ordera,orderb,orderc)).
mpred_prop(order(ordera, orderb, orderc), event).
events([order/3]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2630).
% fluent! KnowOrder(orderb,ordera,orderc)
% From E: 
% 
% fluent(knowOrder(orderb,ordera,orderc)).
mpred_prop(knowOrder(orderb, ordera, orderc), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2630).
fluents([knowOrder/3]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2632).
% sort requesta, requestb, requestc
% From E: 
% 
% sort(requesta).
sort(requesta).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2632).
% From E: 
% 
% sort(requestb).
sort(requestb).
% From E: 
% 
% sort(requestc).
sort(requestc).

% event! Request(requesta,requestb,requestc)
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2632).
% From E: 
% 
% event(request(requesta,requestb,requestc)).
mpred_prop(request(requesta, requestb, requestc), event).
events([request/3]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2634).
% fluent! KnowRequest(requestb,requesta,requestc)
% From E: 
% 
% fluent(knowRequest(requestb,requesta,requestc)).
mpred_prop(knowRequest(requestb, requesta, requestc), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2634).
fluents([knowRequest/3]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2636).
% sort holda, holdb, holdc
% From E: 
% 
% sort(holda).
sort(holda).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2636).
% From E: 
% 
% sort(holdb).
sort(holdb).
% From E: 
% 
% sort(holdc).
sort(holdc).

% event! TakeOffOf(holda,holdb,holdc)
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2636).
% From E: 
% 
% event(takeOffOf(holda,holdb,holdc)).
mpred_prop(takeOffOf(holda, holdb, holdc), event).
events([takeOffOf/3]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2638).
% event! PickUp(holda,holdb)
% From E: 
% 
% event(pickUp(holda,holdb)).
mpred_prop(pickUp(holda, holdb), event).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2638).
events([pickUp/2]).

% event! LetGoOf(holda,holdb)
% From E: 
% 
% event(letGoOf(holda,holdb)).
mpred_prop(letGoOf(holda, holdb), event).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2638).
events([letGoOf/2]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2640).
% event! Hold(holda,holdb)
% From E: 
% 
% event(hold(holda,holdb)).
mpred_prop(hold(holda, holdb), event).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2640).
events([hold/2]).

% fluent! Holding(holda,holdb)
% From E: 
% 
% fluent(holding(holda,holdb)).
mpred_prop(holding(holda, holdb), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2640).
fluents([holding/2]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2643).
% sort sita, sitb
% From E: 
% 
% sort(sita).
sort(sita).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2643).
% From E: 
% 
% sort(sitb).
sort(sitb).

% event! LieOn(sita,sitb)
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2643).
% From E: 
% 
% event(lieOn(sita,sitb)).
mpred_prop(lieOn(sita, sitb), event).
events([lieOn/2]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2645).
% event! SitOn(sita,sitb)
% From E: 
% 
% event(sitOn(sita,sitb)).
mpred_prop(sitOn(sita, sitb), event).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2645).
events([sitOn/2]).

% event! RiseFrom(sita,sitb)
% From E: 
% 
% event(riseFrom(sita,sitb)).
mpred_prop(riseFrom(sita, sitb), event).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2645).
events([riseFrom/2]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2647).
% fluent! LyingOn(sita,sitb)
% From E: 
% 
% fluent(lyingOn(sita,sitb)).
mpred_prop(lyingOn(sita, sitb), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2647).
fluents([lyingOn/2]).

% fluent! SittingOn(sita,sitb)
% From E: 
% 
% fluent(sittingOn(sita,sitb)).
mpred_prop(sittingOn(sita, sitb), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2647).
fluents([sittingOn/2]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2650).
% sort greeta, greetb
% From E: 
% 
% sort(greeta).
sort(greeta).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2650).
% From E: 
% 
% sort(greetb).
sort(greetb).

% event! Greet(greeta,greetb)
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2650).
% From E: 
% 
% event(greet(greeta,greetb)).
mpred_prop(greet(greeta, greetb), event).
events([greet/2]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2653).
% ona! Menu1, Food1, Bill1
% From E: 
% 
% t(ona,menu1).
ona(menu1).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2653).
% From E: 
% 
% t(ona,food1).
ona(food1).
% From E: 
% 
% t(ona,bill1).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2653).
ona(bill1).

% onb! Table1
% From E: 
% 
% t(onb,table1).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2653).
onb(table1).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2655).
% ordera! Customer1, Waiter1
% From E: 
% 
% t(ordera,customer1).
ordera(customer1).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2655).
% From E: 
% 
% t(ordera,waiter1).
ordera(waiter1).

% orderb! Waiter1, Cook1
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2655).
% From E: 
% 
% t(orderb,waiter1).
orderb(waiter1).
% From E: 
% 
% t(orderb,cook1).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2655).
orderb(cook1).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2657).
% orderc! Food1
% From E: 
% 
% t(orderc,food1).
orderc(food1).

% requesta! Customer1
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2657).
% From E: 
% 
% t(requesta,customer1).
requesta(customer1).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2659).
% requestb! Waiter1
% From E: 
% 
% t(requestb,waiter1).
requestb(waiter1).

% requestc! Bill1
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2659).
% From E: 
% 
% t(requestc,bill1).
requestc(bill1).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2661).
% holda! Customer1, Waiter1
% From E: 
% 
% t(holda,customer1).
holda(customer1).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2661).
% From E: 
% 
% t(holda,waiter1).
holda(waiter1).

% holdb! Menu1, Food1, Bill1
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2661).
% From E: 
% 
% t(holdb,menu1).
holdb(menu1).
% From E: 
% 
% t(holdb,food1).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2661).
holdb(food1).
% From E: 
% 
% t(holdb,bill1).
holdb(bill1).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2663).
% holdc! Table1
% From E: 
% 
% t(holdc,table1).
holdc(table1).

% sita! Customer1
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2663).
% From E: 
% 
% t(sita,customer1).
sita(customer1).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2665).
% sitb! Chair1
% From E: 
% 
% t(sitb,chair1).
sitb(chair1).

% greeta! Customer1, Waiter1
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2665).
% From E: 
% 
% t(greeta,customer1).
greeta(customer1).
% From E: 
% 
% t(greeta,waiter1).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2665).
greeta(waiter1).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2667).
% greetb! Customer1, Waiter1
% From E: 
% 
% t(greetb,customer1).
greetb(customer1).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2667).
% From E: 
% 
% t(greetb,waiter1).
greetb(waiter1).
%; initial situation


% HoldsAt(At(Waiter1,DiningRoom1),0).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2669).
% From E: 
% 
% holds(
%    at_loc(waiter1,diningRoom1), 0).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2669).
initially(at_loc(waiter1,diningRoom1)).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2671).
% HoldsAt(At(Cook1,Kitchen1),0).
% From E: 
% 
% holds(
%    at_loc(cook1,kitchen1), 0).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2671).
initially(at_loc(cook1,kitchen1)).


% HoldsAt(At(Table1,DiningRoom1),0).
% From E: 
% 
% holds(
%    at_loc(table1,diningRoom1), 0).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2671).
initially(at_loc(table1,diningRoom1)).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2673).
% !HoldsAt(On(Bill1,Table1),0).
% From E: 
% 
% holds(
%    not(on(bill1,table1)), 0).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2673).
initially(not(on(bill1,table1))).


% HoldsAt(At(Bill1,DiningRoom1),0).
% From E: 
% 
% holds(
%    at_loc(bill1,diningRoom1), 0).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2673).
initially(at_loc(bill1,diningRoom1)).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2675).
% [agent]
 % HoldsAt(Standing(agent),0).
% From E: 
% 
% holds(
%    standing(Agent), 0).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2675).
initially(standing(Agent)).


% [agent,object]
 % !HoldsAt(Holding(agent,object),0).
% From E: 
% 
% holds(
%    not(holding(Agent,Object)), 0).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2675).
initially(not(holding(Agent,Object))).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2677).
% [agent1,agent2,physobj]
 % !HoldsAt(KnowOrder(agent1,agent2,physobj),0).
% From E: 
% 
% holds(
%    not(knowOrder(Agent1,Agent2,Physobj)), 0).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2677).
initially(not(knowOrder(Agent1,Agent2,Physobj))).


% [agent1,agent2,physobj]
 % !HoldsAt(KnowRequest(agent1,agent2,physobj),0).
% From E: 
% 
% holds(
%    not(knowRequest(Agent1,Agent2,Physobj)), 0).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2677).
initially(not(knowRequest(Agent1,Agent2,Physobj))).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2679).
% HoldsAt(BeWaiter0(Waiter1),0).
% From E: 
% 
% holds(
%    beWaiter0(waiter1), 0).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2679).
initially(beWaiter0(waiter1)).


% HoldsAt(BeCook0(Cook1),0).
% From E: 
% 
% holds(
%    beCook0(cook1), 0).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2679).
initially(beCook0(cook1)).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2681).
% [food]
 % !HoldsAt(FoodPrepared(food),0).
% From E: 
% 
% holds(
%    not(foodPrepared(Food)), 0).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2681).
initially(not(foodPrepared(Food))).


% !HoldsAt(Hungry(Cook1),0).
% From E: 
% 
% holds(
%    not(hungry(cook1)), 0).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2681).
initially(not(hungry(cook1))).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2683).
% !HoldsAt(Hungry(Waiter1),0).
% From E: 
% 
% holds(
%    not(hungry(waiter1)), 0).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2683).
initially(not(hungry(waiter1))).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2685).
% Happens(WalkThroughDoor12(Customer1,MainEntrance1),0).
% From E: 
% 
% happens(
%    walkThroughDoor12(customer1,mainEntrance1), 0).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2685).
observe(at(walkThroughDoor12(customer1,mainEntrance1),0)).


% Happens(Greet(Waiter1,Customer1),1).
% From E: 
% 
% happens(
%    greet(waiter1,customer1), 1).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2685).
observe(at(greet(waiter1,customer1),1)).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2687).
% Happens(SitOn(Customer1,Chair1),2).
% From E: 
% 
% happens(
%    sitOn(customer1,chair1), 2).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2687).
observe(at(sitOn(customer1,chair1),2)).


% Happens(TakeOffOf(Customer1,Menu1,Table1),3).
% From E: 
% 
% happens(
%    takeOffOf(customer1,menu1,table1), 3).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2687).
observe(at(takeOffOf(customer1,menu1,table1),3)).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2689).
% Happens(Order(Customer1,Waiter1,Food1),4).
% From E: 
% 
% happens(
%    order(customer1,waiter1,food1), 4).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2689).
observe(at(order(customer1,waiter1,food1),4)).


% Happens(PlaceOn(Customer1,Menu1,Table1),5).
% From E: 
% 
% happens(
%    placeOn(customer1,menu1,table1), 5).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2689).
observe(at(placeOn(customer1,menu1,table1),5)).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2691).
% Happens(Eat(Customer1,Food1),11).
% From E: 
% 
% happens(
%    eat(customer1,food1), 11).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2691).
observe(at(eat(customer1,food1),11)).


% Happens(Request(Customer1,Waiter1,Bill1),12).
% From E: 
% 
% happens(
%    request(customer1,waiter1,bill1), 12).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2691).
observe(at(request(customer1,waiter1,bill1),12)).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2693).
% Happens(Pay(Customer1,Waiter1),15).
% From E: 
% 
% happens(
%    pay(customer1,waiter1), 15).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2693).
observe(at(pay(customer1,waiter1),15)).


% Happens(Tip(Customer1,Waiter1),15).
% From E: 
% 
% happens(
%    tip(customer1,waiter1), 15).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2693).
observe(at(tip(customer1,waiter1),15)).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2695).
% Happens(RiseFrom(Customer1,Chair1),16).
% From E: 
% 
% happens(
%    riseFrom(customer1,chair1), 16).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2695).
observe(at(riseFrom(customer1,chair1),16)).


% Happens(SayGoodbye(Customer1,Waiter1),17).
% From E: 
% 
% happens(
%    sayGoodbye(customer1,waiter1), 17).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2695).
observe(at(sayGoodbye(customer1,waiter1),17)).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2697).
% Happens(WalkThroughDoor21(Customer1,MainEntrance1),18).
% From E: 
% 
% happens(
%    walkThroughDoor21(customer1,mainEntrance1), 18).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2697).
observe(at(walkThroughDoor21(customer1,mainEntrance1),18)).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2699).
% range time 0 19
% From E: 
% 
% ':-'(call_pel_directive(range(time,0,19))).
:- call_pel_directive(range(time, 0, 19)).

% range offset 0 0
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2699).
% From E: 
% 
% ':-'(call_pel_directive(range(offset,0,0))).
:- call_pel_directive(range(offset, 0, 0)).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2701).
% range diameter 0 0
% From E: 
% 
% ':-'(call_pel_directive(range(diameter,0,0))).
:- call_pel_directive(range(diameter, 0, 0)).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2703).
% completion Happens
% From E: 
% 
% ':-'(call_pel_directive(completion(happens))).
:- call_pel_directive(completion(happens)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: ecnet/RepRest.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Mueller:InPress,
%;   author = "Erik T. Mueller",
%;   year = "in press",
%;   title = "Modelling space and time in narratives about restaurants",
%;   journal = "Literary and Linguistic Computing",
%; }
%;
%;sort boolean
%;sort integer
%;reified sort predicate
%;reified sort function
%;
%;sort time: integer
%;sort offset: integer
%;
%;reified sort fluent
%;reified sort event
%;
%;predicate Happens(event,time)
%;predicate HoldsAt(fluent,time)
%;predicate ReleasedAt(fluent,time)
%;predicate Initiates(event,fluent,time)
%;predicate Terminates(event,fluent,time)
%;predicate Releases(event,fluent,time)
%;
%;sort diameter: integer
%;
%;sort object
%;
%;sort agent: object
%;
%;sort physobj: object
%;sort bed: physobj
%;sort snowflake: physobj
%;sort sky: physobj
%;
%;sort stuff: physobj
%;
%;sort surface: physobj
%;sort ground: surface
%;
%;sort snow: stuff
%;sort ball
%;
%;sort food: physobj
%;sort fruit: food
%;sort orange: fruit
%;sort salad: food
%;
%;sort clothing: physobj
%;sort scarf: clothing
%;sort hat: clothing
%;
%;sort vegetablematter: physobj
%;sort coal: vegetablematter
%;
%;sort bodypart: physobj
%;sort hand: bodypart
%;
%;sort papertowels: physobj
%;sort device: physobj
%;sort electronicdevice: device
%;sort lamp: electronicdevice
%;
%;sort cat: physobj
%;
%;sort weapon: physobj
%;sort gun: weapon
%;sort bomb: weapon
%;sort bullet: weapon
%;
%;sort location
%;sort room: location, outside: location
%;
%;sort portal
%;sort door: portal, staircase: portal
%;sort street: portal
%;
%;sort building
%;
%;sort fire: object
%;
%;sort furniture: physobj
%;sort chair: furniture
%;sort table: furniture
%;
%;sort menu: physobj
%;sort bill: physobj
%;
%;sort script
%;

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2815).
% fluent Holding(agent,physobj)
% From E: 
% 
% fluent(holding(agent,physobj)).
mpred_prop(holding(agent, physobj), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2815).
fluents([holding/2]).

% event PickUp(agent,physobj)
% From E: 
% 
% event(pickUp(agent,physobj)).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2815).
events([pickUp/2]).
mpred_prop(pickUp(agent, physobj), action).
actions([pickUp/2]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2817).
% event LetGoOf(agent,physobj)
% From E: 
% 
% event(letGoOf(agent,physobj)).
events([letGoOf/2]).
mpred_prop(letGoOf(agent, physobj), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2817).
actions([letGoOf/2]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2819).
% [agent,physobj,time]
% Initiates(PickUp(agent,physobj),Holding(agent,physobj),time).
% From E: 
% 
% initiates_at(
%    pickUp(Agent,Physobj), 
%    holding(Agent,Physobj), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2819).
initiates(pickUp(Agent,Physobj),
	  holding(Agent,Physobj)).


% [agent,physobj,time]
% Happens(PickUp(agent,physobj),time) ->
% {location}% 
%   HoldsAt(At(agent,location),time) &
%   HoldsAt(At(physobj,location),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2823).
% From E: 
% 
% exists(Location, 
%    '->'(
%       happens(
%          pickUp(Agent,Physobj), 
%          Time), 
%       ','(
%          holds(
%             at_loc(Agent,Location), 
%             Time), 
%          holds(
%             at_loc(Physobj,Location), 
%             Time)))).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2823).
exists(Location,  (at_loc(Agent, Location), at_loc(Physobj, Location);not(pickUp(Agent, Physobj)))).


% [agent,physobj,time]
% Terminates(LetGoOf(agent,physobj),Holding(agent,physobj),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2829).
% From E: 
% 
% terminates_at(
%    letGoOf(Agent,Physobj), 
%    holding(Agent,Physobj), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2829).
terminates(letGoOf(Agent,Physobj),
	   holding(Agent,Physobj)).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2831).
% [agent,physobj,time]
% Happens(LetGoOf(agent,physobj),time) ->
% HoldsAt(Holding(agent,physobj),time).
% From E: 
% 
% '->'(
%    happens(
%       letGoOf(Agent,Physobj), 
%       Time), 
%    holds(
%       holding(Agent,Physobj), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2831).
if(not(holding(Agent,Physobj)),
   not(letGoOf(Agent,Physobj))).


% [agent,physobj,location,time]
% Releases(PickUp(agent,physobj),At(physobj,location),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2836).
% From E: 
% 
% releases_at(
%    pickUp(Agent,Physobj), 
%    at_loc(Physobj,Location), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2836).
releases(pickUp(Agent,Physobj),
	 at_loc(Physobj,Location)).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2838).
% [agent,physobj,location,time]
% HoldsAt(Holding(agent,physobj),time) &
% HoldsAt(At(agent,location),time) ->
% HoldsAt(At(physobj,location),time).
% From E: 
% 
% '->'(
%    ','(
%       holds(
%          holding(Agent,Physobj), 
%          Time), 
%       holds(
%          at_loc(Agent,Location), 
%          Time)), 
%    holds(
%       at_loc(Physobj,Location), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2838).
 if(not(at_loc(Physobj, Location)),
       (not(holding(Agent, Physobj));not(at_loc(Agent, Location)))).


%;[agent,physobj,location1,location2,time]
%;HoldsAt(At(agent,location1),time) &
%;location1!=location2 ->
%;Terminates(LetGoOf(agent,physobj),At(physobj,location2),time).
% [agent,physobj,location,time]
% HoldsAt(At(agent,location),time) ->
% Initiates(LetGoOf(agent,physobj),At(physobj,location),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2848).
% From E: 
% 
% '->'(
%    holds(
%       at_loc(Agent,Location), 
%       Time), 
%    initiates_at(
%       letGoOf(Agent,Physobj), 
%       at_loc(Physobj,Location), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2848).
if(not(initiates(letGoOf(Agent,Physobj),
		 at(at_loc(Physobj,Location),Time))),
   not(holds(at_loc(Agent,Location),Time))).

% fluent On(physobj,physobj)
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2851).
% From E: 
% 
% fluent(on(physobj,physobj)).
mpred_prop(on(physobj, physobj), fluent).
fluents([on/2]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2854).
% event PlaceOn(agent,physobj,physobj)
% From E: 
% 
% event(placeOn(agent,physobj,physobj)).
events([placeOn/3]).
mpred_prop(placeOn(agent, physobj, physobj), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2854).
actions([placeOn/3]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2856).
% event TakeOffOf(agent,physobj,physobj)
% From E: 
% 
% event(takeOffOf(agent,physobj,physobj)).
events([takeOffOf/3]).
mpred_prop(takeOffOf(agent, physobj, physobj), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2856).
actions([takeOffOf/3]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2858).
% [physobj1,physobj2,time]
% HoldsAt(On(physobj1,physobj2),time) ->
% physobj1!=physobj2.
% From E: 
% 
% '->'(
%    holds(
%       on(Physobj1,Physobj2), 
%       Time), 
%    Physobj1\=Physobj2).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2858).
if(not({dif(Physobj1,Physobj2)}),
   not(on(Physobj1,Physobj2))).


% [physobj1,physobj2,time]
% HoldsAt(On(physobj1,physobj2),time) ->
% !HoldsAt(On(physobj2,physobj1),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2863).
% From E: 
% 
% '->'(
%    holds(
%       on(Physobj1,Physobj2), 
%       Time), 
%    holds(
%       not(on(Physobj2,Physobj1)), 
%       Time)).
 %   [Time].
if(on(Physobj2,Physobj1),
   not(on(Physobj1,Physobj2))).


% [agent,physobj1,physobj2,time]
% Initiates(PlaceOn(agent,physobj1,physobj2),
%           On(physobj1,physobj2),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2867).
% From E: 
% 
% initiates_at(
%    placeOn(Agent,Physobj1,Physobj2), 
%    on(Physobj1,Physobj2), 
%    Time).
 %   [Time].
initiates(placeOn(Agent,Physobj1,Physobj2),
	  on(Physobj1,Physobj2)).


% [agent,physobj1,physobj2,time]
% Terminates(PlaceOn(agent,physobj1,physobj2),
%            Holding(agent,physobj1),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2871).
% From E: 
% 
% terminates_at(
%    placeOn(Agent,Physobj1,Physobj2), 
%    holding(Agent,Physobj1), 
%    Time).
 %   [Time].
terminates(placeOn(Agent,Physobj1,Physobj2),
	   holding(Agent,Physobj1)).


% [agent,physobj1,physobj2,time]
% Happens(PlaceOn(agent,physobj1,physobj2),time) ->
% HoldsAt(Holding(agent,physobj1),time) &
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2875).
% {location}% 
%  HoldsAt(At(agent,location),time) &
%  HoldsAt(At(physobj2,location),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2877).
% From E: 
% 
% exists(Location, 
%    '->'(
%       happens(
%          placeOn(Agent,Physobj1,Physobj2), 
%          Time), 
%       ','(
%          holds(
%             holding(Agent,Physobj1), 
%             Time), 
%          ','(
%             holds(
%                at_loc(Agent,Location), 
%                Time), 
%             holds(
%                at_loc(Physobj2,Location), 
%                Time))))).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2877).
exists(Location,  (holding(Agent, Physobj1), at_loc(Agent, Location), at_loc(Physobj2, Location);not(placeOn(Agent, Physobj1, Physobj2)))).


% [agent,physobj1,physobj2,time]
% Terminates(TakeOffOf(agent,physobj1,physobj2),
%            On(physobj1,physobj2),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2882).
% From E: 
% 
% terminates_at(
%    takeOffOf(Agent,Physobj1,Physobj2), 
%    on(Physobj1,Physobj2), 
%    Time).
 %   [Time].
terminates(takeOffOf(Agent,Physobj1,Physobj2),
	   on(Physobj1,Physobj2)).


% [agent,physobj1,physobj2,time]
% Initiates(TakeOffOf(agent,physobj1,physobj2),
%           Holding(agent,physobj1),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2886).
% From E: 
% 
% initiates_at(
%    takeOffOf(Agent,Physobj1,Physobj2), 
%    holding(Agent,Physobj1), 
%    Time).
 %   [Time].
initiates(takeOffOf(Agent,Physobj1,Physobj2),
	  holding(Agent,Physobj1)).


% [agent,physobj1,physobj2,location,time]
% Releases(TakeOffOf(agent,physobj1,physobj2),
%          At(physobj1,location),
%          time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2890).
% From E: 
% 
% releases_at(
%    takeOffOf(Agent,Physobj1,Physobj2), 
%    at_loc(Physobj1,Location), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2890).
releases(takeOffOf(Agent,Physobj1,Physobj2),
	 at_loc(Physobj1,Location)).


% [agent,physobj1,physobj2,time]
% Happens(TakeOffOf(agent,physobj1,physobj2),time) ->
% HoldsAt(On(physobj1,physobj2),time) &
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2895).
% {location}% 
%  HoldsAt(At(agent,location),time) &
%  HoldsAt(At(physobj1,location),time) &
%  HoldsAt(At(physobj2,location),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2897).
% From E: 
% 
% exists(Location, 
%    '->'(
%       happens(
%          takeOffOf(Agent,Physobj1,Physobj2), 
%          Time), 
%       ','(
%          holds(
%             on(Physobj1,Physobj2), 
%             Time), 
%          ','(
%             holds(
%                at_loc(Agent,Location), 
%                Time), 
%             ','(
%                holds(
%                   at_loc(Physobj1,Location), 
%                   Time), 
%                holds(
%                   at_loc(Physobj2,Location), 
%                   Time)))))).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2897).
exists(Location,  (on(Physobj1, Physobj2), at_loc(Agent, Location), at_loc(Physobj1, Location), at_loc(Physobj2, Location);not(takeOffOf(Agent, Physobj1, Physobj2)))).


% [agent,physobj1,physobj2,location,time]
% Releases(PlaceOn(agent,physobj1,physobj2),
%          At(physobj1,location),
%          time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2903).
% From E: 
% 
% releases_at(
%    placeOn(Agent,Physobj1,Physobj2), 
%    at_loc(Physobj1,Location), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2903).
releases(placeOn(Agent,Physobj1,Physobj2),
	 at_loc(Physobj1,Location)).


% [physobj1,physobj2,location,time]
% HoldsAt(On(physobj1,physobj2),time) &
% HoldsAt(At(physobj2,location),time) ->
% HoldsAt(At(physobj1,location),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2908).
% From E: 
% 
% '->'(
%    ','(
%       holds(
%          on(Physobj1,Physobj2), 
%          Time), 
%       holds(
%          at_loc(Physobj2,Location), 
%          Time)), 
%    holds(
%       at_loc(Physobj1,Location), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2908).
 if(not(at_loc(Physobj1, Location)),
       (not(on(Physobj1, Physobj2));not(at_loc(Physobj2, Location)))).

% fluent At(object,location)
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2911).
% From E: 
% 
% fluent(at_loc(object,location)).
mpred_prop(at_loc(object, location), fluent).
fluents([at_loc/2]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2914).
% [object,time]
% {location} % HoldsAt(At(object,location),time).
% From E: 
% 
% exists(Location, 
%    holds(
%       at_loc(Object,Location), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2914).
exists(Location,
 at_loc(Object,Location)).


% [object,location1,location2,time]
% HoldsAt(At(object,location1),time) &
% HoldsAt(At(object,location2),time) ->
% location1=location2.
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2918).
% From E: 
% 
% '->'(
%    ','(
%       holds(
%          at_loc(Object,Location1), 
%          Time), 
%       holds(
%          at_loc(Object,Location2), 
%          Time)), 
%    Location1=Location2).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2918).
 if(not(equals(Location1, Location2)),
       (not(at_loc(Object, Location1));not(at_loc(Object, Location2)))).

% function Side1(portal): location
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2921).
% From E: 
% 
% function(
%    side1(portal), 
%    location).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2921).
function(side1(portal),location).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2923).
% function Side2(portal): location
% From E: 
% 
% function(
%    side2(portal), 
%    location).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2923).
function(side2(portal),location).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2925).
% fluent NearPortal(object,portal)
% From E: 
% 
% fluent(nearPortal(object,portal)).
mpred_prop(nearPortal(object, portal), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2925).
fluents([nearPortal/2]).

% noninertial NearPortal
% From E: 
% 
% ':-'(call_pel_directive(noninertial(nearPortal))).
:- call_pel_directive(noninertial(nearPortal)).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2928).
% [object,portal,time]
% HoldsAt(NearPortal(object,portal),time) <->
% {location}% 
%  (Side1(portal)=location|
%   Side2(portal)=location) &
%  HoldsAt(At(object,location),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2930).
% From E: 
% 
% exists(Location, 
%    <->(
%       holds(
%          nearPortal(Object,Portal), 
%          Time), 
%       ','(
%          ';'(
%             '='(
%                side1(Portal), 
%                Location), 
%             '='(
%                side2(Portal), 
%                Location)), 
%          holds(
%             at_loc(Object,Location), 
%             Time)))).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2930).
exists(Location,  (((side1(Portal, Location);side2(Portal, Location)), at_loc(Object, Location);not(nearPortal(Object, Portal))), (nearPortal(Object, Portal);not(side1(Portal, Location)), not(side2(Portal, Location));not(at_loc(Object, Location))))).

% event WalkThroughDoor12(agent,door)
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2934).
% From E: 
% 
% event(walkThroughDoor12(agent,door)).
events([walkThroughDoor12/2]).
mpred_prop(walkThroughDoor12(agent, door), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2934).
actions([walkThroughDoor12/2]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2936).
% event WalkThroughDoor21(agent,door)
% From E: 
% 
% event(walkThroughDoor21(agent,door)).
events([walkThroughDoor21/2]).
mpred_prop(walkThroughDoor21(agent, door), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2936).
actions([walkThroughDoor21/2]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2938).
% [agent,door,time]
% Happens(WalkThroughDoor12(agent,door),time) ->
% HoldsAt(Standing(agent),time) &
% HoldsAt(At(agent,Side1(door)),time).
% From E: 
% 
% '->'(
%    happens(
%       walkThroughDoor12(Agent,Door), 
%       Time), 
%    ','(
%       holds(
%          standing(Agent), 
%          Time), 
%       holds(
%          at_loc(Agent, 
%             side1(Door)), 
%          Time))).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2938).
 if((not(standing(Agent));not(at_loc(Agent, side1(Door)))),
      not(walkThroughDoor12(Agent, Door))).


% [agent,door,time]
% Happens(WalkThroughDoor21(agent,door),time) ->
% HoldsAt(Standing(agent),time) &
% HoldsAt(At(agent,Side2(door)),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2944).
% From E: 
% 
% '->'(
%    happens(
%       walkThroughDoor21(Agent,Door), 
%       Time), 
%    ','(
%       holds(
%          standing(Agent), 
%          Time), 
%       holds(
%          at_loc(Agent, 
%             side2(Door)), 
%          Time))).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2944).
 if((not(standing(Agent));not(at_loc(Agent, side2(Door)))),
      not(walkThroughDoor21(Agent, Door))).


% [agent,door,location,time]
% Side2(door)=location ->
% Initiates(WalkThroughDoor12(agent,door),At(agent,location),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2949).
% From E: 
% 
% '->'(
%    '='(
%       side2(Door), 
%       Location), 
%    initiates_at(
%       walkThroughDoor12(Agent,Door), 
%       at_loc(Agent,Location), 
%       Time)).
 %   [Time].
if(not(initiates(walkThroughDoor12(Agent,Door),
		 at(at_loc(Agent,Location),Time))),
   not(side2(Door,Location))).


% [agent,door,location,time]
% Side1(door)=location ->
% Initiates(WalkThroughDoor21(agent,door),At(agent,location),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2953).
% From E: 
% 
% '->'(
%    '='(
%       side1(Door), 
%       Location), 
%    initiates_at(
%       walkThroughDoor21(Agent,Door), 
%       at_loc(Agent,Location), 
%       Time)).
 %   [Time].
if(not(initiates(walkThroughDoor21(Agent,Door),
		 at(at_loc(Agent,Location),Time))),
   not(side1(Door,Location))).


% [agent,door,location,time]
% Side1(door)=location ->
% Terminates(WalkThroughDoor12(agent,door),At(agent,location),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2957).
% From E: 
% 
% '->'(
%    '='(
%       side1(Door), 
%       Location), 
%    terminates_at(
%       walkThroughDoor12(Agent,Door), 
%       at_loc(Agent,Location), 
%       Time)).
 %   [Time].
if(not(terminates(walkThroughDoor12(Agent,Door),
		  at(at_loc(Agent,Location),Time))),
   not(side1(Door,Location))).


% [agent,door,location,time]
% Side2(door)=location ->
% Terminates(WalkThroughDoor21(agent,door),At(agent,location),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2961).
% From E: 
% 
% '->'(
%    '='(
%       side2(Door), 
%       Location), 
%    terminates_at(
%       walkThroughDoor21(Agent,Door), 
%       at_loc(Agent,Location), 
%       Time)).
 %   [Time].
if(not(terminates(walkThroughDoor21(Agent,Door),
		  at(at_loc(Agent,Location),Time))),
   not(side2(Door,Location))).

% fluent Hungry(agent)
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2963).
% From E: 
% 
% fluent(hungry(agent)).
mpred_prop(hungry(agent), fluent).
fluents([hungry/1]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2966).
% fluent Satiated(agent)
% From E: 
% 
% fluent(satiated(agent)).
mpred_prop(satiated(agent), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2966).
fluents([satiated/1]).

% noninertial Satiated
% From E: 
% 
% ':-'(call_pel_directive(noninertial(satiated))).
:- call_pel_directive(noninertial(satiated)).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2969).
% [agent,time]
 % HoldsAt(Hungry(agent),time) <-> !HoldsAt(Satiated(agent),time).
% From E: 
% 
% <->(
%    holds(
%       hungry(Agent), 
%       Time), 
%    holds(
%       not(satiated(Agent)), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2969).
if(satiated(Agent), not(hungry(Agent))),
if(not(hungry(Agent)), satiated(Agent)).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2971).
% event Eat(agent,food)
% From E: 
% 
% event(eat(agent,food)).
events([eat/2]).
mpred_prop(eat(agent, food), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2971).
actions([eat/2]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2973).
% [agent,food,time]
% Happens(Eat(agent,food),time) ->
% {location}% 
% HoldsAt(At(agent,location),time) &
% HoldsAt(At(food,location),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2975).
% From E: 
% 
% exists(Location, 
%    '->'(
%       happens(
%          eat(Agent,Food), 
%          Time), 
%       ','(
%          holds(
%             at_loc(Agent,Location), 
%             Time), 
%          holds(
%             at_loc(Food,Location), 
%             Time)))).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2975).
exists(Location,  (at_loc(Agent, Location), at_loc(Food, Location);not(eat(Agent, Food)))).


% [agent,food,time]
% Terminates(Eat(agent,food),Hungry(agent),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2980).
% From E: 
% 
% terminates_at(
%    eat(Agent,Food), 
%    hungry(Agent), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2980).
terminates(eat(Agent,Food),hungry(Agent)).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2982).
% sort restaurant: script
% From E: 
% 
% subsort(restaurant,script).
subsort(restaurant, script).

% sort waiter: agent
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2982).
% From E: 
% 
% subsort(waiter,agent).
subsort(waiter, agent).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2984).
% sort cook: agent
% From E: 
% 
% subsort(cook,agent).
subsort(cook, agent).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2986).
% function BillOf(restaurant): bill
% From E: 
% 
% function(
%    billOf(restaurant), 
%    bill).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2986).
function(billOf(restaurant),bill).

% function CookOf(restaurant): cook
% From E: 
% 
% function(
%    cookOf(restaurant), 
%    cook).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2986).
function(cookOf(restaurant),cook).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2988).
% function TableOf(restaurant): table
% From E: 
% 
% function(
%    tableOf(restaurant), 
%    table).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2988).
function(tableOf(restaurant),table).

% function WaiterOf(restaurant): waiter
% From E: 
% 
% function(
%    waiterOf(restaurant), 
%    waiter).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2988).
function(waiterOf(restaurant),waiter).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2990).
% function KitchenDoorOf(restaurant): door
% From E: 
% 
% function(
%    kitchenDoorOf(restaurant), 
%    door).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2990).
function(kitchenDoorOf(restaurant),door).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2992).
% fluent BeWaiter0(waiter)
% From E: 
% 
% fluent(beWaiter0(waiter)).
mpred_prop(beWaiter0(waiter), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2992).
fluents([beWaiter0/1]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2994).
% fluent BeWaiter1(waiter)
% From E: 
% 
% fluent(beWaiter1(waiter)).
mpred_prop(beWaiter1(waiter), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2994).
fluents([beWaiter1/1]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2996).
% fluent BeWaiter2(waiter)
% From E: 
% 
% fluent(beWaiter2(waiter)).
mpred_prop(beWaiter2(waiter), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2996).
fluents([beWaiter2/1]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2998).
% fluent BeWaiter3(waiter)
% From E: 
% 
% fluent(beWaiter3(waiter)).
mpred_prop(beWaiter3(waiter), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',2998).
fluents([beWaiter3/1]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3000).
% fluent BeWaiter4(waiter)
% From E: 
% 
% fluent(beWaiter4(waiter)).
mpred_prop(beWaiter4(waiter), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3000).
fluents([beWaiter4/1]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3002).
% fluent BeWaiter5(waiter)
% From E: 
% 
% fluent(beWaiter5(waiter)).
mpred_prop(beWaiter5(waiter), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3002).
fluents([beWaiter5/1]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3004).
% fluent BeWaiter6(waiter)
% From E: 
% 
% fluent(beWaiter6(waiter)).
mpred_prop(beWaiter6(waiter), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3004).
fluents([beWaiter6/1]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3006).
% fluent BeWaiter7(waiter)
% From E: 
% 
% fluent(beWaiter7(waiter)).
mpred_prop(beWaiter7(waiter), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3006).
fluents([beWaiter7/1]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3008).
% fluent BeWaiter8(waiter)
% From E: 
% 
% fluent(beWaiter8(waiter)).
mpred_prop(beWaiter8(waiter), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3008).
fluents([beWaiter8/1]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3010).
% fluent BeWaiter9(waiter)
% From E: 
% 
% fluent(beWaiter9(waiter)).
mpred_prop(beWaiter9(waiter), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3010).
fluents([beWaiter9/1]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3012).
% xor BeWaiter0, BeWaiter1, BeWaiter2, BeWaiter3, BeWaiter4, BeWaiter5, BeWaiter6, BeWaiter7, BeWaiter8, BeWaiter9
% From E: 
% 
% xor([beWaiter0,beWaiter1,beWaiter2,beWaiter3,beWaiter4,beWaiter5,beWaiter6,beWaiter7,beWaiter8,beWaiter9]).
xor([ beWaiter0,
      beWaiter1,
      beWaiter2,
      beWaiter3,
      beWaiter4,
      beWaiter5,
      beWaiter6,
      beWaiter7,
      beWaiter8,
      beWaiter9
    ]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3014).
% [waiter,agent,time]
% HoldsAt(BeWaiter0(waiter),time) ->
% Terminates(Greet(waiter,agent),
%            BeWaiter0(waiter),
%            time).
% From E: 
% 
% '->'(
%    holds(
%       beWaiter0(Waiter), 
%       Time), 
%    terminates_at(
%       greet(Waiter,Agent), 
%       beWaiter0(Waiter), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3014).
if(not(terminates(greet(Waiter,Agent),
		  at(beWaiter0(Waiter),Time))),
   not(holds(beWaiter0(Waiter),Time))).


% [waiter,agent,time]
% HoldsAt(BeWaiter0(waiter),time) ->
% Initiates(Greet(waiter,agent),
%           BeWaiter1(waiter),
%           time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3021).
% From E: 
% 
% '->'(
%    holds(
%       beWaiter0(Waiter), 
%       Time), 
%    initiates_at(
%       greet(Waiter,Agent), 
%       beWaiter1(Waiter), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3021).
if(not(initiates(greet(Waiter,Agent),
		 at(beWaiter1(Waiter),Time))),
   not(holds(beWaiter0(Waiter),Time))).


% [waiter,agent,food,time]
% HoldsAt(BeWaiter1(waiter),time) ->
% Terminates(Order(agent,waiter,food),
%            BeWaiter1(waiter),
%            time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3027).
% From E: 
% 
% '->'(
%    holds(
%       beWaiter1(Waiter), 
%       Time), 
%    terminates_at(
%       order(Agent,Waiter,Food), 
%       beWaiter1(Waiter), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3027).
if(not(terminates(order(Agent,Waiter,Food),
		  at(beWaiter1(Waiter),Time))),
   not(holds(beWaiter1(Waiter),Time))).


% [waiter,agent,food,time]
% HoldsAt(BeWaiter1(waiter),time) ->
% Initiates(Order(agent,waiter,food),
%           BeWaiter2(waiter),
%           time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3033).
% From E: 
% 
% '->'(
%    holds(
%       beWaiter1(Waiter), 
%       Time), 
%    initiates_at(
%       order(Agent,Waiter,Food), 
%       beWaiter2(Waiter), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3033).
if(not(initiates(order(Agent,Waiter,Food),
		 at(beWaiter2(Waiter),Time))),
   not(holds(beWaiter1(Waiter),Time))).


% [restaurant,waiter,time]
% WaiterOf(restaurant)=waiter &
% HoldsAt(BeWaiter2(waiter),time) ->
% Happens(WalkThroughDoor12(waiter,KitchenDoorOf(restaurant)),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3039).
% From E: 
% 
% '->'(
%    ','(
%       '='(
%          waiterOf(Restaurant), 
%          Waiter), 
%       holds(
%          beWaiter2(Waiter), 
%          Time)), 
%    happens(
%       walkThroughDoor12(Waiter, 
%          kitchenDoorOf(Restaurant)), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3039).
 if(not(walkThroughDoor12(Waiter, kitchenDoorOf(Restaurant))),
       (not(waiterOf(Restaurant, Waiter));not(beWaiter2(Waiter)))).


% [restaurant,waiter,door,time]
% HoldsAt(BeWaiter2(waiter),time) &
% WaiterOf(restaurant)=waiter &
% KitchenDoorOf(restaurant)=door ->
% Terminates(WalkThroughDoor12(waiter,door),
%            BeWaiter2(waiter),
%            time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3044).
% From E: 
% 
% '->'(
%    ','(
%       holds(
%          beWaiter2(Waiter), 
%          Time), 
%       ','(
%          '='(
%             waiterOf(Restaurant), 
%             Waiter), 
%          '='(
%             kitchenDoorOf(Restaurant), 
%             Door))), 
%    terminates_at(
%       walkThroughDoor12(Waiter,Door), 
%       beWaiter2(Waiter), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3044).
 if(not(terminates(walkThroughDoor12(Waiter, Door),
                     at(beWaiter2(Waiter), Time))),
       (not(holds(beWaiter2(Waiter), Time));not(waiterOf(Restaurant, Waiter));not(kitchenDoorOf(Restaurant, Door)))).


% [restaurant,waiter,door,time]
% HoldsAt(BeWaiter2(waiter),time) &
% WaiterOf(restaurant)=waiter &
% KitchenDoorOf(restaurant)=door ->
% Initiates(WalkThroughDoor12(waiter,door),
%           BeWaiter3(waiter),
%           time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3052).
% From E: 
% 
% '->'(
%    ','(
%       holds(
%          beWaiter2(Waiter), 
%          Time), 
%       ','(
%          '='(
%             waiterOf(Restaurant), 
%             Waiter), 
%          '='(
%             kitchenDoorOf(Restaurant), 
%             Door))), 
%    initiates_at(
%       walkThroughDoor12(Waiter,Door), 
%       beWaiter3(Waiter), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3052).
 if(not(initiates(walkThroughDoor12(Waiter, Door),
                    at(beWaiter3(Waiter), Time))),
       (not(holds(beWaiter2(Waiter), Time));not(waiterOf(Restaurant, Waiter));not(kitchenDoorOf(Restaurant, Door)))).


% [restaurant,food,time]
% HoldsAt(BeWaiter3(WaiterOf(restaurant)),time) &
% ({agent} HoldsAt(KnowOrder(WaiterOf(restaurant),agent,food),time)) ->
% Happens(Order(WaiterOf(restaurant),CookOf(restaurant),food),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3060).
% From E: 
% 
% '->'(
%    ','(
%       holds(
%          beWaiter3(waiterOf(Restaurant)), 
%          Time), 
%       thereExists(Agent, 
%          holds(
%             knowOrder(
%                waiterOf(Restaurant), 
%                Agent, 
%                Food), 
%             Time))), 
%    happens(
%       order(
%          waiterOf(Restaurant), 
%          cookOf(Restaurant), 
%          Food), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3060).
 if(not(order(waiterOf(Restaurant),
                cookOf(Restaurant),
                Food)),
       (not(beWaiter3(waiterOf(Restaurant)));not(thereExists(Agent, knowOrder(waiterOf(Restaurant), Agent, Food))))).


% [restaurant,waiter,cook,food,time]
% WaiterOf(restaurant)=waiter &
% CookOf(restaurant)=cook &
% HoldsAt(BeWaiter3(waiter),time) ->
% Terminates(Order(waiter,cook,food),
%            BeWaiter3(waiter),
%            time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3065).
% From E: 
% 
% '->'(
%    ','(
%       '='(
%          waiterOf(Restaurant), 
%          Waiter), 
%       ','(
%          '='(
%             cookOf(Restaurant), 
%             Cook), 
%          holds(
%             beWaiter3(Waiter), 
%             Time))), 
%    terminates_at(
%       order(Waiter,Cook,Food), 
%       beWaiter3(Waiter), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3065).
 if(not(terminates(order(Waiter, Cook, Food),
                     at(beWaiter3(Waiter), Time))),
       (not(waiterOf(Restaurant, Waiter));not(cookOf(Restaurant, Cook));not(holds(beWaiter3(Waiter), Time)))).


% [restaurant,waiter,cook,food,time]
% WaiterOf(restaurant)=waiter &
% CookOf(restaurant)=cook &
% HoldsAt(BeWaiter3(waiter),time) ->
% Initiates(Order(waiter,cook,food),
%           BeWaiter4(waiter),
%           time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3073).
% From E: 
% 
% '->'(
%    ','(
%       '='(
%          waiterOf(Restaurant), 
%          Waiter), 
%       ','(
%          '='(
%             cookOf(Restaurant), 
%             Cook), 
%          holds(
%             beWaiter3(Waiter), 
%             Time))), 
%    initiates_at(
%       order(Waiter,Cook,Food), 
%       beWaiter4(Waiter), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3073).
 if(not(initiates(order(Waiter, Cook, Food),
                    at(beWaiter4(Waiter), Time))),
       (not(waiterOf(Restaurant, Waiter));not(cookOf(Restaurant, Cook));not(holds(beWaiter3(Waiter), Time)))).


% [waiter,food,time]
% HoldsAt(BeWaiter4(waiter),time) &
% ({agent} HoldsAt(KnowOrder(waiter,agent,food),time)) &
% HoldsAt(FoodPrepared(food),time) ->
% Happens(PickUp(waiter,food),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3081).
% From E: 
% 
% '->'(
%    ','(
%       holds(
%          beWaiter4(Waiter), 
%          Time), 
%       ','(
%          thereExists(Agent, 
%             holds(
%                knowOrder(Waiter,Agent,Food), 
%                Time)), 
%          holds(
%             foodPrepared(Food), 
%             Time))), 
%    happens(
%       pickUp(Waiter,Food), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3081).
 if(not(pickUp(Waiter, Food)),
       (not(beWaiter4(Waiter));not(thereExists(Agent, knowOrder(Waiter, Agent, Food)));not(foodPrepared(Food)))).


% [waiter,food,time]
% HoldsAt(BeWaiter4(waiter),time) &
% ({agent} HoldsAt(KnowOrder(waiter,agent,food),time)) ->
% Terminates(PickUp(waiter,food),
%            BeWaiter4(waiter),
%            time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3087).
% From E: 
% 
% '->'(
%    ','(
%       holds(
%          beWaiter4(Waiter), 
%          Time), 
%       thereExists(Agent, 
%          holds(
%             knowOrder(Waiter,Agent,Food), 
%             Time))), 
%    terminates_at(
%       pickUp(Waiter,Food), 
%       beWaiter4(Waiter), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3087).
 if(not(terminates(pickUp(Waiter, Food),
                     at(beWaiter4(Waiter), Time))),
       (not(holds(beWaiter4(Waiter), Time));not(thereExists(Agent, holds(knowOrder(Waiter, Agent, Food), Time))))).


% [waiter,food,time]
% HoldsAt(BeWaiter4(waiter),time) &
% ({agent} HoldsAt(KnowOrder(waiter,agent,food),time)) ->
% Initiates(PickUp(waiter,food),
%           BeWaiter5(waiter),
%           time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3094).
% From E: 
% 
% '->'(
%    ','(
%       holds(
%          beWaiter4(Waiter), 
%          Time), 
%       thereExists(Agent, 
%          holds(
%             knowOrder(Waiter,Agent,Food), 
%             Time))), 
%    initiates_at(
%       pickUp(Waiter,Food), 
%       beWaiter5(Waiter), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3094).
 if(not(initiates(pickUp(Waiter, Food),
                    at(beWaiter5(Waiter), Time))),
       (not(holds(beWaiter4(Waiter), Time));not(thereExists(Agent, holds(knowOrder(Waiter, Agent, Food), Time))))).


% [restaurant,waiter,time]
% WaiterOf(restaurant)=waiter &
% HoldsAt(BeWaiter5(waiter),time) ->
% Happens(WalkThroughDoor21(waiter,KitchenDoorOf(restaurant)),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3101).
% From E: 
% 
% '->'(
%    ','(
%       '='(
%          waiterOf(Restaurant), 
%          Waiter), 
%       holds(
%          beWaiter5(Waiter), 
%          Time)), 
%    happens(
%       walkThroughDoor21(Waiter, 
%          kitchenDoorOf(Restaurant)), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3101).
 if(not(walkThroughDoor21(Waiter, kitchenDoorOf(Restaurant))),
       (not(waiterOf(Restaurant, Waiter));not(beWaiter5(Waiter)))).


% [restaurant,waiter,door,time]
% HoldsAt(BeWaiter5(waiter),time) &
% WaiterOf(restaurant)=waiter &
% KitchenDoorOf(restaurant)=door ->
% Terminates(WalkThroughDoor21(waiter,door),
%            BeWaiter5(waiter),
%            time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3106).
% From E: 
% 
% '->'(
%    ','(
%       holds(
%          beWaiter5(Waiter), 
%          Time), 
%       ','(
%          '='(
%             waiterOf(Restaurant), 
%             Waiter), 
%          '='(
%             kitchenDoorOf(Restaurant), 
%             Door))), 
%    terminates_at(
%       walkThroughDoor21(Waiter,Door), 
%       beWaiter5(Waiter), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3106).
 if(not(terminates(walkThroughDoor21(Waiter, Door),
                     at(beWaiter5(Waiter), Time))),
       (not(holds(beWaiter5(Waiter), Time));not(waiterOf(Restaurant, Waiter));not(kitchenDoorOf(Restaurant, Door)))).


% [restaurant,waiter,door,time]
% HoldsAt(BeWaiter5(waiter),time) &
% WaiterOf(restaurant)=waiter &
% KitchenDoorOf(restaurant)=door ->
% Initiates(WalkThroughDoor21(waiter,door),
%           BeWaiter6(waiter),
%           time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3114).
% From E: 
% 
% '->'(
%    ','(
%       holds(
%          beWaiter5(Waiter), 
%          Time), 
%       ','(
%          '='(
%             waiterOf(Restaurant), 
%             Waiter), 
%          '='(
%             kitchenDoorOf(Restaurant), 
%             Door))), 
%    initiates_at(
%       walkThroughDoor21(Waiter,Door), 
%       beWaiter6(Waiter), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3114).
 if(not(initiates(walkThroughDoor21(Waiter, Door),
                    at(beWaiter6(Waiter), Time))),
       (not(holds(beWaiter5(Waiter), Time));not(waiterOf(Restaurant, Waiter));not(kitchenDoorOf(Restaurant, Door)))).


% [restaurant,waiter,table,food,time]
% WaiterOf(restaurant)=waiter &
% TableOf(restaurant)=table &
% HoldsAt(BeWaiter6(waiter),time) &
% HoldsAt(Holding(waiter,food),time) ->
% Happens(PlaceOn(waiter,food,table),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3122).
% From E: 
% 
% '->'(
%    ','(
%       '='(
%          waiterOf(Restaurant), 
%          Waiter), 
%       ','(
%          '='(
%             tableOf(Restaurant), 
%             Table), 
%          ','(
%             holds(
%                beWaiter6(Waiter), 
%                Time), 
%             holds(
%                holding(Waiter,Food), 
%                Time)))), 
%    happens(
%       placeOn(Waiter,Food,Table), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3122).
 if(not(placeOn(Waiter, Food, Table)),
       (not(waiterOf(Restaurant, Waiter));not(tableOf(Restaurant, Table));not(beWaiter6(Waiter));not(holding(Waiter, Food)))).


% [waiter,food,table,time]
% HoldsAt(BeWaiter6(waiter),time) ->
% Terminates(PlaceOn(waiter,food,table),
%            BeWaiter6(waiter),
%            time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3129).
% From E: 
% 
% '->'(
%    holds(
%       beWaiter6(Waiter), 
%       Time), 
%    terminates_at(
%       placeOn(Waiter,Food,Table), 
%       beWaiter6(Waiter), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3129).
if(not(terminates(placeOn(Waiter,Food,Table),
		  at(beWaiter6(Waiter),Time))),
   not(holds(beWaiter6(Waiter),Time))).


% [waiter,food,table,time]
% HoldsAt(BeWaiter6(waiter),time) ->
% Initiates(PlaceOn(waiter,food,table),
%           BeWaiter7(waiter),
%           time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3135).
% From E: 
% 
% '->'(
%    holds(
%       beWaiter6(Waiter), 
%       Time), 
%    initiates_at(
%       placeOn(Waiter,Food,Table), 
%       beWaiter7(Waiter), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3135).
if(not(initiates(placeOn(Waiter,Food,Table),
		 at(beWaiter7(Waiter),Time))),
   not(holds(beWaiter6(Waiter),Time))).


% [waiter,agent,bill,time]
% HoldsAt(BeWaiter7(waiter),time) ->
% Terminates(Request(agent,waiter,bill),
%            BeWaiter7(waiter),
%            time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3141).
% From E: 
% 
% '->'(
%    holds(
%       beWaiter7(Waiter), 
%       Time), 
%    terminates_at(
%       request(Agent,Waiter,Bill), 
%       beWaiter7(Waiter), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3141).
if(not(terminates(request(Agent,Waiter,Bill),
		  at(beWaiter7(Waiter),Time))),
   not(holds(beWaiter7(Waiter),Time))).


% [waiter,agent,bill,time]
% HoldsAt(BeWaiter7(waiter),time) ->
% Initiates(Request(agent,waiter,bill),
%           BeWaiter8(waiter),
%           time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3147).
% From E: 
% 
% '->'(
%    holds(
%       beWaiter7(Waiter), 
%       Time), 
%    initiates_at(
%       request(Agent,Waiter,Bill), 
%       beWaiter8(Waiter), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3147).
if(not(initiates(request(Agent,Waiter,Bill),
		 at(beWaiter8(Waiter),Time))),
   not(holds(beWaiter7(Waiter),Time))).


% [restaurant,waiter,bill,time]
% WaiterOf(restaurant)=waiter &
% BillOf(restaurant)=bill &
% HoldsAt(BeWaiter8(waiter),time) ->
% Happens(PickUp(waiter,bill),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3153).
% From E: 
% 
% '->'(
%    ','(
%       '='(
%          waiterOf(Restaurant), 
%          Waiter), 
%       ','(
%          '='(
%             billOf(Restaurant), 
%             Bill), 
%          holds(
%             beWaiter8(Waiter), 
%             Time))), 
%    happens(
%       pickUp(Waiter,Bill), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3153).
 if(not(pickUp(Waiter, Bill)),
       (not(waiterOf(Restaurant, Waiter));not(billOf(Restaurant, Bill));not(beWaiter8(Waiter)))).


% [waiter,bill,time]
% HoldsAt(BeWaiter8(waiter),time) ->
% Terminates(PickUp(waiter,bill),
%            BeWaiter8(waiter),
%            time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3159).
% From E: 
% 
% '->'(
%    holds(
%       beWaiter8(Waiter), 
%       Time), 
%    terminates_at(
%       pickUp(Waiter,Bill), 
%       beWaiter8(Waiter), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3159).
if(not(terminates(pickUp(Waiter,Bill),
		  at(beWaiter8(Waiter),Time))),
   not(holds(beWaiter8(Waiter),Time))).


% [waiter,bill,time]
% HoldsAt(BeWaiter8(waiter),time) ->
% Initiates(PickUp(waiter,bill),
%           BeWaiter9(waiter),
%           time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3165).
% From E: 
% 
% '->'(
%    holds(
%       beWaiter8(Waiter), 
%       Time), 
%    initiates_at(
%       pickUp(Waiter,Bill), 
%       beWaiter9(Waiter), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3165).
if(not(initiates(pickUp(Waiter,Bill),
		 at(beWaiter9(Waiter),Time))),
   not(holds(beWaiter8(Waiter),Time))).


% [restaurant,waiter,bill,table,time]
% WaiterOf(restaurant)=waiter &
% BillOf(restaurant)=bill &
% TableOf(restaurant)=table &
% HoldsAt(BeWaiter9(waiter),time) ->
% Happens(PlaceOn(waiter,bill,table),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3171).
% From E: 
% 
% '->'(
%    ','(
%       '='(
%          waiterOf(Restaurant), 
%          Waiter), 
%       ','(
%          '='(
%             billOf(Restaurant), 
%             Bill), 
%          ','(
%             '='(
%                tableOf(Restaurant), 
%                Table), 
%             holds(
%                beWaiter9(Waiter), 
%                Time)))), 
%    happens(
%       placeOn(Waiter,Bill,Table), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3171).
 if(not(placeOn(Waiter, Bill, Table)),
       (not(waiterOf(Restaurant, Waiter));not(billOf(Restaurant, Bill));not(tableOf(Restaurant, Table));not(beWaiter9(Waiter)))).


% [waiter,bill,table,time]
% HoldsAt(BeWaiter9(waiter),time) ->
% Terminates(PlaceOn(waiter,bill,table),
%            BeWaiter9(waiter),
%            time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3178).
% From E: 
% 
% '->'(
%    holds(
%       beWaiter9(Waiter), 
%       Time), 
%    terminates_at(
%       placeOn(Waiter,Bill,Table), 
%       beWaiter9(Waiter), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3178).
if(not(terminates(placeOn(Waiter,Bill,Table),
		  at(beWaiter9(Waiter),Time))),
   not(holds(beWaiter9(Waiter),Time))).


% [waiter,bill,table,time]
% HoldsAt(BeWaiter9(waiter),time) ->
% Initiates(PlaceOn(waiter,bill,table),
%           BeWaiter0(waiter),
%           time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3184).
% From E: 
% 
% '->'(
%    holds(
%       beWaiter9(Waiter), 
%       Time), 
%    initiates_at(
%       placeOn(Waiter,Bill,Table), 
%       beWaiter0(Waiter), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3184).
if(not(initiates(placeOn(Waiter,Bill,Table),
		 at(beWaiter0(Waiter),Time))),
   not(holds(beWaiter9(Waiter),Time))).

% fluent BeCook0(cook)
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3188).
% From E: 
% 
% fluent(beCook0(cook)).
mpred_prop(beCook0(cook), fluent).
fluents([beCook0/1]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3191).
% fluent BeCook1(cook)
% From E: 
% 
% fluent(beCook1(cook)).
mpred_prop(beCook1(cook), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3191).
fluents([beCook1/1]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3193).
% xor BeCook0, BeCook1
% From E: 
% 
% xor([beCook0,beCook1]).
xor([beCook0,beCook1]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3195).
% [cook,agent,food,time]
% HoldsAt(BeCook0(cook),time) ->
% Terminates(Order(agent,cook,food),
%            BeCook0(cook),
%            time).
% From E: 
% 
% '->'(
%    holds(
%       beCook0(Cook), 
%       Time), 
%    terminates_at(
%       order(Agent,Cook,Food), 
%       beCook0(Cook), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3195).
if(not(terminates(order(Agent,Cook,Food),
		  at(beCook0(Cook),Time))),
   not(holds(beCook0(Cook),Time))).


% [cook,agent,food,time]
% HoldsAt(BeCook0(cook),time) ->
% Initiates(Order(agent,cook,food),
%           BeCook1(cook),
%           time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3202).
% From E: 
% 
% '->'(
%    holds(
%       beCook0(Cook), 
%       Time), 
%    initiates_at(
%       order(Agent,Cook,Food), 
%       beCook1(Cook), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3202).
if(not(initiates(order(Agent,Cook,Food),
		 at(beCook1(Cook),Time))),
   not(holds(beCook0(Cook),Time))).

% event FoodPrepare(agent,food)
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3206).
% From E: 
% 
% event(foodPrepare(agent,food)).
events([foodPrepare/2]).
mpred_prop(foodPrepare(agent, food), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3206).
actions([foodPrepare/2]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3209).
% fluent FoodPrepared(food)
% From E: 
% 
% fluent(foodPrepared(food)).
mpred_prop(foodPrepared(food), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3209).
fluents([foodPrepared/1]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3211).
% [agent,food,time]
% Initiates(FoodPrepare(agent,food),
%           FoodPrepared(food),
%           time).
% From E: 
% 
% initiates_at(
%    foodPrepare(Agent,Food), 
%    foodPrepared(Food), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3211).
initiates(foodPrepare(Agent,Food),foodPrepared(Food)).


% [agent,food,time]
% Happens(FoodPrepare(agent,food),time) ->
% {location}% 
% HoldsAt(At(agent,location),time) &
% HoldsAt(At(food,location),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3217).
% From E: 
% 
% exists(Location, 
%    '->'(
%       happens(
%          foodPrepare(Agent,Food), 
%          Time), 
%       ','(
%          holds(
%             at_loc(Agent,Location), 
%             Time), 
%          holds(
%             at_loc(Food,Location), 
%             Time)))).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3217).
exists(Location,  (at_loc(Agent, Location), at_loc(Food, Location);not(foodPrepare(Agent, Food)))).


% [cook,agent,food,time]
% HoldsAt(BeCook1(cook),time) &
% HoldsAt(KnowOrder(cook,agent,food),time) ->
% Happens(FoodPrepare(cook,food),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3223).
% From E: 
% 
% '->'(
%    ','(
%       holds(
%          beCook1(Cook), 
%          Time), 
%       holds(
%          knowOrder(Cook,Agent,Food), 
%          Time)), 
%    happens(
%       foodPrepare(Cook,Food), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3223).
 if(not(foodPrepare(Cook, Food)),
       (not(beCook1(Cook));not(knowOrder(Cook, Agent, Food)))).


% [cook,food,time]
% HoldsAt(BeCook1(cook),time) ->
% Terminates(FoodPrepare(cook,food),
%            BeCook1(cook),
%            time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3228).
% From E: 
% 
% '->'(
%    holds(
%       beCook1(Cook), 
%       Time), 
%    terminates_at(
%       foodPrepare(Cook,Food), 
%       beCook1(Cook), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3228).
if(not(terminates(foodPrepare(Cook,Food),
		  at(beCook1(Cook),Time))),
   not(holds(beCook1(Cook),Time))).


% [cook,food,time]
% HoldsAt(BeCook1(cook),time) ->
% Initiates(FoodPrepare(cook,food),
%           BeCook0(cook),
%           time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3234).
% From E: 
% 
% '->'(
%    holds(
%       beCook1(Cook), 
%       Time), 
%    initiates_at(
%       foodPrepare(Cook,Food), 
%       beCook0(Cook), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3234).
if(not(initiates(foodPrepare(Cook,Food),
		 at(beCook0(Cook),Time))),
   not(holds(beCook1(Cook),Time))).

% event Pay(agent,agent)
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3238).
% From E: 
% 
% event(pay(agent,agent)).
events([pay/2]).
mpred_prop(pay(agent, agent), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3238).
actions([pay/2]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3241).
% event Tip(agent,agent)
% From E: 
% 
% event(tip(agent,agent)).
events([tip/2]).
mpred_prop(tip(agent, agent), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3241).
actions([tip/2]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3243).
% [agent,physobj,time]
% Happens(LieOn(agent,physobj),time) ->
% {room}% 
%  HoldsAt(At(agent,room),time) &
%  HoldsAt(At(physobj,room),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3245).
% From E: 
% 
% exists(Room, 
%    '->'(
%       happens(
%          lieOn(Agent,Physobj), 
%          Time), 
%       ','(
%          holds(
%             at_loc(Agent,Room), 
%             Time), 
%          holds(
%             at_loc(Physobj,Room), 
%             Time)))).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3245).
exists(Room,  (at_loc(Agent, Room), at_loc(Physobj, Room);not(lieOn(Agent, Physobj)))).


% [agent,physobj,time]
% Happens(SitOn(agent,physobj),time) ->
% {room}% 
%  HoldsAt(At(agent,room),time) &
%  HoldsAt(At(physobj,room),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3250).
% From E: 
% 
% exists(Room, 
%    '->'(
%       happens(
%          sitOn(Agent,Physobj), 
%          Time), 
%       ','(
%          holds(
%             at_loc(Agent,Room), 
%             Time), 
%          holds(
%             at_loc(Physobj,Room), 
%             Time)))).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3250).
exists(Room,  (at_loc(Agent, Room), at_loc(Physobj, Room);not(sitOn(Agent, Physobj)))).

% event LieOn(agent,physobj)
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3254).
% From E: 
% 
% event(lieOn(agent,physobj)).
events([lieOn/2]).
mpred_prop(lieOn(agent, physobj), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3254).
actions([lieOn/2]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3257).
% event SitOn(agent,physobj)
% From E: 
% 
% event(sitOn(agent,physobj)).
events([sitOn/2]).
mpred_prop(sitOn(agent, physobj), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3257).
actions([sitOn/2]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3259).
% event RiseFrom(agent,physobj)
% From E: 
% 
% event(riseFrom(agent,physobj)).
events([riseFrom/2]).
mpred_prop(riseFrom(agent, physobj), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3259).
actions([riseFrom/2]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3261).
% fluent LyingOn(agent,physobj)
% From E: 
% 
% fluent(lyingOn(agent,physobj)).
mpred_prop(lyingOn(agent, physobj), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3261).
fluents([lyingOn/2]).

% fluent SittingOn(agent,physobj)
% From E: 
% 
% fluent(sittingOn(agent,physobj)).
mpred_prop(sittingOn(agent, physobj), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3261).
fluents([sittingOn/2]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3263).
% fluent Standing(agent)
% From E: 
% 
% fluent(standing(agent)).
mpred_prop(standing(agent), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3263).
fluents([standing/1]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3265).
% fluent Lying(agent)
% From E: 
% 
% fluent(lying(agent)).
mpred_prop(lying(agent), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3265).
fluents([lying/1]).

% fluent Sitting(agent)
% From E: 
% 
% fluent(sitting(agent)).
mpred_prop(sitting(agent), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3265).
fluents([sitting/1]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3267).
% noninertial Lying
% From E: 
% 
% ':-'(call_pel_directive(noninertial(lying))).
:- call_pel_directive(noninertial(lying)).

% noninertial Sitting
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3267).
% From E: 
% 
% ':-'(call_pel_directive(noninertial(sitting))).
:- call_pel_directive(noninertial(sitting)).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3270).
% xor Lying, Sitting, Standing
% From E: 
% 
% xor([lying,sitting,standing]).
xor([lying,sitting,standing]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3272).
% [agent,physobj,time]
% HoldsAt(LyingOn(agent,physobj),time) ->
% HoldsAt(Lying(agent),time).
% From E: 
% 
% '->'(
%    holds(
%       lyingOn(Agent,Physobj), 
%       Time), 
%    holds(
%       lying(Agent), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3272).
if(not(lying(Agent)),not(lyingOn(Agent,Physobj))).


% [agent,physobj,time]
% HoldsAt(SittingOn(agent,physobj),time) ->
% HoldsAt(Sitting(agent),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3277).
% From E: 
% 
% '->'(
%    holds(
%       sittingOn(Agent,Physobj), 
%       Time), 
%    holds(
%       sitting(Agent), 
%       Time)).
 %   [Time].
if(not(sitting(Agent)),not(sittingOn(Agent,Physobj))).


% [agent,physobj1,physobj2,time]
% HoldsAt(LyingOn(agent,physobj1),time) &
% HoldsAt(LyingOn(agent,physobj2),time) ->
% physobj1=physobj2.
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3281).
% From E: 
% 
% '->'(
%    ','(
%       holds(
%          lyingOn(Agent,Physobj1), 
%          Time), 
%       holds(
%          lyingOn(Agent,Physobj2), 
%          Time)), 
%    Physobj1=Physobj2).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3281).
 if(not(equals(Physobj1, Physobj2)),
       (not(lyingOn(Agent, Physobj1));not(lyingOn(Agent, Physobj2)))).


% [agent,physobj1,physobj2,time]
% HoldsAt(SittingOn(agent,physobj1),time) &
% HoldsAt(SittingOn(agent,physobj2),time) ->
% physobj1=physobj2.
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3286).
% From E: 
% 
% '->'(
%    ','(
%       holds(
%          sittingOn(Agent,Physobj1), 
%          Time), 
%       holds(
%          sittingOn(Agent,Physobj2), 
%          Time)), 
%    Physobj1=Physobj2).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3286).
 if(not(equals(Physobj1, Physobj2)),
       (not(sittingOn(Agent, Physobj1));not(sittingOn(Agent, Physobj2)))).


% [agent,physobj,time]
% HoldsAt(Standing(agent),time) ->
% Initiates(LieOn(agent,physobj),
%           LyingOn(agent,physobj),
%           time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3291).
% From E: 
% 
% '->'(
%    holds(
%       standing(Agent), 
%       Time), 
%    initiates_at(
%       lieOn(Agent,Physobj), 
%       lyingOn(Agent,Physobj), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3291).
if(not(initiates(lieOn(Agent,Physobj),
		 at(lyingOn(Agent,Physobj),Time))),
   not(holds(standing(Agent),Time))).


% [agent,physobj,time]
% Terminates(LieOn(agent,physobj),
%            Standing(agent),
%            time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3297).
% From E: 
% 
% terminates_at(
%    lieOn(Agent,Physobj), 
%    standing(Agent), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3297).
terminates(lieOn(Agent,Physobj),standing(Agent)).


% [agent,physobj,time]
% HoldsAt(Standing(agent),time) ->
% Initiates(SitOn(agent,physobj),
%           SittingOn(agent,physobj),
%           time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3302).
% From E: 
% 
% '->'(
%    holds(
%       standing(Agent), 
%       Time), 
%    initiates_at(
%       sitOn(Agent,Physobj), 
%       sittingOn(Agent,Physobj), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3302).
if(not(initiates(sitOn(Agent,Physobj),
		 at(sittingOn(Agent,Physobj),Time))),
   not(holds(standing(Agent),Time))).


% [agent,physobj,time]
% Terminates(SitOn(agent,physobj),
%            Standing(agent),
%            time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3308).
% From E: 
% 
% terminates_at(
%    sitOn(Agent,Physobj), 
%    standing(Agent), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3308).
terminates(sitOn(Agent,Physobj),standing(Agent)).


% [agent,physobj,time]
% (HoldsAt(SittingOn(agent,physobj),time) |
%  HoldsAt(LyingOn(agent,physobj),time)) ->
% Initiates(RiseFrom(agent,physobj),
%           Standing(agent),
%           time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3313).
% From E: 
% 
% '->'(
%    ';'(
%       holds(
%          sittingOn(Agent,Physobj), 
%          Time), 
%       holds(
%          lyingOn(Agent,Physobj), 
%          Time)), 
%    initiates_at(
%       riseFrom(Agent,Physobj), 
%       standing(Agent), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3313).
if(not(initiates(riseFrom(Agent, Physobj), at(standing(Agent), Time))),  (not(holds(sittingOn(Agent, Physobj), Time)), not(holds(lyingOn(Agent, Physobj), Time)))).


% [agent,physobj,time]
% HoldsAt(LyingOn(agent,physobj),time) ->
% Terminates(RiseFrom(agent,physobj),
%            LyingOn(agent,physobj),
%            time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3320).
% From E: 
% 
% '->'(
%    holds(
%       lyingOn(Agent,Physobj), 
%       Time), 
%    terminates_at(
%       riseFrom(Agent,Physobj), 
%       lyingOn(Agent,Physobj), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3320).
if(not(terminates(riseFrom(Agent,Physobj),
		  at(lyingOn(Agent,Physobj),Time))),
   not(holds(lyingOn(Agent,Physobj),Time))).


% [agent,physobj,time]
% HoldsAt(SittingOn(agent,physobj),time) ->
% Terminates(RiseFrom(agent,physobj),
%            SittingOn(agent,physobj),
%            time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3326).
% From E: 
% 
% '->'(
%    holds(
%       sittingOn(Agent,Physobj), 
%       Time), 
%    terminates_at(
%       riseFrom(Agent,Physobj), 
%       sittingOn(Agent,Physobj), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3326).
if(not(terminates(riseFrom(Agent,Physobj),
		  at(sittingOn(Agent,Physobj),Time))),
   not(holds(sittingOn(Agent,Physobj),Time))).

% event Greet(agent,agent)
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3330).
% From E: 
% 
% event(greet(agent,agent)).
events([greet/2]).
mpred_prop(greet(agent, agent), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3330).
actions([greet/2]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3333).
% event SayGoodbye(agent,agent)
% From E: 
% 
% event(sayGoodbye(agent,agent)).
events([sayGoodbye/2]).
mpred_prop(sayGoodbye(agent, agent), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3333).
actions([sayGoodbye/2]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3335).
% [agent1,agent2,time]
% Happens(Greet(agent1,agent2),time) ->
% {location}% 
% HoldsAt(At(agent1,location),time) &
% HoldsAt(At(agent2,location),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3337).
% From E: 
% 
% exists(Location, 
%    '->'(
%       happens(
%          greet(Agent1,Agent2), 
%          Time), 
%       ','(
%          holds(
%             at_loc(Agent1,Location), 
%             Time), 
%          holds(
%             at_loc(Agent2,Location), 
%             Time)))).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3337).
exists(Location,  (at_loc(Agent1, Location), at_loc(Agent2, Location);not(greet(Agent1, Agent2)))).


% [agent1,agent2,time]
% Happens(SayGoodbye(agent1,agent2),time) ->
% {location}% 
% HoldsAt(At(agent1,location),time) &
% HoldsAt(At(agent2,location),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3342).
% From E: 
% 
% exists(Location, 
%    '->'(
%       happens(
%          sayGoodbye(Agent1,Agent2), 
%          Time), 
%       ','(
%          holds(
%             at_loc(Agent1,Location), 
%             Time), 
%          holds(
%             at_loc(Agent2,Location), 
%             Time)))).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3342).
exists(Location,  (at_loc(Agent1, Location), at_loc(Agent2, Location);not(sayGoodbye(Agent1, Agent2)))).

% event Order(agent,agent,physobj)
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3346).
% From E: 
% 
% event(order(agent,agent,physobj)).
events([order/3]).
mpred_prop(order(agent, agent, physobj), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3346).
actions([order/3]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3349).
% fluent KnowOrder(agent,agent,physobj)
% From E: 
% 
% fluent(knowOrder(agent,agent,physobj)).
mpred_prop(knowOrder(agent, agent, physobj), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3349).
fluents([knowOrder/3]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3351).
% [agent1,agent2,physobj,time]
% Initiates(Order(agent1,agent2,physobj),
%           KnowOrder(agent2,agent1,physobj),
%           time).
% From E: 
% 
% initiates_at(
%    order(Agent1,Agent2,Physobj), 
%    knowOrder(Agent2,Agent1,Physobj), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3351).
initiates(order(Agent1,Agent2,Physobj),
	  knowOrder(Agent2,Agent1,Physobj)).


% [agent1,agent2,physobj,time]
% Happens(Order(agent1,agent2,physobj),time) ->
% {location}% 
% HoldsAt(At(agent1,location),time) &
% HoldsAt(At(agent2,location),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3357).
% From E: 
% 
% exists(Location, 
%    '->'(
%       happens(
%          order(Agent1,Agent2,Physobj), 
%          Time), 
%       ','(
%          holds(
%             at_loc(Agent1,Location), 
%             Time), 
%          holds(
%             at_loc(Agent2,Location), 
%             Time)))).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3357).
exists(Location,  (at_loc(Agent1, Location), at_loc(Agent2, Location);not(order(Agent1, Agent2, Physobj)))).

% event Request(agent,agent,physobj)
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3361).
% From E: 
% 
% event(request(agent,agent,physobj)).
events([request/3]).
mpred_prop(request(agent, agent, physobj), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3361).
actions([request/3]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3364).
% fluent KnowRequest(agent,agent,physobj)
% From E: 
% 
% fluent(knowRequest(agent,agent,physobj)).
mpred_prop(knowRequest(agent, agent, physobj), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3364).
fluents([knowRequest/3]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3366).
% [agent1,agent2,physobj,time]
% Initiates(Request(agent1,agent2,physobj),
%           KnowRequest(agent2,agent1,physobj),
%           time).
% From E: 
% 
% initiates_at(
%    request(Agent1,Agent2,Physobj), 
%    knowRequest(Agent2,Agent1,Physobj), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3366).
initiates(request(Agent1,Agent2,Physobj),
	  knowRequest(Agent2,Agent1,Physobj)).


% [agent1,agent2,physobj,time]
% Happens(Request(agent1,agent2,physobj),time) ->
% {location}% 
% HoldsAt(At(agent1,location),time) &
% HoldsAt(At(agent2,location),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3372).
% From E: 
% 
% exists(Location, 
%    '->'(
%       happens(
%          request(Agent1,Agent2,Physobj), 
%          Time), 
%       ','(
%          holds(
%             at_loc(Agent1,Location), 
%             Time), 
%          holds(
%             at_loc(Agent2,Location), 
%             Time)))).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3372).
exists(Location,  (at_loc(Agent1, Location), at_loc(Agent2, Location);not(request(Agent1, Agent2, Physobj)))).


%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: ecnet/Diving.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; scuba diving
%;

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3398).
% sort object
% From E: 
% 
% sort(object).
sort(object).

% sort agent: object
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3398).
% From E: 
% 
% subsort(agent,object).
subsort(agent, object).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3400).
% sort diver: agent
% From E: 
% 
% subsort(diver,agent).
subsort(diver, agent).

% sort depth: integer
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3400).
% From E: 
% 
% subsort(depth,integer).
subsort(depth, integer).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3402).
% sort boat: object
% From E: 
% 
% subsort(boat,object).
subsort(boat, object).
%; reference line, anchor line, shotline, SMB line, ...

% sort line: object
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3404).
% From E: 
% 
% subsort(line,object).
subsort(line, object).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3407).
% sort equipment: object
% From E: 
% 
% subsort(equipment,object).
subsort(equipment, object).

% sort weight: equipment
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3407).
% From E: 
% 
% subsort(weight,equipment).
subsort(weight, equipment).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3409).
% sort fin: equipment
% From E: 
% 
% subsort(fin,equipment).
subsort(fin, equipment).

% sort airtank: equipment
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3409).
% From E: 
% 
% subsort(airtank,equipment).
subsort(airtank, equipment).
%; buoyancy compensator (BC)
%; buoyancy control device (BCD)

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3414).
% sort computer: equipment
% From E: 
% 
% subsort(computer,equipment).
subsort(computer, equipment).

% sort bc: equipment
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3414).
% From E: 
% 
% subsort(bc,equipment).
subsort(bc, equipment).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3417).
% fluent AtDepth(object,depth)
% From E: 
% 
% fluent(atDepth(object,depth)).
mpred_prop(atDepth(object, depth), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3417).
fluents([atDepth/2]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3419).
% [object,depth1,depth2,time]
% HoldsAt(AtDepth(object,depth1),time) &
% HoldsAt(AtDepth(object,depth2),time) ->
% depth1 = depth2.
% From E: 
% 
% '->'(
%    ','(
%       holds(
%          atDepth(Object,Depth1), 
%          Time), 
%       holds(
%          atDepth(Object,Depth2), 
%          Time)), 
%    Depth1=Depth2).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3419).
 if(not(equals(Depth1, Depth2)),
       (not(atDepth(Object, Depth1));not(atDepth(Object, Depth2)))).

% event Ascend(diver,depth)
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3423).
% From E: 
% 
% event(ascend(diver,depth)).
events([ascend/2]).
mpred_prop(ascend(diver, depth), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3423).
actions([ascend/2]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3426).
% event Descend(diver,depth)
% From E: 
% 
% event(descend(diver,depth)).
events([descend/2]).
mpred_prop(descend(diver, depth), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3426).
actions([descend/2]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3428).
% [diver,depth1,depth2,time]
% HoldsAt(AtDepth(diver,depth1),time) &
% Happens(Descend(diver,depth2),time) ->
% depth2>depth1.
% From E: 
% 
% '->'(
%    ','(
%       holds(
%          atDepth(Diver,Depth1), 
%          Time), 
%       happens(
%          descend(Diver,Depth2), 
%          Time)), 
%    Depth2>Depth1).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3428).
 if(not(comparison(Depth2, Depth1, >)),
       (not(atDepth(Diver, Depth1));not(descend(Diver, Depth2)))).


% [diver,depth1,depth2,time]
% HoldsAt(AtDepth(diver,depth1),time) &
% Happens(Ascend(diver,depth2),time) ->
% depth2<depth1.
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3434).
% From E: 
% 
% '->'(
%    ','(
%       holds(
%          atDepth(Diver,Depth1), 
%          Time), 
%       happens(
%          ascend(Diver,Depth2), 
%          Time)), 
%    Depth2<Depth1).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3434).
 if(not(comparison(Depth2, Depth1, <)),
       (not(atDepth(Diver, Depth1));not(ascend(Diver, Depth2)))).


% [diver,depth,time]
% Initiates(Descend(diver,depth),AtDepth(diver,depth),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3439).
% From E: 
% 
% initiates_at(
%    descend(Diver,Depth), 
%    atDepth(Diver,Depth), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3439).
initiates(descend(Diver,Depth),
	  atDepth(Diver,Depth)).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3441).
% [diver,depth1,depth2,time]
% HoldsAt(AtDepth(diver,depth1),time) ->
% Terminates(Descend(diver,depth2),AtDepth(diver,depth1),time).
% From E: 
% 
% '->'(
%    holds(
%       atDepth(Diver,Depth1), 
%       Time), 
%    terminates_at(
%       descend(Diver,Depth2), 
%       atDepth(Diver,Depth1), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3441).
if(not(terminates(descend(Diver,Depth2),
		  at(atDepth(Diver,Depth1),Time))),
   not(holds(atDepth(Diver,Depth1),Time))).


% [diver,depth,time]
% Initiates(Ascend(diver,depth),AtDepth(diver,depth),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3446).
% From E: 
% 
% initiates_at(
%    ascend(Diver,Depth), 
%    atDepth(Diver,Depth), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3446).
initiates(ascend(Diver,Depth),
	  atDepth(Diver,Depth)).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3448).
% [diver,depth1,depth2,time]
% HoldsAt(AtDepth(diver,depth1),time) ->
% Terminates(Ascend(diver,depth2),AtDepth(diver,depth1),time).
% From E: 
% 
% '->'(
%    holds(
%       atDepth(Diver,Depth1), 
%       Time), 
%    terminates_at(
%       ascend(Diver,Depth2), 
%       atDepth(Diver,Depth1), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3448).
if(not(terminates(ascend(Diver,Depth2),
		  at(atDepth(Diver,Depth1),Time))),
   not(holds(atDepth(Diver,Depth1),Time))).

% fluent Wearing(diver,equipment)
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3451).
% From E: 
% 
% fluent(wearing(diver,equipment)).
mpred_prop(wearing(diver, equipment), fluent).
fluents([wearing/2]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3454).
% event PutOn(diver,equipment)
% From E: 
% 
% event(putOn(diver,equipment)).
events([putOn/2]).
mpred_prop(putOn(diver, equipment), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3454).
actions([putOn/2]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3456).
% event TakeOff(diver,equipment)
% From E: 
% 
% event(takeOff(diver,equipment)).
events([takeOff/2]).
mpred_prop(takeOff(diver, equipment), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3456).
actions([takeOff/2]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3458).
% event Lose(diver,equipment)
% From E: 
% 
% event(lose(diver,equipment)).
events([lose/2]).
mpred_prop(lose(diver, equipment), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3458).
actions([lose/2]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3460).
% [diver,equipment,depth,time]
% Releases(PutOn(diver,equipment),AtDepth(equipment,depth),time).
% From E: 
% 
% releases_at(
%    putOn(Diver,Equipment), 
%    atDepth(Equipment,Depth), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3460).
releases(putOn(Diver,Equipment),
	 atDepth(Equipment,Depth)).


% [diver,equipment,time]
% Releases(PutOn(diver,equipment),UnderWater(equipment),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3464).
% From E: 
% 
% releases_at(
%    putOn(Diver,Equipment), 
%    underWater(Equipment), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3464).
releases(putOn(Diver,Equipment),
	 underWater(Equipment)).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3466).
% [diver,equipment,time]
% Happens(PutOn(diver,equipment),time) ->
% !{diver1} HoldsAt(Wearing(diver1,equipment),time).
% From E: 
% 
% '->'(
%    happens(
%       putOn(Diver,Equipment), 
%       Time), 
%    not(thereExists(Diver1, 
%           holds(
%              wearing(Diver1,Equipment), 
%              Time)))).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3466).
if(thereExists(Diver1,wearing(Diver1,Equipment)),
   not(putOn(Diver,Equipment))).


% [diver,depth,equipment,time]
% HoldsAt(Wearing(diver,equipment),time) ->
% (HoldsAt(AtDepth(diver,depth),time) <->
%  HoldsAt(AtDepth(equipment,depth),time)).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3471).
% From E: 
% 
% '->'(
%    holds(
%       wearing(Diver,Equipment), 
%       Time), 
%    <->(
%       holds(
%          atDepth(Diver,Depth), 
%          Time), 
%       holds(
%          atDepth(Equipment,Depth), 
%          Time))).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3471).
if((not(atDepth(Equipment, Depth)), atDepth(Diver, Depth);not(atDepth(Diver, Depth)), atDepth(Equipment, Depth)), not(wearing(Diver, Equipment))).


% [diver,depth,object,time]
% HoldsAt(Holding(diver,object),time) ->
% (HoldsAt(AtDepth(diver,depth),time) <->
%  HoldsAt(AtDepth(object,depth),time)).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3476).
% From E: 
% 
% '->'(
%    holds(
%       holding(Diver,Object), 
%       Time), 
%    <->(
%       holds(
%          atDepth(Diver,Depth), 
%          Time), 
%       holds(
%          atDepth(Object,Depth), 
%          Time))).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3476).
if((not(atDepth(Object, Depth)), atDepth(Diver, Depth);not(atDepth(Diver, Depth)), atDepth(Object, Depth)), not(holding(Diver, Object))).


% [diver,equipment,time]
% HoldsAt(Wearing(diver,equipment),time) ->
% (HoldsAt(UnderWater(diver),time) <->
%  HoldsAt(UnderWater(equipment),time)).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3481).
% From E: 
% 
% '->'(
%    holds(
%       wearing(Diver,Equipment), 
%       Time), 
%    <->(
%       holds(
%          underWater(Diver), 
%          Time), 
%       holds(
%          underWater(Equipment), 
%          Time))).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3481).
if((not(underWater(Equipment)), underWater(Diver);not(underWater(Diver)), underWater(Equipment)), not(wearing(Diver, Equipment))).


% [diver,object,time]
% HoldsAt(Holding(diver,object),time) ->
% (HoldsAt(UnderWater(diver),time) <->
%  HoldsAt(UnderWater(object),time)).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3486).
% From E: 
% 
% '->'(
%    holds(
%       holding(Diver,Object), 
%       Time), 
%    <->(
%       holds(
%          underWater(Diver), 
%          Time), 
%       holds(
%          underWater(Object), 
%          Time))).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3486).
if((not(underWater(Object)), underWater(Diver);not(underWater(Diver)), underWater(Object)), not(holding(Diver, Object))).


% [diver,depth,equipment,time]
% HoldsAt(AtDepth(diver,depth),time) &
% HoldsAt(Wearing(diver,equipment),time) ->
% Initiates(TakeOff(diver,equipment),AtDepth(equipment,depth),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3491).
% From E: 
% 
% '->'(
%    ','(
%       holds(
%          atDepth(Diver,Depth), 
%          Time), 
%       holds(
%          wearing(Diver,Equipment), 
%          Time)), 
%    initiates_at(
%       takeOff(Diver,Equipment), 
%       atDepth(Equipment,Depth), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3491).
 if(not(initiates(takeOff(Diver, Equipment),
                    at(atDepth(Equipment, Depth), Time))),
       (not(holds(atDepth(Diver, Depth), Time));not(holds(wearing(Diver, Equipment), Time)))).


% [diver,depth,equipment,time]
% !HoldsAt(AtDepth(diver,depth),time) &
% HoldsAt(Wearing(diver,equipment),time) ->
% Terminates(TakeOff(diver,equipment),AtDepth(equipment,depth),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3496).
% From E: 
% 
% '->'(
%    ','(
%       holds(
%          not(atDepth(Diver,Depth)), 
%          Time), 
%       holds(
%          wearing(Diver,Equipment), 
%          Time)), 
%    terminates_at(
%       takeOff(Diver,Equipment), 
%       atDepth(Equipment,Depth), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3496).
 if(not(terminates(takeOff(Diver, Equipment),
                     at(atDepth(Equipment, Depth), Time))),
       (holds(atDepth(Diver, Depth), Time);not(holds(wearing(Diver, Equipment), Time)))).


% [diver,equipment,time]
% HoldsAt(UnderWater(diver),time) ->
% Initiates(TakeOff(diver,equipment),UnderWater(equipment),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3501).
% From E: 
% 
% '->'(
%    holds(
%       underWater(Diver), 
%       Time), 
%    initiates_at(
%       takeOff(Diver,Equipment), 
%       underWater(Equipment), 
%       Time)).
 %   [Time].
if(not(initiates(takeOff(Diver,Equipment),
		 at(underWater(Equipment),Time))),
   not(holds(underWater(Diver),Time))).


% [diver,equipment,time]
% !HoldsAt(UnderWater(diver),time) ->
% Terminates(TakeOff(diver,equipment),UnderWater(equipment),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3505).
% From E: 
% 
% '->'(
%    holds(
%       not(underWater(Diver)), 
%       Time), 
%    terminates_at(
%       takeOff(Diver,Equipment), 
%       underWater(Equipment), 
%       Time)).
 %   [Time].
if(not(terminates(takeOff(Diver,Equipment),
		  at(underWater(Equipment),Time))),
   holds(underWater(Diver),Time)).


% [diver,equipment,depth,time]
% HoldsAt(AtDepth(diver,depth),time) &
% HoldsAt(Wearing(diver,equipment),time) ->
% Initiates(Lose(diver,equipment),AtDepth(equipment,depth),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3509).
% From E: 
% 
% '->'(
%    ','(
%       holds(
%          atDepth(Diver,Depth), 
%          Time), 
%       holds(
%          wearing(Diver,Equipment), 
%          Time)), 
%    initiates_at(
%       lose(Diver,Equipment), 
%       atDepth(Equipment,Depth), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3509).
 if(not(initiates(lose(Diver, Equipment),
                    at(atDepth(Equipment, Depth), Time))),
       (not(holds(atDepth(Diver, Depth), Time));not(holds(wearing(Diver, Equipment), Time)))).


% [diver,equipment,depth,time]
% !HoldsAt(AtDepth(diver,depth),time) &
% HoldsAt(Wearing(diver,equipment),time) ->
% Terminates(Lose(diver,equipment),AtDepth(equipment,depth),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3514).
% From E: 
% 
% '->'(
%    ','(
%       holds(
%          not(atDepth(Diver,Depth)), 
%          Time), 
%       holds(
%          wearing(Diver,Equipment), 
%          Time)), 
%    terminates_at(
%       lose(Diver,Equipment), 
%       atDepth(Equipment,Depth), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3514).
 if(not(terminates(lose(Diver, Equipment),
                     at(atDepth(Equipment, Depth), Time))),
       (holds(atDepth(Diver, Depth), Time);not(holds(wearing(Diver, Equipment), Time)))).


% [diver,equipment,time]
% HoldsAt(UnderWater(diver),time) ->
% Initiates(Lose(diver,equipment),UnderWater(equipment),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3519).
% From E: 
% 
% '->'(
%    holds(
%       underWater(Diver), 
%       Time), 
%    initiates_at(
%       lose(Diver,Equipment), 
%       underWater(Equipment), 
%       Time)).
 %   [Time].
if(not(initiates(lose(Diver,Equipment),
		 at(underWater(Equipment),Time))),
   not(holds(underWater(Diver),Time))).


% [diver,equipment,time]
% !HoldsAt(UnderWater(diver),time) ->
% Terminates(Lose(diver,equipment),UnderWater(equipment),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3523).
% From E: 
% 
% '->'(
%    holds(
%       not(underWater(Diver)), 
%       Time), 
%    terminates_at(
%       lose(Diver,Equipment), 
%       underWater(Equipment), 
%       Time)).
 %   [Time].
if(not(terminates(lose(Diver,Equipment),
		  at(underWater(Equipment),Time))),
   holds(underWater(Diver),Time)).

% fluent Holding(diver,object)
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3525).
% From E: 
% 
% fluent(holding(diver,object)).
mpred_prop(holding(diver, object), fluent).
fluents([holding/2]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3528).
% [diver1,diver2,time]
% HoldsAt(Holding(diver1,diver2),time) ->
% !HoldsAt(Holding(diver2,diver1),time).
% From E: 
% 
% '->'(
%    holds(
%       holding(Diver1,Diver2), 
%       Time), 
%    holds(
%       not(holding(Diver2,Diver1)), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3528).
if(holding(Diver2,Diver1),
   not(holding(Diver1,Diver2))).

% event Grab(diver,object)
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3531).
% From E: 
% 
% event(grab(diver,object)).
events([grab/2]).
mpred_prop(grab(diver, object), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3531).
actions([grab/2]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3534).
% event LetGoOf(diver,object)
% From E: 
% 
% event(letGoOf(diver,object)).
events([letGoOf/2]).
mpred_prop(letGoOf(diver, object), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3534).
actions([letGoOf/2]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3536).
% [diver,object,time]
% Initiates(Grab(diver,object),Holding(diver,object),time).
% From E: 
% 
% initiates_at(
%    grab(Diver,Object), 
%    holding(Diver,Object), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3536).
initiates(grab(Diver,Object),
	  holding(Diver,Object)).


% [diver,object,time]
% Terminates(LetGoOf(diver,object),Holding(diver,object),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3540).
% From E: 
% 
% terminates_at(
%    letGoOf(Diver,Object), 
%    holding(Diver,Object), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3540).
terminates(letGoOf(Diver,Object),
	   holding(Diver,Object)).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3542).
% [diver,object,depth,time]
% Releases(Grab(diver,object),AtDepth(object,depth),time).
% From E: 
% 
% releases_at(
%    grab(Diver,Object), 
%    atDepth(Object,Depth), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3542).
releases(grab(Diver,Object),
	 atDepth(Object,Depth)).


% [diver,object,time]
% Releases(Grab(diver,object),UnderWater(object),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3546).
% From E: 
% 
% releases_at(
%    grab(Diver,Object), 
%    underWater(Object), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3546).
releases(grab(Diver,Object),underWater(Object)).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3548).
% [diver,object,depth,time]
% HoldsAt(AtDepth(diver,depth),time) &
% HoldsAt(Holding(diver,object),time) ->
% Initiates(LetGoOf(diver,object),AtDepth(object,depth),time).
% From E: 
% 
% '->'(
%    ','(
%       holds(
%          atDepth(Diver,Depth), 
%          Time), 
%       holds(
%          holding(Diver,Object), 
%          Time)), 
%    initiates_at(
%       letGoOf(Diver,Object), 
%       atDepth(Object,Depth), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3548).
 if(not(initiates(letGoOf(Diver, Object),
                    at(atDepth(Object, Depth), Time))),
       (not(holds(atDepth(Diver, Depth), Time));not(holds(holding(Diver, Object), Time)))).


% [diver,object,depth,time]
% !HoldsAt(AtDepth(diver,depth),time) &
% HoldsAt(Holding(diver,object),time) ->
% Terminates(LetGoOf(diver,object),AtDepth(object,depth),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3554).
% From E: 
% 
% '->'(
%    ','(
%       holds(
%          not(atDepth(Diver,Depth)), 
%          Time), 
%       holds(
%          holding(Diver,Object), 
%          Time)), 
%    terminates_at(
%       letGoOf(Diver,Object), 
%       atDepth(Object,Depth), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3554).
 if(not(terminates(letGoOf(Diver, Object),
                     at(atDepth(Object, Depth), Time))),
       (holds(atDepth(Diver, Depth), Time);not(holds(holding(Diver, Object), Time)))).


% [diver,object,time]
% HoldsAt(UnderWater(diver),time) ->
% Initiates(LetGoOf(diver,object),UnderWater(object),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3559).
% From E: 
% 
% '->'(
%    holds(
%       underWater(Diver), 
%       Time), 
%    initiates_at(
%       letGoOf(Diver,Object), 
%       underWater(Object), 
%       Time)).
 %   [Time].
if(not(initiates(letGoOf(Diver,Object),
		 at(underWater(Object),Time))),
   not(holds(underWater(Diver),Time))).


% [diver,object,time]
% !HoldsAt(UnderWater(diver),time) ->
% Terminates(LetGoOf(diver,object),UnderWater(object),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3563).
% From E: 
% 
% '->'(
%    holds(
%       not(underWater(Diver)), 
%       Time), 
%    terminates_at(
%       letGoOf(Diver,Object), 
%       underWater(Object), 
%       Time)).
 %   [Time].
if(not(terminates(letGoOf(Diver,Object),
		  at(underWater(Object),Time))),
   holds(underWater(Diver),Time)).


% [diver,equipment,time]
% Initiates(PutOn(diver,equipment),Wearing(diver,equipment),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3567).
% From E: 
% 
% initiates_at(
%    putOn(Diver,Equipment), 
%    wearing(Diver,Equipment), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3567).
initiates(putOn(Diver,Equipment),
	  wearing(Diver,Equipment)).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3569).
% [diver,equipment,time]
% Happens(PutOn(diver,equipment),time) ->
% !HoldsAt(UnderWater(diver),time).
% From E: 
% 
% '->'(
%    happens(
%       putOn(Diver,Equipment), 
%       Time), 
%    holds(
%       not(underWater(Diver)), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3569).
if(underWater(Diver),not(putOn(Diver,Equipment))).


% [diver,equipment,time]
% Terminates(TakeOff(diver,equipment),Wearing(diver,equipment),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3574).
% From E: 
% 
% terminates_at(
%    takeOff(Diver,Equipment), 
%    wearing(Diver,Equipment), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3574).
terminates(takeOff(Diver,Equipment),
	   wearing(Diver,Equipment)).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3576).
% [diver,equipment,time]
% Terminates(Lose(diver,equipment),Wearing(diver,equipment),time).
% From E: 
% 
% terminates_at(
%    lose(Diver,Equipment), 
%    wearing(Diver,Equipment), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3576).
terminates(lose(Diver,Equipment),
	   wearing(Diver,Equipment)).

% fluent Vertical(diver)
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3578).
% From E: 
% 
% fluent(vertical(diver)).
mpred_prop(vertical(diver), fluent).
fluents([vertical/1]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3581).
% fluent HorizontalDown(diver)
% From E: 
% 
% fluent(horizontalDown(diver)).
mpred_prop(horizontalDown(diver), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3581).
fluents([horizontalDown/1]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3583).
% fluent Inverted(diver)
% From E: 
% 
% fluent(inverted(diver)).
mpred_prop(inverted(diver), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3583).
fluents([inverted/1]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3585).
% fluent HorizontalUp(diver)
% From E: 
% 
% fluent(horizontalUp(diver)).
mpred_prop(horizontalUp(diver), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3585).
fluents([horizontalUp/1]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3587).
% xor Vertical, HorizontalDown, Inverted, HorizontalUp
% From E: 
% 
% xor([vertical,horizontalDown,inverted,horizontalUp]).
xor([vertical,horizontalDown,inverted,horizontalUp]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3589).
% event RotatePitch(diver)
% From E: 
% 
% event(rotatePitch(diver)).
events([rotatePitch/1]).
mpred_prop(rotatePitch(diver), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3589).
actions([rotatePitch/1]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3591).
% [diver,time]
% HoldsAt(Vertical(diver),time) ->
% Initiates(RotatePitch(diver),HorizontalDown(diver),time).
% From E: 
% 
% '->'(
%    holds(
%       vertical(Diver), 
%       Time), 
%    initiates_at(
%       rotatePitch(Diver), 
%       horizontalDown(Diver), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3591).
if(not(initiates(rotatePitch(Diver),
		 at(horizontalDown(Diver),Time))),
   not(holds(vertical(Diver),Time))).


% [diver,time]
% HoldsAt(HorizontalDown(diver),time) ->
% Initiates(RotatePitch(diver),Inverted(diver),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3596).
% From E: 
% 
% '->'(
%    holds(
%       horizontalDown(Diver), 
%       Time), 
%    initiates_at(
%       rotatePitch(Diver), 
%       inverted(Diver), 
%       Time)).
 %   [Time].
if(not(initiates(rotatePitch(Diver),
		 at(inverted(Diver),Time))),
   not(holds(horizontalDown(Diver),Time))).


% [diver,time]
% HoldsAt(HorizontalDown(diver),time) ->
% Terminates(RotatePitch(diver),HorizontalDown(diver),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3600).
% From E: 
% 
% '->'(
%    holds(
%       horizontalDown(Diver), 
%       Time), 
%    terminates_at(
%       rotatePitch(Diver), 
%       horizontalDown(Diver), 
%       Time)).
 %   [Time].
if(not(terminates(rotatePitch(Diver),
		  at(horizontalDown(Diver),Time))),
   not(holds(horizontalDown(Diver),Time))).


% [diver,time]
% HoldsAt(Inverted(diver),time) ->
% Initiates(RotatePitch(diver),HorizontalUp(diver),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3604).
% From E: 
% 
% '->'(
%    holds(
%       inverted(Diver), 
%       Time), 
%    initiates_at(
%       rotatePitch(Diver), 
%       horizontalUp(Diver), 
%       Time)).
 %   [Time].
if(not(initiates(rotatePitch(Diver),
		 at(horizontalUp(Diver),Time))),
   not(holds(inverted(Diver),Time))).


% [diver,time]
% HoldsAt(Inverted(diver),time) ->
% Terminates(RotatePitch(diver),Inverted(diver),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3608).
% From E: 
% 
% '->'(
%    holds(
%       inverted(Diver), 
%       Time), 
%    terminates_at(
%       rotatePitch(Diver), 
%       inverted(Diver), 
%       Time)).
 %   [Time].
if(not(terminates(rotatePitch(Diver),
		  at(inverted(Diver),Time))),
   not(holds(inverted(Diver),Time))).


% [diver,time]
% HoldsAt(HorizontalUp(diver),time) ->
% Initiates(RotatePitch(diver),Vertical(diver),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3612).
% From E: 
% 
% '->'(
%    holds(
%       horizontalUp(Diver), 
%       Time), 
%    initiates_at(
%       rotatePitch(Diver), 
%       vertical(Diver), 
%       Time)).
 %   [Time].
if(not(initiates(rotatePitch(Diver),
		 at(vertical(Diver),Time))),
   not(holds(horizontalUp(Diver),Time))).


% [diver,time]
% HoldsAt(HorizontalUp(diver),time) ->
% Terminates(RotatePitch(diver),HorizontalUp(diver),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3616).
% From E: 
% 
% '->'(
%    holds(
%       horizontalUp(Diver), 
%       Time), 
%    terminates_at(
%       rotatePitch(Diver), 
%       horizontalUp(Diver), 
%       Time)).
 %   [Time].
if(not(terminates(rotatePitch(Diver),
		  at(horizontalUp(Diver),Time))),
   not(holds(horizontalUp(Diver),Time))).

% event RotateYaw(diver)
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3618).
% From E: 
% 
% event(rotateYaw(diver)).
events([rotateYaw/1]).
mpred_prop(rotateYaw(diver), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3618).
actions([rotateYaw/1]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3621).
%; try taking out Holding condition here
% [diver,time]
% Happens(Ascend1(diver),time) &
% !Happens(RapidAscendToSurface(diver),time) &
% !({diver1} HoldsAt(Holding(diver,diver1),time)) ->
% Happens(RotateYaw(diver),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3623).
% From E: 
% 
% '->'(
%    ','(
%       happens(
%          ascend1(Diver), 
%          Time), 
%       ','(
%          not(happens(
%                 rapidAscendToSurface(Diver), 
%                 Time)), 
%          not(thereExists(Diver1, 
%                 holds(
%                    holding(Diver,Diver1), 
%                    Time))))), 
%    happens(
%       rotateYaw(Diver), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3623).
 if(not(rotateYaw(Diver)),
       (not(ascend1(Diver));rapidAscendToSurface(Diver);thereExists(Diver1, holding(Diver, Diver1)))).

% fluent UnderWater(object)
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3627).
% From E: 
% 
% fluent(underWater(object)).
mpred_prop(underWater(object), fluent).
fluents([underWater/1]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3630).
% [object,depth,time]
% depth>% 0 &
% HoldsAt(AtDepth(object,depth),time) ->
% HoldsAt(UnderWater(object),time).
% From E: 
% 
% '->'(
%    ','(
%       Depth>0, 
%       holds(
%          atDepth(Object,Depth), 
%          Time)), 
%    holds(
%       underWater(Object), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3630).
 if(not(underWater(Object)),
       (not(comparison(Depth, 0, >));not(atDepth(Object, Depth)))).

% event EnterWater(object)
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3634).
% From E: 
% 
% event(enterWater(object)).
mpred_prop(enterWater(object), event).
events([enterWater/1]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3637).
% event Surface(object)
% From E: 
% 
% event(surface(object)).
mpred_prop(surface(object), event).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3637).
events([surface/1]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3639).
% [object,time]
% Initiates(EnterWater(object),UnderWater(object),time).
% From E: 
% 
% initiates_at(
%    enterWater(Object), 
%    underWater(Object), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3639).
initiates(enterWater(Object),underWater(Object)).


% [diver,time]
% Happens(EnterWater(diver),time) ->
% !{diver1} HoldsAt(Holding(diver1,diver),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3643).
% From E: 
% 
% '->'(
%    happens(
%       enterWater(Diver), 
%       Time), 
%    not(thereExists(Diver1, 
%           holds(
%              holding(Diver1,Diver), 
%              Time)))).
 %   [Time].
if(thereExists(Diver1,holding(Diver1,Diver)),
   not(enterWater(Diver))).


% [object,depth,time]
% depth=% 0 ->
% Initiates(EnterWater(object),AtDepth(object,depth),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3647).
% From E: 
% 
% '->'(
%    Depth=0, 
%    initiates_at(
%       enterWater(Object), 
%       atDepth(Object,Depth), 
%       Time)).
 %   [Time].
if(not(initiates(enterWater(Object),
		 at(atDepth(Object,Depth),Time))),
   not(equals(Depth,0))).


% [object,time]
% Terminates(Surface(object),UnderWater(object),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3651).
% From E: 
% 
% terminates_at(
%    surface(Object), 
%    underWater(Object), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3651).
terminates(surface(Object),underWater(Object)).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3653).
% [diver,time]
% Terminates(Surface(diver),PositivelyBuoyant(diver),time).
% From E: 
% 
% terminates_at(
%    surface(Diver), 
%    positivelyBuoyant(Diver), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3653).
terminates(surface(Diver),positivelyBuoyant(Diver)).


% [diver,time]
% Terminates(Surface(diver),NegativelyBuoyant(diver),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3657).
% From E: 
% 
% terminates_at(
%    surface(Diver), 
%    negativelyBuoyant(Diver), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3657).
terminates(surface(Diver),negativelyBuoyant(Diver)).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3659).
% [diver,time]
% Terminates(Surface(diver),NeutrallyBuoyant(diver),time).
% From E: 
% 
% terminates_at(
%    surface(Diver), 
%    neutrallyBuoyant(Diver), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3659).
terminates(surface(Diver),neutrallyBuoyant(Diver)).


% [object,depth,time]
% Terminates(Surface(object),AtDepth(object,depth),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3663).
% From E: 
% 
% terminates_at(
%    surface(Object), 
%    atDepth(Object,Depth), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3663).
terminates(surface(Object),atDepth(Object,Depth)).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3665).
% [diver,time]
 % Happens(EnterWater(diver),time) ->
% HoldsAt(Vertical(diver),time).
% From E: 
% 
% '->'(
%    happens(
%       enterWater(Diver), 
%       Time), 
%    holds(
%       vertical(Diver), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3665).
if(not(vertical(Diver)),not(enterWater(Diver))).

% fluent StandingOn(diver,boat)
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3667).
% From E: 
% 
% fluent(standingOn(diver,boat)).
mpred_prop(standingOn(diver, boat), fluent).
fluents([standingOn/2]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3670).
% event StandOn(diver,boat)
% From E: 
% 
% event(standOn(diver,boat)).
events([standOn/2]).
mpred_prop(standOn(diver, boat), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3670).
actions([standOn/2]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3672).
% [diver,boat,time]
% Terminates(EnterWater(diver),StandingOn(diver,boat),time).
% From E: 
% 
% terminates_at(
%    enterWater(Diver), 
%    standingOn(Diver,Boat), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3672).
terminates(enterWater(Diver),standingOn(Diver,Boat)).


% [diver,boat,time]
% Initiates(StandOn(diver,boat),StandingOn(diver,boat),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3676).
% From E: 
% 
% initiates_at(
%    standOn(Diver,Boat), 
%    standingOn(Diver,Boat), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3676).
initiates(standOn(Diver,Boat),
	  standingOn(Diver,Boat)).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3678).
% fluent PositivelyBuoyant(diver)
% From E: 
% 
% fluent(positivelyBuoyant(diver)).
mpred_prop(positivelyBuoyant(diver), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3678).
fluents([positivelyBuoyant/1]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3680).
% fluent NeutrallyBuoyant(diver)
% From E: 
% 
% fluent(neutrallyBuoyant(diver)).
mpred_prop(neutrallyBuoyant(diver), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3680).
fluents([neutrallyBuoyant/1]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3682).
% fluent NegativelyBuoyant(diver)
% From E: 
% 
% fluent(negativelyBuoyant(diver)).
mpred_prop(negativelyBuoyant(diver), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3682).
fluents([negativelyBuoyant/1]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3684).
% mutex PositivelyBuoyant, NeutrallyBuoyant, NegativelyBuoyant
% From E: 
% 
% ':-'(call_pel_directive(mutex(positivelyBuoyant))).
:- call_pel_directive(mutex(positivelyBuoyant)).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3684).
% From E: 
% 
% ':-'(call_pel_directive(mutex(neutrallyBuoyant))).
:- call_pel_directive(mutex(neutrallyBuoyant)).
% From E: 
% 
% ':-'(call_pel_directive(mutex(negativelyBuoyant))).
:- call_pel_directive(mutex(negativelyBuoyant)).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3686).
% [diver,time]
% HoldsAt(PositivelyBuoyant(diver),time) ->
% HoldsAt(UnderWater(diver),time).
% From E: 
% 
% '->'(
%    holds(
%       positivelyBuoyant(Diver), 
%       Time), 
%    holds(
%       underWater(Diver), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3686).
if(not(underWater(Diver)),not(positivelyBuoyant(Diver))).


% [diver,time]
% HoldsAt(NeutrallyBuoyant(diver),time) ->
% HoldsAt(UnderWater(diver),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3691).
% From E: 
% 
% '->'(
%    holds(
%       neutrallyBuoyant(Diver), 
%       Time), 
%    holds(
%       underWater(Diver), 
%       Time)).
 %   [Time].
if(not(underWater(Diver)),not(neutrallyBuoyant(Diver))).


% [diver,time]
% HoldsAt(NegativelyBuoyant(diver),time) ->
% HoldsAt(UnderWater(diver),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3695).
% From E: 
% 
% '->'(
%    holds(
%       negativelyBuoyant(Diver), 
%       Time), 
%    holds(
%       underWater(Diver), 
%       Time)).
 %   [Time].
if(not(underWater(Diver)),not(negativelyBuoyant(Diver))).

% event PressDeflateButton(diver,bc)
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3697).
% From E: 
% 
% event(pressDeflateButton(diver,bc)).
events([pressDeflateButton/2]).
mpred_prop(pressDeflateButton(diver, bc), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3697).
actions([pressDeflateButton/2]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3700).
% event PressDumpButton(diver,bc)
% From E: 
% 
% event(pressDumpButton(diver,bc)).
events([pressDumpButton/2]).
mpred_prop(pressDumpButton(diver, bc), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3700).
actions([pressDumpButton/2]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3702).
% event PressInflateButton(diver,bc)
% From E: 
% 
% event(pressInflateButton(diver,bc)).
events([pressInflateButton/2]).
mpred_prop(pressInflateButton(diver, bc), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3702).
actions([pressInflateButton/2]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3704).
% [diver,bc,time]
% Happens(PressDeflateButton(diver,bc),time) ->
% HoldsAt(Vertical(diver),time) &
% HoldsAt(UnderWater(bc),time).
% From E: 
% 
% '->'(
%    happens(
%       pressDeflateButton(Diver,Bc), 
%       Time), 
%    ','(
%       holds(
%          vertical(Diver), 
%          Time), 
%       holds(
%          underWater(Bc), 
%          Time))).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3704).
 if((not(vertical(Diver));not(underWater(Bc))),
      not(pressDeflateButton(Diver, Bc))).


% [diver,bc,time]
% Happens(PressDumpButton(diver,bc),time) ->
% HoldsAt(Vertical(diver),time) &
% HoldsAt(UnderWater(bc),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3710).
% From E: 
% 
% '->'(
%    happens(
%       pressDumpButton(Diver,Bc), 
%       Time), 
%    ','(
%       holds(
%          vertical(Diver), 
%          Time), 
%       holds(
%          underWater(Bc), 
%          Time))).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3710).
 if((not(vertical(Diver));not(underWater(Bc))),
      not(pressDumpButton(Diver, Bc))).


% [diver,bc,time]
 % Happens(PressDumpButton(diver,bc),time) ->
% HoldsAt(UncontrolledBuoyancy(diver),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3713).
% From E: 
% 
% '->'(
%    happens(
%       pressDumpButton(Diver,Bc), 
%       Time), 
%    holds(
%       uncontrolledBuoyancy(Diver), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3713).
if(not(uncontrolledBuoyancy(Diver)),
   not(pressDumpButton(Diver,Bc))).


% [diver,bc,time]
% HoldsAt(Wearing(diver,bc),time) ->
% Initiates(PressDeflateButton(diver,bc),NegativelyBuoyant(diver),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3718).
% From E: 
% 
% '->'(
%    holds(
%       wearing(Diver,Bc), 
%       Time), 
%    initiates_at(
%       pressDeflateButton(Diver,Bc), 
%       negativelyBuoyant(Diver), 
%       Time)).
 %   [Time].
if(not(initiates(pressDeflateButton(Diver,Bc),
		 at(negativelyBuoyant(Diver),Time))),
   not(holds(wearing(Diver,Bc),Time))).


% [diver,bc,time]
% HoldsAt(Wearing(diver,bc),time) ->
% Terminates(PressDeflateButton(diver,bc),NeutrallyBuoyant(diver),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3722).
% From E: 
% 
% '->'(
%    holds(
%       wearing(Diver,Bc), 
%       Time), 
%    terminates_at(
%       pressDeflateButton(Diver,Bc), 
%       neutrallyBuoyant(Diver), 
%       Time)).
 %   [Time].
if(not(terminates(pressDeflateButton(Diver,Bc),
		  at(neutrallyBuoyant(Diver),Time))),
   not(holds(wearing(Diver,Bc),Time))).


% [diver,bc,time]
% HoldsAt(Wearing(diver,bc),time) ->
% Terminates(PressDeflateButton(diver,bc),PositivelyBuoyant(diver),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3726).
% From E: 
% 
% '->'(
%    holds(
%       wearing(Diver,Bc), 
%       Time), 
%    terminates_at(
%       pressDeflateButton(Diver,Bc), 
%       positivelyBuoyant(Diver), 
%       Time)).
 %   [Time].
if(not(terminates(pressDeflateButton(Diver,Bc),
		  at(positivelyBuoyant(Diver),Time))),
   not(holds(wearing(Diver,Bc),Time))).


% [diver,bc,time]
% HoldsAt(Wearing(diver,bc),time) ->
% Initiates(PressDumpButton(diver,bc),NegativelyBuoyant(diver),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3730).
% From E: 
% 
% '->'(
%    holds(
%       wearing(Diver,Bc), 
%       Time), 
%    initiates_at(
%       pressDumpButton(Diver,Bc), 
%       negativelyBuoyant(Diver), 
%       Time)).
 %   [Time].
if(not(initiates(pressDumpButton(Diver,Bc),
		 at(negativelyBuoyant(Diver),Time))),
   not(holds(wearing(Diver,Bc),Time))).


% [diver,bc,time]
% HoldsAt(Wearing(diver,bc),time) ->
% Terminates(PressDumpButton(diver,bc),NeutrallyBuoyant(diver),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3734).
% From E: 
% 
% '->'(
%    holds(
%       wearing(Diver,Bc), 
%       Time), 
%    terminates_at(
%       pressDumpButton(Diver,Bc), 
%       neutrallyBuoyant(Diver), 
%       Time)).
 %   [Time].
if(not(terminates(pressDumpButton(Diver,Bc),
		  at(neutrallyBuoyant(Diver),Time))),
   not(holds(wearing(Diver,Bc),Time))).


% [diver,bc,time]
% HoldsAt(Wearing(diver,bc),time) ->
% Terminates(PressDumpButton(diver,bc),PositivelyBuoyant(diver),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3738).
% From E: 
% 
% '->'(
%    holds(
%       wearing(Diver,Bc), 
%       Time), 
%    terminates_at(
%       pressDumpButton(Diver,Bc), 
%       positivelyBuoyant(Diver), 
%       Time)).
 %   [Time].
if(not(terminates(pressDumpButton(Diver,Bc),
		  at(positivelyBuoyant(Diver),Time))),
   not(holds(wearing(Diver,Bc),Time))).


% [diver,bc,time]
% HoldsAt(Wearing(diver,bc),time) ->
% Initiates(PressInflateButton(diver,bc),NeutrallyBuoyant(diver),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3742).
% From E: 
% 
% '->'(
%    holds(
%       wearing(Diver,Bc), 
%       Time), 
%    initiates_at(
%       pressInflateButton(Diver,Bc), 
%       neutrallyBuoyant(Diver), 
%       Time)).
 %   [Time].
if(not(initiates(pressInflateButton(Diver,Bc),
		 at(neutrallyBuoyant(Diver),Time))),
   not(holds(wearing(Diver,Bc),Time))).


% [diver,bc,time]
% HoldsAt(Wearing(diver,bc),time) ->
% Terminates(PressInflateButton(diver,bc),PositivelyBuoyant(diver),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3746).
% From E: 
% 
% '->'(
%    holds(
%       wearing(Diver,Bc), 
%       Time), 
%    terminates_at(
%       pressInflateButton(Diver,Bc), 
%       positivelyBuoyant(Diver), 
%       Time)).
 %   [Time].
if(not(terminates(pressInflateButton(Diver,Bc),
		  at(positivelyBuoyant(Diver),Time))),
   not(holds(wearing(Diver,Bc),Time))).


% [diver,bc,time]
% HoldsAt(Wearing(diver,bc),time) ->
% Terminates(PressInflateButton(diver,bc),NegativelyBuoyant(diver),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3750).
% From E: 
% 
% '->'(
%    holds(
%       wearing(Diver,Bc), 
%       Time), 
%    terminates_at(
%       pressInflateButton(Diver,Bc), 
%       negativelyBuoyant(Diver), 
%       Time)).
 %   [Time].
if(not(terminates(pressInflateButton(Diver,Bc),
		  at(negativelyBuoyant(Diver),Time))),
   not(holds(wearing(Diver,Bc),Time))).


% [diver,weight,time]
% HoldsAt(Wearing(diver,weight),time) ->
% Initiates(TakeOff(diver,weight),PositivelyBuoyant(diver),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3754).
% From E: 
% 
% '->'(
%    holds(
%       wearing(Diver,Weight), 
%       Time), 
%    initiates_at(
%       takeOff(Diver,Weight), 
%       positivelyBuoyant(Diver), 
%       Time)).
 %   [Time].
if(not(initiates(takeOff(Diver,Weight),
		 at(positivelyBuoyant(Diver),Time))),
   not(holds(wearing(Diver,Weight),Time))).


% [diver,weight,time]
% HoldsAt(Wearing(diver,weight),time) ->
% Terminates(TakeOff(diver,weight),NegativelyBuoyant(diver),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3758).
% From E: 
% 
% '->'(
%    holds(
%       wearing(Diver,Weight), 
%       Time), 
%    terminates_at(
%       takeOff(Diver,Weight), 
%       negativelyBuoyant(Diver), 
%       Time)).
 %   [Time].
if(not(terminates(takeOff(Diver,Weight),
		  at(negativelyBuoyant(Diver),Time))),
   not(holds(wearing(Diver,Weight),Time))).


% [diver,weight,time]
% HoldsAt(Wearing(diver,weight),time) ->
% Terminates(TakeOff(diver,weight),NeutrallyBuoyant(diver),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3762).
% From E: 
% 
% '->'(
%    holds(
%       wearing(Diver,Weight), 
%       Time), 
%    terminates_at(
%       takeOff(Diver,Weight), 
%       neutrallyBuoyant(Diver), 
%       Time)).
 %   [Time].
if(not(terminates(takeOff(Diver,Weight),
		  at(neutrallyBuoyant(Diver),Time))),
   not(holds(wearing(Diver,Weight),Time))).

% fluent UncontrolledBuoyancy(diver)
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3764).
% From E: 
% 
% fluent(uncontrolledBuoyancy(diver)).
mpred_prop(uncontrolledBuoyancy(diver), fluent).
fluents([uncontrolledBuoyancy/1]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3767).
% event LoseBuoyancyControl(diver)
% From E: 
% 
% event(loseBuoyancyControl(diver)).
events([loseBuoyancyControl/1]).
mpred_prop(loseBuoyancyControl(diver), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3767).
actions([loseBuoyancyControl/1]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3769).
% predicate IsInexperiencedDiver(diver)
% From E: 
% 
% predicate(isInexperiencedDiver(diver)).
mpred_prop(isInexperiencedDiver(diver), predicate).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3769).
predicates([isInexperiencedDiver/1]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3771).
% [diver,time]
% Happens(LoseBuoyancyControl(diver),time) ->
% IsInexperiencedDiver(diver).
% From E: 
% 
% '->'(
%    happens(
%       loseBuoyancyControl(Diver), 
%       Time), 
%    isInexperiencedDiver(Diver)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3771).
if(not(isInexperiencedDiver(Diver)),
   not(loseBuoyancyControl(Diver))).


% [diver,time]
% Initiates(LoseBuoyancyControl(diver),UncontrolledBuoyancy(diver),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3776).
% From E: 
% 
% initiates_at(
%    loseBuoyancyControl(Diver), 
%    uncontrolledBuoyancy(Diver), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3776).
initiates(loseBuoyancyControl(Diver),
	  uncontrolledBuoyancy(Diver)).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3778).
% [diver,time]
% Initiates(LoseBuoyancyControl(diver),PositivelyBuoyant(diver),time).
% From E: 
% 
% initiates_at(
%    loseBuoyancyControl(Diver), 
%    positivelyBuoyant(Diver), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3778).
initiates(loseBuoyancyControl(Diver),
	  positivelyBuoyant(Diver)).


% [diver,time]
% Terminates(LoseBuoyancyControl(diver),NegativelyBuoyant(diver),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3782).
% From E: 
% 
% terminates_at(
%    loseBuoyancyControl(Diver), 
%    negativelyBuoyant(Diver), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3782).
terminates(loseBuoyancyControl(Diver),
	   negativelyBuoyant(Diver)).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3784).
% [diver,time]
% Terminates(LoseBuoyancyControl(diver),NeutrallyBuoyant(diver),time).
% From E: 
% 
% terminates_at(
%    loseBuoyancyControl(Diver), 
%    neutrallyBuoyant(Diver), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3784).
terminates(loseBuoyancyControl(Diver),
	   neutrallyBuoyant(Diver)).


%; determining fluent

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3788).
% fluent AscendDescendAmount(diver,depth)
% From E: 
% 
% fluent(ascendDescendAmount(diver,depth)).
mpred_prop(ascendDescendAmount(diver, depth), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3788).
fluents([ascendDescendAmount/2]).

% noninertial AscendDescendAmount
% From E: 
% 
% ':-'(call_pel_directive(noninertial(ascendDescendAmount))).
:- call_pel_directive(noninertial(ascendDescendAmount)).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3791).
% [diver,depth1,depth2,time]
% HoldsAt(AscendDescendAmount(diver,depth1),time) &
% HoldsAt(AscendDescendAmount(diver,depth2),time) ->
% depth1=depth2.
% From E: 
% 
% '->'(
%    ','(
%       holds(
%          ascendDescendAmount(Diver,Depth1), 
%          Time), 
%       holds(
%          ascendDescendAmount(Diver,Depth2), 
%          Time)), 
%    Depth1=Depth2).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3791).
 if(not(equals(Depth1, Depth2)),
       (not(ascendDescendAmount(Diver, Depth1));not(ascendDescendAmount(Diver, Depth2)))).


% [diver,depth,time]
% Happens(Descend(diver,depth),time) ->
% HoldsAt(NegativelyBuoyant(diver),time) &
% ({depth1}
%  HoldsAt(AscendDescendAmount(diver,depth1),time) &
%  HoldsAt(AtDepth(diver,depth-depth1),time)).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3797).
% From E: 
% 
% '->'(
%    happens(
%       descend(Diver,Depth), 
%       Time), 
%    ','(
%       holds(
%          negativelyBuoyant(Diver), 
%          Time), 
%       thereExists(Depth1, 
%          ','(
%             holds(
%                ascendDescendAmount(Diver,Depth1), 
%                Time), 
%             holds(
%                atDepth(Diver,Depth-Depth1), 
%                Time))))).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3797).
if((not(negativelyBuoyant(Diver));not(thereExists(Depth1,  (ascendDescendAmount(Diver, Depth1), atDepth(Diver, Depth-Depth1))))), not(descend(Diver, Depth))).

% event KickUp(diver)
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3802).
% From E: 
% 
% event(kickUp(diver)).
events([kickUp/1]).
mpred_prop(kickUp(diver), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3802).
actions([kickUp/1]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3805).
% [diver,depth,time]
% Happens(Ascend(diver,depth),time) ->
% (HoldsAt(PositivelyBuoyant(diver),time) |
%  (HoldsAt(NeutrallyBuoyant(diver),time) & Happens(KickUp(diver),time))) &
% ({depth1}
%  HoldsAt(AscendDescendAmount(diver,depth1),time) &
%  HoldsAt(AtDepth(diver,depth+depth1),time)).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3805).
% From E: 
% 
% '->'(
%    happens(
%       ascend(Diver,Depth), 
%       Time), 
%    ','(
%       ';'(
%          holds(
%             positivelyBuoyant(Diver), 
%             Time), 
%          ','(
%             holds(
%                neutrallyBuoyant(Diver), 
%                Time), 
%             happens(
%                kickUp(Diver), 
%                Time))), 
%       thereExists(Depth1, 
%          ','(
%             holds(
%                ascendDescendAmount(Diver,Depth1), 
%                Time), 
%             holds(
%                atDepth(Diver,Depth+Depth1), 
%                Time))))).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3805).
if((not(positivelyBuoyant(Diver)), (not(neutrallyBuoyant(Diver));not(kickUp(Diver)));not(thereExists(Depth1,  (ascendDescendAmount(Diver, Depth1), atDepth(Diver, Depth+Depth1))))), not(ascend(Diver, Depth))).


% [diver,time]
% Happens(KickUp(diver),time) ->
% HoldsAt(Vertical(diver),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3814).
% From E: 
% 
% '->'(
%    happens(
%       kickUp(Diver), 
%       Time), 
%    holds(
%       vertical(Diver), 
%       Time)).
 %   [Time].
if(not(vertical(Diver)),not(kickUp(Diver))).

% event SwimAround(diver)
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3816).
% From E: 
% 
% event(swimAround(diver)).
events([swimAround/1]).
mpred_prop(swimAround(diver), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3816).
actions([swimAround/1]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3819).
% [diver,time]
% Happens(SwimAround(diver),time) ->
% HoldsAt(HorizontalDown(diver),time).
% From E: 
% 
% '->'(
%    happens(
%       swimAround(Diver), 
%       Time), 
%    holds(
%       horizontalDown(Diver), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3819).
if(not(horizontalDown(Diver)),not(swimAround(Diver))).


%; signaling

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3825).
% event SignalDescend(diver,diver)
% From E: 
% 
% event(signalDescend(diver,diver)).
events([signalDescend/2]).
mpred_prop(signalDescend(diver, diver), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3825).
actions([signalDescend/2]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3827).
% event SignalOutOfTime(diver,diver)
% From E: 
% 
% event(signalOutOfTime(diver,diver)).
events([signalOutOfTime/2]).
mpred_prop(signalOutOfTime(diver, diver), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3827).
actions([signalOutOfTime/2]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3829).
% event SignalAscend(diver,diver)
% From E: 
% 
% event(signalAscend(diver,diver)).
events([signalAscend/2]).
mpred_prop(signalAscend(diver, diver), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3829).
actions([signalAscend/2]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3831).
%;[diver1,diver2,time]
%;Happens(SignalAscend(diver1,diver2),time) ->
%;Happens(SignalOutOfTime(diver1,diver2),time-1).
%;[diver1,diver2,time]
%;Happens(SignalDescend(diver1,diver2),time) ->
%;HoldsAt(See(diver1,diver2),time) &
%;HoldsAt(See(diver2,diver1),time).
%;[diver1,diver2,time]
%;Happens(SignalOutOfTime(diver1,diver2),time) ->
%;HoldsAt(See(diver1,diver2),time) &
%;HoldsAt(See(diver2,diver1),time).
%;[diver1,diver2,time]
%;Happens(SignalAscend(diver1,diver2),time) ->
%;HoldsAt(See(diver1,diver2),time) &
%;HoldsAt(See(diver2,diver1),time).
%;event LookAt(agent,object)
%;fluent See(agent,object)
%;[agent,object,time]
%;Initiates(LookAt(agent,object),See(agent,object),time).
%;[agent,object1,object2,time]
%;object1!=object2 ->
%;Terminates(LookAt(agent,object1),
%;           See(agent,object2),
%;           time).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3863).
% event Descend1(diver)
% From E: 
% 
% event(descend1(diver)).
events([descend1/1]).
mpred_prop(descend1(diver), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3863).
actions([descend1/1]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3865).
% event Ascend1(diver)
% From E: 
% 
% event(ascend1(diver)).
events([ascend1/1]).
mpred_prop(ascend1(diver), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3865).
actions([ascend1/1]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3867).
%;[diver,object,time]
%;Terminates(Descend1(diver),See(diver,object),time).
%;[diver,object,time]
%;Terminates(Ascend1(diver),See(diver,object),time).
%;[diver,object,time]
%;Terminates(RotateYaw(diver),See(diver,object),time).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3876).
% event RapidAscendToSurface(diver)
% From E: 
% 
% event(rapidAscendToSurface(diver)).
events([rapidAscendToSurface/1]).
mpred_prop(rapidAscendToSurface(diver), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3876).
actions([rapidAscendToSurface/1]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3878).
% [diver,time]
% Happens(Descend1(diver),time) <->
% ({depth} Happens(Descend(diver,depth),time)).
% From E: 
% 
% <->(
%    happens(
%       descend1(Diver), 
%       Time), 
%    thereExists(Depth, 
%       happens(
%          descend(Diver,Depth), 
%          Time))).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3878).
if(not(thereExists(Depth, descend(Diver, Depth))), not(descend1(Diver))),
if(not(descend1(Diver)), not(thereExists(Depth, descend(Diver, Depth)))).


% [diver,time]
% Happens(Ascend1(diver),time) <->
% ({depth} Happens(Ascend(diver,depth),time)).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3883).
% From E: 
% 
% <->(
%    happens(
%       ascend1(Diver), 
%       Time), 
%    thereExists(Depth, 
%       happens(
%          ascend(Diver,Depth), 
%          Time))).
 %   [Time].
if(not(thereExists(Depth, ascend(Diver, Depth))), not(ascend1(Diver))),
if(not(ascend1(Diver)), not(thereExists(Depth, ascend(Diver, Depth)))).


% [diver,time]
% Happens(RapidAscendToSurface(diver),time) ->
% Happens(Ascend(diver,0),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3887).
% From E: 
% 
% '->'(
%    happens(
%       rapidAscendToSurface(Diver), 
%       Time), 
%    happens(
%       ascend(Diver,0), 
%       Time)).
 %   [Time].
if(not(ascend(Diver,0)),not(rapidAscendToSurface(Diver))).

% event AscendLine(diver,line)
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3889).
% From E: 
% 
% event(ascendLine(diver,line)).
events([ascendLine/2]).
mpred_prop(ascendLine(diver, line), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3889).
actions([ascendLine/2]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3892).
% [diver,line,time]
% Happens(AscendLine(diver,line),time) ->
% Happens(Ascend1(diver),time).
% From E: 
% 
% '->'(
%    happens(
%       ascendLine(Diver,Line), 
%       Time), 
%    happens(
%       ascend1(Diver), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3892).
if(not(ascend1(Diver)),not(ascendLine(Diver,Line))).

% fluent Disoriented(diver)
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3895).
% From E: 
% 
% fluent(disoriented(diver)).
mpred_prop(disoriented(diver), fluent).
fluents([disoriented/1]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3898).
% event BecomeDisoriented(diver)
% From E: 
% 
% event(becomeDisoriented(diver)).
events([becomeDisoriented/1]).
mpred_prop(becomeDisoriented(diver), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3898).
actions([becomeDisoriented/1]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3900).
% event BecomeReoriented(diver)
% From E: 
% 
% event(becomeReoriented(diver)).
events([becomeReoriented/1]).
mpred_prop(becomeReoriented(diver), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3900).
actions([becomeReoriented/1]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3902).
% [diver,time]
% Initiates(BecomeDisoriented(diver),Disoriented(diver),time).
% From E: 
% 
% initiates_at(
%    becomeDisoriented(Diver), 
%    disoriented(Diver), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3902).
initiates(becomeDisoriented(Diver),disoriented(Diver)).


% [diver,time]
% Terminates(BecomeReoriented(diver),Disoriented(diver),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3906).
% From E: 
% 
% terminates_at(
%    becomeReoriented(Diver), 
%    disoriented(Diver), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3906).
terminates(becomeReoriented(Diver),disoriented(Diver)).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3908).
% fluent DisturbedSilt()
% From E: 
% 
% fluent(disturbedSilt()).
mpred_prop(disturbedSilt(), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3908).
fluents([disturbedSilt/0]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3910).
% event DisturbSilt(diver)
% From E: 
% 
% event(disturbSilt(diver)).
events([disturbSilt/1]).
mpred_prop(disturbSilt(diver), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3910).
actions([disturbSilt/1]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3912).
% [diver,time]
% Initiates(DisturbSilt(diver),DisturbedSilt(),time).
% From E: 
% 
% initiates_at(
%    disturbSilt(Diver), 
%    disturbedSilt(), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3912).
initiates(disturbSilt(Diver),disturbedSilt()).


% [diver,time]
% Happens(BecomeDisoriented(diver),time) ->
% (!HoldsAt(DisturbedSilt(),time-1) &
%  HoldsAt(DisturbedSilt(),time)).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3916).
% From E: 
% 
% '->'(
%    happens(
%       becomeDisoriented(Diver), 
%       Time), 
%    ','(
%       holds(
%          not(disturbedSilt()), 
%          Time-1), 
%       holds(disturbedSilt(),Time))).
 %   [Time, Time-1].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3916).
 if((holds(disturbedSilt(), Time-1);not(holds(disturbedSilt(), Time))),
      not(holds(becomeDisoriented(Diver), Time))).

% event Panic(diver)
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3919).
% From E: 
% 
% event(panic(diver)).
events([panic/1]).
mpred_prop(panic(diver), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3919).
actions([panic/1]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3922).
% [diver,time]
 % Happens(Panic(diver),time) ->
% HoldsAt(Disoriented(diver),time) |
% HoldsAt(UncontrolledBuoyancy(diver),time) |
% ({equipment} Happens(Lose(diver,equipment),time-1)) |
% Happens(Vomit(diver),time-1).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3922).
% From E: 
% 
% '->'(
%    happens(
%       panic(Diver), 
%       Time), 
%    ';'(
%       holds(
%          disoriented(Diver), 
%          Time), 
%       ';'(
%          holds(
%             uncontrolledBuoyancy(Diver), 
%             Time), 
%          ';'(
%             thereExists(Equipment, 
%                happens(
%                   lose(Diver,Equipment), 
%                   Time-1)), 
%             happens(
%                vomit(Diver), 
%                Time-1))))).
 %   [Time, Time-1].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3922).
if((not(holds(disoriented(Diver), Time)), not(holds(uncontrolledBuoyancy(Diver), Time)), not(thereExists(Equipment, at(lose(Diver, Equipment), Time-1))), not(holds(vomit(Diver), Time-1))), not(holds(panic(Diver), Time))).

% event Vomit(diver)
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3927).
% From E: 
% 
% event(vomit(diver)).
events([vomit/1]).
mpred_prop(vomit(diver), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3927).
actions([vomit/1]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3930).
%; conditions

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3932).
% fluent Unconscious(diver)
% From E: 
% 
% fluent(unconscious(diver)).
mpred_prop(unconscious(diver), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3932).
fluents([unconscious/1]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3934).
% event GoUnconscious(diver)
% From E: 
% 
% event(goUnconscious(diver)).
events([goUnconscious/1]).
mpred_prop(goUnconscious(diver), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3934).
actions([goUnconscious/1]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3936).
% event RegainConsciousness(diver)
% From E: 
% 
% event(regainConsciousness(diver)).
events([regainConsciousness/1]).
mpred_prop(regainConsciousness(diver), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3936).
actions([regainConsciousness/1]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3938).
% [diver,time]
% Initiates(GoUnconscious(diver),Unconscious(diver),time).
% From E: 
% 
% initiates_at(
%    goUnconscious(Diver), 
%    unconscious(Diver), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3938).
initiates(goUnconscious(Diver),unconscious(Diver)).


% [diver,time]
% Terminates(RegainConsciousness(diver),Unconscious(diver),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3942).
% From E: 
% 
% terminates_at(
%    regainConsciousness(Diver), 
%    unconscious(Diver), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3942).
terminates(regainConsciousness(Diver),unconscious(Diver)).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3944).
% [diver,time]
% Happens(GoUnconscious(diver),time) ->
% Happens(RapidAscendToSurface(diver),time).
% From E: 
% 
% '->'(
%    happens(
%       goUnconscious(Diver), 
%       Time), 
%    happens(
%       rapidAscendToSurface(Diver), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3944).
if(not(rapidAscendToSurface(Diver)),
   not(goUnconscious(Diver))).

% fluent HasEarPain(diver)
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3947).
% From E: 
% 
% fluent(hasEarPain(diver)).
mpred_prop(hasEarPain(diver), fluent).
fluents([hasEarPain/1]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3950).
% event StartEarPain(diver)
% From E: 
% 
% event(startEarPain(diver)).
events([startEarPain/1]).
mpred_prop(startEarPain(diver), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3950).
actions([startEarPain/1]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3952).
% [diver,time]
 % Initiates(StartEarPain(diver),HasEarPain(diver),time).
% From E: 
% 
% initiates_at(
%    startEarPain(Diver), 
%    hasEarPain(Diver), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3952).
initiates(startEarPain(Diver),hasEarPain(Diver)).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3954).
% fluent HasRupturedEardrum(diver)
% From E: 
% 
% fluent(hasRupturedEardrum(diver)).
mpred_prop(hasRupturedEardrum(diver), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3954).
fluents([hasRupturedEardrum/1]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3956).
% event RuptureEardrum(diver)
% From E: 
% 
% event(ruptureEardrum(diver)).
events([ruptureEardrum/1]).
mpred_prop(ruptureEardrum(diver), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3956).
actions([ruptureEardrum/1]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3958).
% [diver,time]
% Initiates(RuptureEardrum(diver),HasRupturedEardrum(diver),time).
% From E: 
% 
% initiates_at(
%    ruptureEardrum(Diver), 
%    hasRupturedEardrum(Diver), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3958).
initiates(ruptureEardrum(Diver),hasRupturedEardrum(Diver)).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3960).
% fluent ConditionOK(diver)
% From E: 
% 
% fluent(conditionOK(diver)).
mpred_prop(conditionOK(diver), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3960).
fluents([conditionOK/1]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3962).
% fluent HasDecompressionIllness(diver)
% From E: 
% 
% fluent(hasDecompressionIllness(diver)).
mpred_prop(hasDecompressionIllness(diver), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3962).
fluents([hasDecompressionIllness/1]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3964).
% event StartDecompressionIllness(diver)
% From E: 
% 
% event(startDecompressionIllness(diver)).
events([startDecompressionIllness/1]).
mpred_prop(startDecompressionIllness(diver), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3964).
actions([startDecompressionIllness/1]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3966).
% [diver,time]
% Initiates(StartDecompressionIllness(diver),
%           HasDecompressionIllness(diver),
%           time).
% From E: 
% 
% initiates_at(
%    startDecompressionIllness(Diver), 
%    hasDecompressionIllness(Diver), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3966).
initiates(startDecompressionIllness(Diver),
	  hasDecompressionIllness(Diver)).

% fluent SignalingDecompress(computer,diver)
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3970).
% From E: 
% 
% fluent(signalingDecompress(computer,diver)).
mpred_prop(signalingDecompress(computer, diver), fluent).
fluents([signalingDecompress/2]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3973).
% fluent SignalingLowOnAir(computer,airtank,diver)
% From E: 
% 
% fluent(signalingLowOnAir(computer,airtank,diver)).
mpred_prop(signalingLowOnAir(computer, airtank, diver), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3973).
fluents([signalingLowOnAir/3]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3975).
% [computer,airtank,diver,time]
% HoldsAt(SignalingLowOnAir(computer,airtank,diver),time) ->
% HoldsAt(LowOnAir(airtank),time).
% From E: 
% 
% '->'(
%    holds(
%       signalingLowOnAir(Computer,Airtank,Diver), 
%       Time), 
%    holds(
%       lowOnAir(Airtank), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3975).
if(not(lowOnAir(Airtank)),
   not(signalingLowOnAir(Computer,Airtank,Diver))).


% [computer,diver,time]
% HoldsAt(SignalingDecompress(computer,diver),time) ->
% !{time1} time1<time & Happens(Decompress(diver),time1).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3980).
% From E: 
% 
% '->'(
%    holds(
%       signalingDecompress(Computer,Diver), 
%       Time), 
%    not(thereExists(Time1, 
%           ','(
%              Time1<Time, 
%              happens(
%                 decompress(Diver), 
%                 Time1))))).
 %   [Time, Time1].
if(thereExists(Time1,  (comparison(Time1, Time, <), loc_at(decompress(Diver), Time1))), not(holds(signalingDecompress(Computer, Diver), Time))).

% event Decompress(diver)
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3982).
% From E: 
% 
% event(decompress(diver)).
events([decompress/1]).
mpred_prop(decompress(diver), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3982).
actions([decompress/1]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3985).
% event EqualizeEars(diver)
% From E: 
% 
% event(equalizeEars(diver)).
events([equalizeEars/1]).
mpred_prop(equalizeEars(diver), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3985).
actions([equalizeEars/1]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3987).
% [diver,time]
% (Happens(Descend1(diver),time) | Happens(Ascend1(diver),time)) &
% !Happens(EqualizeEars(diver),time) ->
% Happens(StartEarPain(diver),time) &
% Happens(RuptureEardrum(diver),time).
% From E: 
% 
% '->'(
%    ','(
%       ';'(
%          happens(
%             descend1(Diver), 
%             Time), 
%          happens(
%             ascend1(Diver), 
%             Time)), 
%       not(happens(
%              equalizeEars(Diver), 
%              Time))), 
%    ','(
%       happens(
%          startEarPain(Diver), 
%          Time), 
%       happens(
%          ruptureEardrum(Diver), 
%          Time))).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3987).
if((not(startEarPain(Diver));not(ruptureEardrum(Diver))),  (not(descend1(Diver)), not(ascend1(Diver));equalizeEars(Diver))).


% [diver,time]
% Happens(Ascend1(diver),time) &
% !Happens(Decompress(diver),time) ->
% Happens(StartDecompressionIllness(diver),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3994).
% From E: 
% 
% '->'(
%    ','(
%       happens(
%          ascend1(Diver), 
%          Time), 
%       not(happens(
%              decompress(Diver), 
%              Time))), 
%    happens(
%       startDecompressionIllness(Diver), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3994).
 if(not(startDecompressionIllness(Diver)),
       (not(ascend1(Diver));decompress(Diver))).


% [diver1,diver2,time]
% HoldsAt(Holding(diver1,diver2),time) &
% Happens(Ascend1(diver1),time) &
% !Happens(Decompress(diver2),time) ->
% Happens(StartDecompressionIllness(diver2),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3999).
% From E: 
% 
% '->'(
%    ','(
%       holds(
%          holding(Diver1,Diver2), 
%          Time), 
%       ','(
%          happens(
%             ascend1(Diver1), 
%             Time), 
%          not(happens(
%                 decompress(Diver2), 
%                 Time)))), 
%    happens(
%       startDecompressionIllness(Diver2), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',3999).
 if(not(startDecompressionIllness(Diver2)),
       (not(holding(Diver1, Diver2));not(ascend1(Diver1));decompress(Diver2))).


% [diver,time]
% Happens(Decompress(diver),time) ->
% ({depth} depth>0 & HoldsAt(AtDepth(diver,depth),time)) &
% !HoldsAt(UncontrolledBuoyancy(diver),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4005).
% From E: 
% 
% '->'(
%    happens(
%       decompress(Diver), 
%       Time), 
%    ','(
%       thereExists(Depth, 
%          ','(
%             Depth>0, 
%             holds(
%                atDepth(Diver,Depth), 
%                Time))), 
%       holds(
%          not(uncontrolledBuoyancy(Diver)), 
%          Time))).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4005).
if((not(thereExists(Depth,  (comparison(Depth, 0, >), atDepth(Diver, Depth))));uncontrolledBuoyancy(Diver)), not(decompress(Diver))).

% fluent HasHeadache(diver)
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4008).
% From E: 
% 
% fluent(hasHeadache(diver)).
mpred_prop(hasHeadache(diver), fluent).
fluents([hasHeadache/1]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4011).
% [diver,time]
% HoldsAt(ConditionOK(diver),time) ->
% !HoldsAt(Unconscious(diver),time) &
% !HoldsAt(HasEarPain(diver),time) &
% !HoldsAt(HasRupturedEardrum(diver),time) &
% !HoldsAt(HasDecompressionIllness(diver),time) &
% !HoldsAt(HasHeadache(diver),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4011).
% From E: 
% 
% '->'(
%    holds(
%       conditionOK(Diver), 
%       Time), 
%    ','(
%       holds(
%          not(unconscious(Diver)), 
%          Time), 
%       ','(
%          holds(
%             not(hasEarPain(Diver)), 
%             Time), 
%          ','(
%             holds(
%                not(hasRupturedEardrum(Diver)), 
%                Time), 
%             ','(
%                holds(
%                   not(hasDecompressionIllness(Diver)), 
%                   Time), 
%                holds(
%                   not(hasHeadache(Diver)), 
%                   Time)))))).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4011).
 if((unconscious(Diver);hasEarPain(Diver);hasRupturedEardrum(Diver);hasDecompressionIllness(Diver);hasHeadache(Diver)),
      not(conditionOK(Diver))).

% event BeAirlifted(diver)
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4018).
% From E: 
% 
% event(beAirlifted(diver)).
events([beAirlifted/1]).
mpred_prop(beAirlifted(diver), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4018).
actions([beAirlifted/1]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4021).
% event TakeInWater(diver)
% From E: 
% 
% event(takeInWater(diver)).
events([takeInWater/1]).
mpred_prop(takeInWater(diver), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4021).
actions([takeInWater/1]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4023).
% fluent LowOnAir(airtank)
% From E: 
% 
% fluent(lowOnAir(airtank)).
mpred_prop(lowOnAir(airtank), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4023).
fluents([lowOnAir/1]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4025).
% event BecomeLowOnAir(airtank)
% From E: 
% 
% event(becomeLowOnAir(airtank)).
mpred_prop(becomeLowOnAir(airtank), event).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4025).
events([becomeLowOnAir/1]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4027).
% [airtank,time]
% Initiates(BecomeLowOnAir(airtank),LowOnAir(airtank),time).
% From E: 
% 
% initiates_at(
%    becomeLowOnAir(Airtank), 
%    lowOnAir(Airtank), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4027).
initiates(becomeLowOnAir(Airtank),lowOnAir(Airtank)).


%; initial state
% [diver]
 % HoldsAt(ConditionOK(diver),0).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4031).
% From E: 
% 
% holds(
%    conditionOK(Diver), 0).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4031).
initially(conditionOK(Diver)).


% [diver]
 % HoldsAt(Vertical(diver),0).
% From E: 
% 
% holds(
%    vertical(Diver), 0).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4031).
initially(vertical(Diver)).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4033).
% !HoldsAt(DisturbedSilt(),0).
% From E: 
% 
% holds(
%    not(disturbedSilt()), 0).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4033).
initially(not(disturbedSilt())).


% [diver]
 % !HoldsAt(UncontrolledBuoyancy(diver),0).
% From E: 
% 
% holds(
%    not(uncontrolledBuoyancy(Diver)), 0).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4033).
initially(not(uncontrolledBuoyancy(Diver))).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4035).
% [diver]
 % !HoldsAt(Disoriented(diver),0).
% From E: 
% 
% holds(
%    not(disoriented(Diver)), 0).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4035).
initially(not(disoriented(Diver))).


% [diver]
 % !HoldsAt(PositivelyBuoyant(diver),0) &
%         !HoldsAt(NeutrallyBuoyant(diver),0) &
%         !HoldsAt(NegativelyBuoyant(diver),0).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4035).
% From E: 
% 
% ','(
%    holds(
%       not(positivelyBuoyant(Diver)), 0), 
%    ','(
%       holds(
%          not(neutrallyBuoyant(Diver)), 0), 
%       holds(
%          not(negativelyBuoyant(Diver)), 0))).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4035).
initially(not(positivelyBuoyant(Diver))),
initially(not(neutrallyBuoyant(Diver))),
initially(not(negativelyBuoyant(Diver))).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4039).
% [diver,object]
 % !HoldsAt(Wearing(diver,object),0).
% From E: 
% 
% holds(
%    not(wearing(Diver,Object)), 0).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4039).
initially(not(wearing(Diver,Object))).


% [diver,object]
 % !HoldsAt(Holding(diver,object),0).
% From E: 
% 
% holds(
%    not(holding(Diver,Object)), 0).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4039).
initially(not(holding(Diver,Object))).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4041).
% [diver1,diver2]
 % !HoldsAt(Separated(diver1,diver2),0).
% From E: 
% 
% holds(
%    not(separated(Diver1,Diver2)), 0).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4041).
initially(not(separated(Diver1,Diver2))).


%;[agent,object] !HoldsAt(See(agent,object),0).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4044).
% fluent Separated(diver,diver)
% From E: 
% 
% fluent(separated(diver,diver)).
mpred_prop(separated(diver, diver), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4044).
fluents([separated/2]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4046).
% [diver1,diver2,time]
% HoldsAt(Separated(diver1,diver2),time) ->
% HoldsAt(Separated(diver2,diver1),time).
% From E: 
% 
% '->'(
%    holds(
%       separated(Diver1,Diver2), 
%       Time), 
%    holds(
%       separated(Diver2,Diver1), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4046).
if(not(separated(Diver2,Diver1)),
   not(separated(Diver1,Diver2))).

% event BecomeSeparated(diver,diver)
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4049).
% From E: 
% 
% event(becomeSeparated(diver,diver)).
events([becomeSeparated/2]).
mpred_prop(becomeSeparated(diver, diver), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4049).
actions([becomeSeparated/2]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4052).
% event BeReunitedWith(diver,diver)
% From E: 
% 
% event(beReunitedWith(diver,diver)).
events([beReunitedWith/2]).
mpred_prop(beReunitedWith(diver, diver), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4052).
actions([beReunitedWith/2]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4054).
% [diver1,diver2,time]
% Initiates(BecomeSeparated(diver1,diver2),Separated(diver1,diver2),time).
% From E: 
% 
% initiates_at(
%    becomeSeparated(Diver1,Diver2), 
%    separated(Diver1,Diver2), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4054).
initiates(becomeSeparated(Diver1,Diver2),
	  separated(Diver1,Diver2)).


% [diver1,diver2,time]
% Initiates(BecomeSeparated(diver1,diver2),Separated(diver2,diver1),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4058).
% From E: 
% 
% initiates_at(
%    becomeSeparated(Diver1,Diver2), 
%    separated(Diver2,Diver1), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4058).
initiates(becomeSeparated(Diver1,Diver2),
	  separated(Diver2,Diver1)).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4060).
% [diver1,diver2,time]
% Terminates(BeReunitedWith(diver1,diver2),Separated(diver1,diver2),time).
% From E: 
% 
% terminates_at(
%    beReunitedWith(Diver1,Diver2), 
%    separated(Diver1,Diver2), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4060).
terminates(beReunitedWith(Diver1,Diver2),
	   separated(Diver1,Diver2)).


% [diver1,diver2,time]
% Terminates(BeReunitedWith(diver1,diver2),Separated(diver2,diver1),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4064).
% From E: 
% 
% terminates_at(
%    beReunitedWith(Diver1,Diver2), 
%    separated(Diver2,Diver1), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4064).
terminates(beReunitedWith(Diver1,Diver2),
	   separated(Diver2,Diver1)).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4066).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: ecnet/Dress.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; Dress
%; (cf Sleep)
%;

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4088).
% event PutOn(agent,clothing)
% From E: 
% 
% event(putOn(agent,clothing)).
events([putOn/2]).
mpred_prop(putOn(agent, clothing), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4088).
actions([putOn/2]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4090).
% event TakeOff(agent,clothing)
% From E: 
% 
% event(takeOff(agent,clothing)).
events([takeOff/2]).
mpred_prop(takeOff(agent, clothing), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4090).
actions([takeOff/2]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4092).
% fluent Wearing(agent,clothing)
% From E: 
% 
% fluent(wearing(agent,clothing)).
mpred_prop(wearing(agent, clothing), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4092).
fluents([wearing/2]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4094).
% [agent,clothing,time]
% Initiates(PutOn(agent,clothing),
%           Wearing(agent,clothing),
%           time).
% From E: 
% 
% initiates_at(
%    putOn(Agent,Clothing), 
%    wearing(Agent,Clothing), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4094).
initiates(putOn(Agent,Clothing),
	  wearing(Agent,Clothing)).


% [agent,clothing,time]
% Happens(PutOn(agent,clothing),time) ->
% !HoldsAt(Wearing(agent,clothing),time) &
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4100).
% {location}%  HoldsAt(At(agent,location),time) &
%            HoldsAt(At(clothing,location),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4102).
% From E: 
% 
% exists(Location, 
%    '->'(
%       happens(
%          putOn(Agent,Clothing), 
%          Time), 
%       ','(
%          holds(
%             not(wearing(Agent,Clothing)), 
%             Time), 
%          ','(
%             holds(
%                at_loc(Agent,Location), 
%                Time), 
%             holds(
%                at_loc(Clothing,Location), 
%                Time))))).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4102).
exists(Location,  (not(wearing(Agent, Clothing)), at_loc(Agent, Location), at_loc(Clothing, Location);not(putOn(Agent, Clothing)))).


% [agent,clothing,time]
% Terminates(TakeOff(agent,clothing),
%            Wearing(agent,clothing),
%            time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4106).
% From E: 
% 
% terminates_at(
%    takeOff(Agent,Clothing), 
%    wearing(Agent,Clothing), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4106).
terminates(takeOff(Agent,Clothing),
	   wearing(Agent,Clothing)).


% [agent,clothing,time]
% Happens(TakeOff(agent,clothing),time) ->
% HoldsAt(Wearing(agent,clothing),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4111).
% From E: 
% 
% '->'(
%    happens(
%       takeOff(Agent,Clothing), 
%       Time), 
%    holds(
%       wearing(Agent,Clothing), 
%       Time)).
 %   [Time].
if(not(wearing(Agent,Clothing)),
   not(takeOff(Agent,Clothing))).


% [agent,clothing,location,time]
% Releases(PutOn(agent,clothing),At(clothing,location),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4115).
% From E: 
% 
% releases_at(
%    putOn(Agent,Clothing), 
%    at_loc(Clothing,Location), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4115).
releases(putOn(Agent,Clothing),
	 at_loc(Clothing,Location)).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4117).
% [agent,clothing,location,time]
% HoldsAt(Wearing(agent,clothing),time) &
% HoldsAt(At(agent,location),time) ->
% HoldsAt(At(clothing,location),time).
% From E: 
% 
% '->'(
%    ','(
%       holds(
%          wearing(Agent,Clothing), 
%          Time), 
%       holds(
%          at_loc(Agent,Location), 
%          Time)), 
%    holds(
%       at_loc(Clothing,Location), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4117).
 if(not(at_loc(Clothing, Location)),
       (not(wearing(Agent, Clothing));not(at_loc(Agent, Location)))).


%;[agent,clothing,location1,location2,time]
%;HoldsAt(At(agent,location1),time) &
%;location1 != location2 ->
%;Terminates(TakeOff(agent,clothing),At(clothing,location2),time).
% [agent,clothing,location,time]
% HoldsAt(At(agent,location),time) ->
% Initiates(TakeOff(agent,clothing),At(clothing,location),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4127).
% From E: 
% 
% '->'(
%    holds(
%       at_loc(Agent,Location), 
%       Time), 
%    initiates_at(
%       takeOff(Agent,Clothing), 
%       at_loc(Clothing,Location), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4127).
if(not(initiates(takeOff(Agent,Clothing),
		 at(at_loc(Clothing,Location),Time))),
   not(holds(at_loc(Agent,Location),Time))).


%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: ecnet/HungerNeed.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; hunger need
%;

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4152).
% fluent Hungry(agent)
% From E: 
% 
% fluent(hungry(agent)).
mpred_prop(hungry(agent), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4152).
fluents([hungry/1]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4154).
% fluent Satiated(agent)
% From E: 
% 
% fluent(satiated(agent)).
mpred_prop(satiated(agent), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4154).
fluents([satiated/1]).

% noninertial Satiated
% From E: 
% 
% ':-'(call_pel_directive(noninertial(satiated))).
:- call_pel_directive(noninertial(satiated)).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4157).
% [agent,time]
 % HoldsAt(Hungry(agent),time) <-> !HoldsAt(Satiated(agent),time).
% From E: 
% 
% <->(
%    holds(
%       hungry(Agent), 
%       Time), 
%    holds(
%       not(satiated(Agent)), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4157).
if(satiated(Agent), not(hungry(Agent))),
if(not(hungry(Agent)), satiated(Agent)).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4159).
% event Eat(agent,food)
% From E: 
% 
% event(eat(agent,food)).
events([eat/2]).
mpred_prop(eat(agent, food), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4159).
actions([eat/2]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4161).
% [agent,food,time]
% Happens(Eat(agent,food),time) ->
% {location}% 
% HoldsAt(At(agent,location),time) &
% HoldsAt(At(food,location),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4163).
% From E: 
% 
% exists(Location, 
%    '->'(
%       happens(
%          eat(Agent,Food), 
%          Time), 
%       ','(
%          holds(
%             at_loc(Agent,Location), 
%             Time), 
%          holds(
%             at_loc(Food,Location), 
%             Time)))).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4163).
exists(Location,  (at_loc(Agent, Location), at_loc(Food, Location);not(eat(Agent, Food)))).


% [agent,food,time]
% Terminates(Eat(agent,food),Hungry(agent),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4168).
% From E: 
% 
% terminates_at(
%    eat(Agent,Food), 
%    hungry(Agent), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4168).
terminates(eat(Agent,Food),hungry(Agent)).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4170).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: ecnet/Restaurant.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4188).
% sort restaurant: script
% From E: 
% 
% subsort(restaurant,script).
subsort(restaurant, script).

% sort waiter: agent
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4188).
% From E: 
% 
% subsort(waiter,agent).
subsort(waiter, agent).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4190).
% sort cook: agent
% From E: 
% 
% subsort(cook,agent).
subsort(cook, agent).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4192).
% function BillOf(restaurant): bill
% From E: 
% 
% function(
%    billOf(restaurant), 
%    bill).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4192).
function(billOf(restaurant),bill).

% function CookOf(restaurant): cook
% From E: 
% 
% function(
%    cookOf(restaurant), 
%    cook).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4192).
function(cookOf(restaurant),cook).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4194).
% function TableOf(restaurant): table
% From E: 
% 
% function(
%    tableOf(restaurant), 
%    table).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4194).
function(tableOf(restaurant),table).

% function WaiterOf(restaurant): waiter
% From E: 
% 
% function(
%    waiterOf(restaurant), 
%    waiter).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4194).
function(waiterOf(restaurant),waiter).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4196).
% function KitchenDoorOf(restaurant): door
% From E: 
% 
% function(
%    kitchenDoorOf(restaurant), 
%    door).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4196).
function(kitchenDoorOf(restaurant),door).
%; awaiting customer/waiter has set down bill on customer's table

% fluent BeWaiter0(waiter)
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4198).
% From E: 
% 
% fluent(beWaiter0(waiter)).
mpred_prop(beWaiter0(waiter), fluent).
fluents([beWaiter0/1]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4201).
%; awaiting customer order

% fluent BeWaiter1(waiter)
% From E: 
% 
% fluent(beWaiter1(waiter)).
mpred_prop(beWaiter1(waiter), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4201).
fluents([beWaiter1/1]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4204).
%; has customer order

% fluent BeWaiter2(waiter)
% From E: 
% 
% fluent(beWaiter2(waiter)).
mpred_prop(beWaiter2(waiter), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4204).
fluents([beWaiter2/1]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4207).
%; in kitchen

% fluent BeWaiter3(waiter)
% From E: 
% 
% fluent(beWaiter3(waiter)).
mpred_prop(beWaiter3(waiter), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4207).
fluents([beWaiter3/1]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4210).
%; awaiting preparation of order

% fluent BeWaiter4(waiter)
% From E: 
% 
% fluent(beWaiter4(waiter)).
mpred_prop(beWaiter4(waiter), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4210).
fluents([beWaiter4/1]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4213).
%; has order

% fluent BeWaiter5(waiter)
% From E: 
% 
% fluent(beWaiter5(waiter)).
mpred_prop(beWaiter5(waiter), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4213).
fluents([beWaiter5/1]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4216).
%; back in dining room

% fluent BeWaiter6(waiter)
% From E: 
% 
% fluent(beWaiter6(waiter)).
mpred_prop(beWaiter6(waiter), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4216).
fluents([beWaiter6/1]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4219).
%; order delivered to customer (can ask if all is OK)

% fluent BeWaiter7(waiter)
% From E: 
% 
% fluent(beWaiter7(waiter)).
mpred_prop(beWaiter7(waiter), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4219).
fluents([beWaiter7/1]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4222).
%; customer has requested bill

% fluent BeWaiter8(waiter)
% From E: 
% 
% fluent(beWaiter8(waiter)).
mpred_prop(beWaiter8(waiter), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4222).
fluents([beWaiter8/1]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4225).
%; waiter is holding bill

% fluent BeWaiter9(waiter)
% From E: 
% 
% fluent(beWaiter9(waiter)).
mpred_prop(beWaiter9(waiter), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4225).
fluents([beWaiter9/1]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4228).
% xor BeWaiter0, BeWaiter1, BeWaiter2, BeWaiter3, BeWaiter4, BeWaiter5, BeWaiter6, BeWaiter7, BeWaiter8, BeWaiter9
% From E: 
% 
% xor([beWaiter0,beWaiter1,beWaiter2,beWaiter3,beWaiter4,beWaiter5,beWaiter6,beWaiter7,beWaiter8,beWaiter9]).
xor([ beWaiter0,
      beWaiter1,
      beWaiter2,
      beWaiter3,
      beWaiter4,
      beWaiter5,
      beWaiter6,
      beWaiter7,
      beWaiter8,
      beWaiter9
    ]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4230).
% [waiter,agent,time]
% HoldsAt(BeWaiter0(waiter),time) ->
% Terminates(Greet(waiter,agent),
%            BeWaiter0(waiter),
%            time).
% From E: 
% 
% '->'(
%    holds(
%       beWaiter0(Waiter), 
%       Time), 
%    terminates_at(
%       greet(Waiter,Agent), 
%       beWaiter0(Waiter), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4230).
if(not(terminates(greet(Waiter,Agent),
		  at(beWaiter0(Waiter),Time))),
   not(holds(beWaiter0(Waiter),Time))).


% [waiter,agent,time]
% HoldsAt(BeWaiter0(waiter),time) ->
% Initiates(Greet(waiter,agent),
%           BeWaiter1(waiter),
%           time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4237).
% From E: 
% 
% '->'(
%    holds(
%       beWaiter0(Waiter), 
%       Time), 
%    initiates_at(
%       greet(Waiter,Agent), 
%       beWaiter1(Waiter), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4237).
if(not(initiates(greet(Waiter,Agent),
		 at(beWaiter1(Waiter),Time))),
   not(holds(beWaiter0(Waiter),Time))).


% [waiter,agent,food,time]
% HoldsAt(BeWaiter1(waiter),time) ->
% Terminates(Order(agent,waiter,food),
%            BeWaiter1(waiter),
%            time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4243).
% From E: 
% 
% '->'(
%    holds(
%       beWaiter1(Waiter), 
%       Time), 
%    terminates_at(
%       order(Agent,Waiter,Food), 
%       beWaiter1(Waiter), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4243).
if(not(terminates(order(Agent,Waiter,Food),
		  at(beWaiter1(Waiter),Time))),
   not(holds(beWaiter1(Waiter),Time))).


% [waiter,agent,food,time]
% HoldsAt(BeWaiter1(waiter),time) ->
% Initiates(Order(agent,waiter,food),
%           BeWaiter2(waiter),
%           time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4249).
% From E: 
% 
% '->'(
%    holds(
%       beWaiter1(Waiter), 
%       Time), 
%    initiates_at(
%       order(Agent,Waiter,Food), 
%       beWaiter2(Waiter), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4249).
if(not(initiates(order(Agent,Waiter,Food),
		 at(beWaiter2(Waiter),Time))),
   not(holds(beWaiter1(Waiter),Time))).


% [restaurant,waiter,time]
% WaiterOf(restaurant)=waiter &
% HoldsAt(BeWaiter2(waiter),time) ->
% Happens(WalkThroughDoor12(waiter,KitchenDoorOf(restaurant)),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4255).
% From E: 
% 
% '->'(
%    ','(
%       '='(
%          waiterOf(Restaurant), 
%          Waiter), 
%       holds(
%          beWaiter2(Waiter), 
%          Time)), 
%    happens(
%       walkThroughDoor12(Waiter, 
%          kitchenDoorOf(Restaurant)), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4255).
 if(not(walkThroughDoor12(Waiter, kitchenDoorOf(Restaurant))),
       (not(waiterOf(Restaurant, Waiter));not(beWaiter2(Waiter)))).


% [restaurant,waiter,door,time]
% HoldsAt(BeWaiter2(waiter),time) &
% WaiterOf(restaurant)=waiter &
% KitchenDoorOf(restaurant)=door ->
% Terminates(WalkThroughDoor12(waiter,door),
%            BeWaiter2(waiter),
%            time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4260).
% From E: 
% 
% '->'(
%    ','(
%       holds(
%          beWaiter2(Waiter), 
%          Time), 
%       ','(
%          '='(
%             waiterOf(Restaurant), 
%             Waiter), 
%          '='(
%             kitchenDoorOf(Restaurant), 
%             Door))), 
%    terminates_at(
%       walkThroughDoor12(Waiter,Door), 
%       beWaiter2(Waiter), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4260).
 if(not(terminates(walkThroughDoor12(Waiter, Door),
                     at(beWaiter2(Waiter), Time))),
       (not(holds(beWaiter2(Waiter), Time));not(waiterOf(Restaurant, Waiter));not(kitchenDoorOf(Restaurant, Door)))).


% [restaurant,waiter,door,time]
% HoldsAt(BeWaiter2(waiter),time) &
% WaiterOf(restaurant)=waiter &
% KitchenDoorOf(restaurant)=door ->
% Initiates(WalkThroughDoor12(waiter,door),
%           BeWaiter3(waiter),
%           time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4268).
% From E: 
% 
% '->'(
%    ','(
%       holds(
%          beWaiter2(Waiter), 
%          Time), 
%       ','(
%          '='(
%             waiterOf(Restaurant), 
%             Waiter), 
%          '='(
%             kitchenDoorOf(Restaurant), 
%             Door))), 
%    initiates_at(
%       walkThroughDoor12(Waiter,Door), 
%       beWaiter3(Waiter), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4268).
 if(not(initiates(walkThroughDoor12(Waiter, Door),
                    at(beWaiter3(Waiter), Time))),
       (not(holds(beWaiter2(Waiter), Time));not(waiterOf(Restaurant, Waiter));not(kitchenDoorOf(Restaurant, Door)))).


% [restaurant,food,time]
% HoldsAt(BeWaiter3(WaiterOf(restaurant)),time) &
% ({agent} HoldsAt(KnowOrder(WaiterOf(restaurant),agent,food),time)) ->
% Happens(Order(WaiterOf(restaurant),CookOf(restaurant),food),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4276).
% From E: 
% 
% '->'(
%    ','(
%       holds(
%          beWaiter3(waiterOf(Restaurant)), 
%          Time), 
%       thereExists(Agent, 
%          holds(
%             knowOrder(
%                waiterOf(Restaurant), 
%                Agent, 
%                Food), 
%             Time))), 
%    happens(
%       order(
%          waiterOf(Restaurant), 
%          cookOf(Restaurant), 
%          Food), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4276).
 if(not(order(waiterOf(Restaurant),
                cookOf(Restaurant),
                Food)),
       (not(beWaiter3(waiterOf(Restaurant)));not(thereExists(Agent, knowOrder(waiterOf(Restaurant), Agent, Food))))).


% [restaurant,waiter,cook,food,time]
% WaiterOf(restaurant)=waiter &
% CookOf(restaurant)=cook &
% HoldsAt(BeWaiter3(waiter),time) ->
% Terminates(Order(waiter,cook,food),
%            BeWaiter3(waiter),
%            time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4281).
% From E: 
% 
% '->'(
%    ','(
%       '='(
%          waiterOf(Restaurant), 
%          Waiter), 
%       ','(
%          '='(
%             cookOf(Restaurant), 
%             Cook), 
%          holds(
%             beWaiter3(Waiter), 
%             Time))), 
%    terminates_at(
%       order(Waiter,Cook,Food), 
%       beWaiter3(Waiter), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4281).
 if(not(terminates(order(Waiter, Cook, Food),
                     at(beWaiter3(Waiter), Time))),
       (not(waiterOf(Restaurant, Waiter));not(cookOf(Restaurant, Cook));not(holds(beWaiter3(Waiter), Time)))).


% [restaurant,waiter,cook,food,time]
% WaiterOf(restaurant)=waiter &
% CookOf(restaurant)=cook &
% HoldsAt(BeWaiter3(waiter),time) ->
% Initiates(Order(waiter,cook,food),
%           BeWaiter4(waiter),
%           time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4289).
% From E: 
% 
% '->'(
%    ','(
%       '='(
%          waiterOf(Restaurant), 
%          Waiter), 
%       ','(
%          '='(
%             cookOf(Restaurant), 
%             Cook), 
%          holds(
%             beWaiter3(Waiter), 
%             Time))), 
%    initiates_at(
%       order(Waiter,Cook,Food), 
%       beWaiter4(Waiter), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4289).
 if(not(initiates(order(Waiter, Cook, Food),
                    at(beWaiter4(Waiter), Time))),
       (not(waiterOf(Restaurant, Waiter));not(cookOf(Restaurant, Cook));not(holds(beWaiter3(Waiter), Time)))).


% [waiter,food,time]
% HoldsAt(BeWaiter4(waiter),time) &
% ({agent} HoldsAt(KnowOrder(waiter,agent,food),time)) &
% HoldsAt(FoodPrepared(food),time) ->
% Happens(PickUp(waiter,food),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4297).
% From E: 
% 
% '->'(
%    ','(
%       holds(
%          beWaiter4(Waiter), 
%          Time), 
%       ','(
%          thereExists(Agent, 
%             holds(
%                knowOrder(Waiter,Agent,Food), 
%                Time)), 
%          holds(
%             foodPrepared(Food), 
%             Time))), 
%    happens(
%       pickUp(Waiter,Food), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4297).
 if(not(pickUp(Waiter, Food)),
       (not(beWaiter4(Waiter));not(thereExists(Agent, knowOrder(Waiter, Agent, Food)));not(foodPrepared(Food)))).


% [waiter,food,time]
% HoldsAt(BeWaiter4(waiter),time) &
% ({agent} HoldsAt(KnowOrder(waiter,agent,food),time)) ->
% Terminates(PickUp(waiter,food),
%            BeWaiter4(waiter),
%            time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4303).
% From E: 
% 
% '->'(
%    ','(
%       holds(
%          beWaiter4(Waiter), 
%          Time), 
%       thereExists(Agent, 
%          holds(
%             knowOrder(Waiter,Agent,Food), 
%             Time))), 
%    terminates_at(
%       pickUp(Waiter,Food), 
%       beWaiter4(Waiter), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4303).
 if(not(terminates(pickUp(Waiter, Food),
                     at(beWaiter4(Waiter), Time))),
       (not(holds(beWaiter4(Waiter), Time));not(thereExists(Agent, holds(knowOrder(Waiter, Agent, Food), Time))))).


% [waiter,food,time]
% HoldsAt(BeWaiter4(waiter),time) &
% ({agent} HoldsAt(KnowOrder(waiter,agent,food),time)) ->
% Initiates(PickUp(waiter,food),
%           BeWaiter5(waiter),
%           time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4310).
% From E: 
% 
% '->'(
%    ','(
%       holds(
%          beWaiter4(Waiter), 
%          Time), 
%       thereExists(Agent, 
%          holds(
%             knowOrder(Waiter,Agent,Food), 
%             Time))), 
%    initiates_at(
%       pickUp(Waiter,Food), 
%       beWaiter5(Waiter), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4310).
 if(not(initiates(pickUp(Waiter, Food),
                    at(beWaiter5(Waiter), Time))),
       (not(holds(beWaiter4(Waiter), Time));not(thereExists(Agent, holds(knowOrder(Waiter, Agent, Food), Time))))).


% [restaurant,waiter,time]
% WaiterOf(restaurant)=waiter &
% HoldsAt(BeWaiter5(waiter),time) ->
% Happens(WalkThroughDoor21(waiter,KitchenDoorOf(restaurant)),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4317).
% From E: 
% 
% '->'(
%    ','(
%       '='(
%          waiterOf(Restaurant), 
%          Waiter), 
%       holds(
%          beWaiter5(Waiter), 
%          Time)), 
%    happens(
%       walkThroughDoor21(Waiter, 
%          kitchenDoorOf(Restaurant)), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4317).
 if(not(walkThroughDoor21(Waiter, kitchenDoorOf(Restaurant))),
       (not(waiterOf(Restaurant, Waiter));not(beWaiter5(Waiter)))).


% [restaurant,waiter,door,time]
% HoldsAt(BeWaiter5(waiter),time) &
% WaiterOf(restaurant)=waiter &
% KitchenDoorOf(restaurant)=door ->
% Terminates(WalkThroughDoor21(waiter,door),
%            BeWaiter5(waiter),
%            time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4322).
% From E: 
% 
% '->'(
%    ','(
%       holds(
%          beWaiter5(Waiter), 
%          Time), 
%       ','(
%          '='(
%             waiterOf(Restaurant), 
%             Waiter), 
%          '='(
%             kitchenDoorOf(Restaurant), 
%             Door))), 
%    terminates_at(
%       walkThroughDoor21(Waiter,Door), 
%       beWaiter5(Waiter), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4322).
 if(not(terminates(walkThroughDoor21(Waiter, Door),
                     at(beWaiter5(Waiter), Time))),
       (not(holds(beWaiter5(Waiter), Time));not(waiterOf(Restaurant, Waiter));not(kitchenDoorOf(Restaurant, Door)))).


% [restaurant,waiter,door,time]
% HoldsAt(BeWaiter5(waiter),time) &
% WaiterOf(restaurant)=waiter &
% KitchenDoorOf(restaurant)=door ->
% Initiates(WalkThroughDoor21(waiter,door),
%           BeWaiter6(waiter),
%           time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4330).
% From E: 
% 
% '->'(
%    ','(
%       holds(
%          beWaiter5(Waiter), 
%          Time), 
%       ','(
%          '='(
%             waiterOf(Restaurant), 
%             Waiter), 
%          '='(
%             kitchenDoorOf(Restaurant), 
%             Door))), 
%    initiates_at(
%       walkThroughDoor21(Waiter,Door), 
%       beWaiter6(Waiter), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4330).
 if(not(initiates(walkThroughDoor21(Waiter, Door),
                    at(beWaiter6(Waiter), Time))),
       (not(holds(beWaiter5(Waiter), Time));not(waiterOf(Restaurant, Waiter));not(kitchenDoorOf(Restaurant, Door)))).


% [restaurant,waiter,table,food,time]
% WaiterOf(restaurant)=waiter &
% TableOf(restaurant)=table &
% HoldsAt(BeWaiter6(waiter),time) &
% HoldsAt(Holding(waiter,food),time) ->
% Happens(PlaceOn(waiter,food,table),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4338).
% From E: 
% 
% '->'(
%    ','(
%       '='(
%          waiterOf(Restaurant), 
%          Waiter), 
%       ','(
%          '='(
%             tableOf(Restaurant), 
%             Table), 
%          ','(
%             holds(
%                beWaiter6(Waiter), 
%                Time), 
%             holds(
%                holding(Waiter,Food), 
%                Time)))), 
%    happens(
%       placeOn(Waiter,Food,Table), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4338).
 if(not(placeOn(Waiter, Food, Table)),
       (not(waiterOf(Restaurant, Waiter));not(tableOf(Restaurant, Table));not(beWaiter6(Waiter));not(holding(Waiter, Food)))).


% [waiter,food,table,time]
% HoldsAt(BeWaiter6(waiter),time) ->
% Terminates(PlaceOn(waiter,food,table),
%            BeWaiter6(waiter),
%            time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4345).
% From E: 
% 
% '->'(
%    holds(
%       beWaiter6(Waiter), 
%       Time), 
%    terminates_at(
%       placeOn(Waiter,Food,Table), 
%       beWaiter6(Waiter), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4345).
if(not(terminates(placeOn(Waiter,Food,Table),
		  at(beWaiter6(Waiter),Time))),
   not(holds(beWaiter6(Waiter),Time))).


% [waiter,food,table,time]
% HoldsAt(BeWaiter6(waiter),time) ->
% Initiates(PlaceOn(waiter,food,table),
%           BeWaiter7(waiter),
%           time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4351).
% From E: 
% 
% '->'(
%    holds(
%       beWaiter6(Waiter), 
%       Time), 
%    initiates_at(
%       placeOn(Waiter,Food,Table), 
%       beWaiter7(Waiter), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4351).
if(not(initiates(placeOn(Waiter,Food,Table),
		 at(beWaiter7(Waiter),Time))),
   not(holds(beWaiter6(Waiter),Time))).


% [waiter,agent,bill,time]
% HoldsAt(BeWaiter7(waiter),time) ->
% Terminates(Request(agent,waiter,bill),
%            BeWaiter7(waiter),
%            time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4357).
% From E: 
% 
% '->'(
%    holds(
%       beWaiter7(Waiter), 
%       Time), 
%    terminates_at(
%       request(Agent,Waiter,Bill), 
%       beWaiter7(Waiter), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4357).
if(not(terminates(request(Agent,Waiter,Bill),
		  at(beWaiter7(Waiter),Time))),
   not(holds(beWaiter7(Waiter),Time))).


% [waiter,agent,bill,time]
% HoldsAt(BeWaiter7(waiter),time) ->
% Initiates(Request(agent,waiter,bill),
%           BeWaiter8(waiter),
%           time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4363).
% From E: 
% 
% '->'(
%    holds(
%       beWaiter7(Waiter), 
%       Time), 
%    initiates_at(
%       request(Agent,Waiter,Bill), 
%       beWaiter8(Waiter), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4363).
if(not(initiates(request(Agent,Waiter,Bill),
		 at(beWaiter8(Waiter),Time))),
   not(holds(beWaiter7(Waiter),Time))).


% [restaurant,waiter,bill,time]
% WaiterOf(restaurant)=waiter &
% BillOf(restaurant)=bill &
% HoldsAt(BeWaiter8(waiter),time) ->
% Happens(PickUp(waiter,bill),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4369).
% From E: 
% 
% '->'(
%    ','(
%       '='(
%          waiterOf(Restaurant), 
%          Waiter), 
%       ','(
%          '='(
%             billOf(Restaurant), 
%             Bill), 
%          holds(
%             beWaiter8(Waiter), 
%             Time))), 
%    happens(
%       pickUp(Waiter,Bill), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4369).
 if(not(pickUp(Waiter, Bill)),
       (not(waiterOf(Restaurant, Waiter));not(billOf(Restaurant, Bill));not(beWaiter8(Waiter)))).


% [waiter,bill,time]
% HoldsAt(BeWaiter8(waiter),time) ->
% Terminates(PickUp(waiter,bill),
%            BeWaiter8(waiter),
%            time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4375).
% From E: 
% 
% '->'(
%    holds(
%       beWaiter8(Waiter), 
%       Time), 
%    terminates_at(
%       pickUp(Waiter,Bill), 
%       beWaiter8(Waiter), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4375).
if(not(terminates(pickUp(Waiter,Bill),
		  at(beWaiter8(Waiter),Time))),
   not(holds(beWaiter8(Waiter),Time))).


% [waiter,bill,time]
% HoldsAt(BeWaiter8(waiter),time) ->
% Initiates(PickUp(waiter,bill),
%           BeWaiter9(waiter),
%           time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4381).
% From E: 
% 
% '->'(
%    holds(
%       beWaiter8(Waiter), 
%       Time), 
%    initiates_at(
%       pickUp(Waiter,Bill), 
%       beWaiter9(Waiter), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4381).
if(not(initiates(pickUp(Waiter,Bill),
		 at(beWaiter9(Waiter),Time))),
   not(holds(beWaiter8(Waiter),Time))).


% [restaurant,waiter,bill,table,time]
% WaiterOf(restaurant)=waiter &
% BillOf(restaurant)=bill &
% TableOf(restaurant)=table &
% HoldsAt(BeWaiter9(waiter),time) ->
% Happens(PlaceOn(waiter,bill,table),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4387).
% From E: 
% 
% '->'(
%    ','(
%       '='(
%          waiterOf(Restaurant), 
%          Waiter), 
%       ','(
%          '='(
%             billOf(Restaurant), 
%             Bill), 
%          ','(
%             '='(
%                tableOf(Restaurant), 
%                Table), 
%             holds(
%                beWaiter9(Waiter), 
%                Time)))), 
%    happens(
%       placeOn(Waiter,Bill,Table), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4387).
 if(not(placeOn(Waiter, Bill, Table)),
       (not(waiterOf(Restaurant, Waiter));not(billOf(Restaurant, Bill));not(tableOf(Restaurant, Table));not(beWaiter9(Waiter)))).


% [waiter,bill,table,time]
% HoldsAt(BeWaiter9(waiter),time) ->
% Terminates(PlaceOn(waiter,bill,table),
%            BeWaiter9(waiter),
%            time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4394).
% From E: 
% 
% '->'(
%    holds(
%       beWaiter9(Waiter), 
%       Time), 
%    terminates_at(
%       placeOn(Waiter,Bill,Table), 
%       beWaiter9(Waiter), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4394).
if(not(terminates(placeOn(Waiter,Bill,Table),
		  at(beWaiter9(Waiter),Time))),
   not(holds(beWaiter9(Waiter),Time))).


% [waiter,bill,table,time]
% HoldsAt(BeWaiter9(waiter),time) ->
% Initiates(PlaceOn(waiter,bill,table),
%           BeWaiter0(waiter),
%           time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4400).
% From E: 
% 
% '->'(
%    holds(
%       beWaiter9(Waiter), 
%       Time), 
%    initiates_at(
%       placeOn(Waiter,Bill,Table), 
%       beWaiter0(Waiter), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4400).
if(not(initiates(placeOn(Waiter,Bill,Table),
		 at(beWaiter0(Waiter),Time))),
   not(holds(beWaiter9(Waiter),Time))).


%; awaiting next waiter order

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4406).
% fluent BeCook0(cook)
% From E: 
% 
% fluent(beCook0(cook)).
mpred_prop(beCook0(cook), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4406).
fluents([beCook0/1]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4408).
%; waiter order received

% fluent BeCook1(cook)
% From E: 
% 
% fluent(beCook1(cook)).
mpred_prop(beCook1(cook), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4408).
fluents([beCook1/1]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4411).
% xor BeCook0, BeCook1
% From E: 
% 
% xor([beCook0,beCook1]).
xor([beCook0,beCook1]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4413).
% [cook,agent,food,time]
% HoldsAt(BeCook0(cook),time) ->
% Terminates(Order(agent,cook,food),
%            BeCook0(cook),
%            time).
% From E: 
% 
% '->'(
%    holds(
%       beCook0(Cook), 
%       Time), 
%    terminates_at(
%       order(Agent,Cook,Food), 
%       beCook0(Cook), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4413).
if(not(terminates(order(Agent,Cook,Food),
		  at(beCook0(Cook),Time))),
   not(holds(beCook0(Cook),Time))).


% [cook,agent,food,time]
% HoldsAt(BeCook0(cook),time) ->
% Initiates(Order(agent,cook,food),
%           BeCook1(cook),
%           time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4420).
% From E: 
% 
% '->'(
%    holds(
%       beCook0(Cook), 
%       Time), 
%    initiates_at(
%       order(Agent,Cook,Food), 
%       beCook1(Cook), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4420).
if(not(initiates(order(Agent,Cook,Food),
		 at(beCook1(Cook),Time))),
   not(holds(beCook0(Cook),Time))).

% event FoodPrepare(agent,food)
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4424).
% From E: 
% 
% event(foodPrepare(agent,food)).
events([foodPrepare/2]).
mpred_prop(foodPrepare(agent, food), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4424).
actions([foodPrepare/2]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4427).
% fluent FoodPrepared(food)
% From E: 
% 
% fluent(foodPrepared(food)).
mpred_prop(foodPrepared(food), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4427).
fluents([foodPrepared/1]).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4429).
% [agent,food,time]
% Initiates(FoodPrepare(agent,food),
%           FoodPrepared(food),
%           time).
% From E: 
% 
% initiates_at(
%    foodPrepare(Agent,Food), 
%    foodPrepared(Food), 
%    Time).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4429).
initiates(foodPrepare(Agent,Food),foodPrepared(Food)).


% [agent,food,time]
% Happens(FoodPrepare(agent,food),time) ->
% {location}% 
% HoldsAt(At(agent,location),time) &
% HoldsAt(At(food,location),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4435).
% From E: 
% 
% exists(Location, 
%    '->'(
%       happens(
%          foodPrepare(Agent,Food), 
%          Time), 
%       ','(
%          holds(
%             at_loc(Agent,Location), 
%             Time), 
%          holds(
%             at_loc(Food,Location), 
%             Time)))).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4435).
exists(Location,  (at_loc(Agent, Location), at_loc(Food, Location);not(foodPrepare(Agent, Food)))).


% [cook,agent,food,time]
% HoldsAt(BeCook1(cook),time) &
% HoldsAt(KnowOrder(cook,agent,food),time) ->
% Happens(FoodPrepare(cook,food),time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4441).
% From E: 
% 
% '->'(
%    ','(
%       holds(
%          beCook1(Cook), 
%          Time), 
%       holds(
%          knowOrder(Cook,Agent,Food), 
%          Time)), 
%    happens(
%       foodPrepare(Cook,Food), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4441).
 if(not(foodPrepare(Cook, Food)),
       (not(beCook1(Cook));not(knowOrder(Cook, Agent, Food)))).


% [cook,food,time]
% HoldsAt(BeCook1(cook),time) ->
% Terminates(FoodPrepare(cook,food),
%            BeCook1(cook),
%            time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4446).
% From E: 
% 
% '->'(
%    holds(
%       beCook1(Cook), 
%       Time), 
%    terminates_at(
%       foodPrepare(Cook,Food), 
%       beCook1(Cook), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4446).
if(not(terminates(foodPrepare(Cook,Food),
		  at(beCook1(Cook),Time))),
   not(holds(beCook1(Cook),Time))).


% [cook,food,time]
% HoldsAt(BeCook1(cook),time) ->
% Initiates(FoodPrepare(cook,food),
%           BeCook0(cook),
%           time).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4452).
% From E: 
% 
% '->'(
%    holds(
%       beCook1(Cook), 
%       Time), 
%    initiates_at(
%       foodPrepare(Cook,Food), 
%       beCook0(Cook), 
%       Time)).
 %   [Time].
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4452).
if(not(initiates(foodPrepare(Cook,Food),
		 at(beCook0(Cook),Time))),
   not(holds(beCook1(Cook),Time))).


%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: ecnet/EatingInAHouse.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Mueller:2004c,
%;   author = "Erik T. Mueller",
%;   year = "2004",
%;   title = "Understanding script-based stories using commonsense reasoning",
%;   journal = "Cognitive Systems Research",
%;   volume = "5",
%;   number = "4",
%;   pages = "307--340",
%; }
%;

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4486).
% option modeldiff on
% From E: 
% 
% ':-'(call_pel_directive(option(modeldiff,on))).
:- call_pel_directive(option(modeldiff, on)).

% option encoding 3
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4486).
% From E: 
% 
% ':-'(call_pel_directive(option(encoding,3))).
:- call_pel_directive(option(encoding, 3)).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4488).
% option renaming off
% From E: 
% 
% ':-'(call_pel_directive(option(renaming,off))).
:- call_pel_directive(option(renaming, off)).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4490).
% ignore Love, ThreatenedBy
% From E: 
% 
% ':-'(call_pel_directive(ignore(love))).
:- call_pel_directive(ignore(love)).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4490).
% From E: 
% 
% ':-'(call_pel_directive(ignore(threatenedBy))).
:- call_pel_directive(ignore(threatenedBy)).

% ignore LookOutOnto, Floor, BuildingOf, SkyOf, GroundOf
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4490).
% From E: 
% 
% ':-'(call_pel_directive(ignore(lookOutOnto))).
:- call_pel_directive(ignore(lookOutOnto)).
% From E: 
% 
% ':-'(call_pel_directive(ignore(floor))).
:- call_pel_directive(ignore(floor)).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4490).
% From E: 
% 
% ':-'(call_pel_directive(ignore(buildingOf))).
:- call_pel_directive(ignore(buildingOf)).
% From E: 
% 
% ':-'(call_pel_directive(ignore(skyOf))).
:- call_pel_directive(ignore(skyOf)).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4490).
% From E: 
% 
% ':-'(call_pel_directive(ignore(groundOf))).
:- call_pel_directive(ignore(groundOf)).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4492).
% ignore Inside
% From E: 
% 
% ':-'(call_pel_directive(ignore(inside))).
:- call_pel_directive(ignore(inside)).

% ignore Near, WalkFrom, WalkFromTo, RunFromTo
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4492).
% From E: 
% 
% ':-'(call_pel_directive(ignore(near))).
:- call_pel_directive(ignore(near)).
% From E: 
% 
% ':-'(call_pel_directive(ignore(walkFrom))).
:- call_pel_directive(ignore(walkFrom)).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4492).
% From E: 
% 
% ':-'(call_pel_directive(ignore(walkFromTo))).
:- call_pel_directive(ignore(walkFromTo)).
% From E: 
% 
% ':-'(call_pel_directive(ignore(runFromTo))).
:- call_pel_directive(ignore(runFromTo)).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4494).
% ignore BillOf, CookOf, TableOf, WaiterOf, KitchenDoorOf
% From E: 
% 
% ':-'(call_pel_directive(ignore(billOf))).
:- call_pel_directive(ignore(billOf)).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4494).
% From E: 
% 
% ':-'(call_pel_directive(ignore(cookOf))).
:- call_pel_directive(ignore(cookOf)).
% From E: 
% 
% ':-'(call_pel_directive(ignore(tableOf))).
:- call_pel_directive(ignore(tableOf)).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4494).
% From E: 
% 
% ':-'(call_pel_directive(ignore(waiterOf))).
:- call_pel_directive(ignore(waiterOf)).
% From E: 
% 
% ':-'(call_pel_directive(ignore(kitchenDoorOf))).
:- call_pel_directive(ignore(kitchenDoorOf)).

% ignore BeWaiter0, BeWaiter1, BeWaiter2, BeWaiter3, BeWaiter4
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4494).
% From E: 
% 
% ':-'(call_pel_directive(ignore(beWaiter0))).
:- call_pel_directive(ignore(beWaiter0)).
% From E: 
% 
% ':-'(call_pel_directive(ignore(beWaiter1))).
:- call_pel_directive(ignore(beWaiter1)).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4494).
% From E: 
% 
% ':-'(call_pel_directive(ignore(beWaiter2))).
:- call_pel_directive(ignore(beWaiter2)).
% From E: 
% 
% ':-'(call_pel_directive(ignore(beWaiter3))).
:- call_pel_directive(ignore(beWaiter3)).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4494).
% From E: 
% 
% ':-'(call_pel_directive(ignore(beWaiter4))).
:- call_pel_directive(ignore(beWaiter4)).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4496).
% ignore BeWaiter5, BeWaiter6, BeWaiter7, BeWaiter8, BeWaiter9
% From E: 
% 
% ':-'(call_pel_directive(ignore(beWaiter5))).
:- call_pel_directive(ignore(beWaiter5)).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4496).
% From E: 
% 
% ':-'(call_pel_directive(ignore(beWaiter6))).
:- call_pel_directive(ignore(beWaiter6)).
% From E: 
% 
% ':-'(call_pel_directive(ignore(beWaiter7))).
:- call_pel_directive(ignore(beWaiter7)).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4496).
% From E: 
% 
% ':-'(call_pel_directive(ignore(beWaiter8))).
:- call_pel_directive(ignore(beWaiter8)).
% From E: 
% 
% ':-'(call_pel_directive(ignore(beWaiter9))).
:- call_pel_directive(ignore(beWaiter9)).

% ignore BeCook0, BeCook1
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4496).
% From E: 
% 
% ':-'(call_pel_directive(ignore(beCook0))).
:- call_pel_directive(ignore(beCook0)).
% From E: 
% 
% ':-'(call_pel_directive(ignore(beCook1))).
:- call_pel_directive(ignore(beCook1)).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4498).
% ignore InviteIn, InvitedIn, IntendToWalkIn, IntentionToWalkIn
% From E: 
% 
% ':-'(call_pel_directive(ignore(inviteIn))).
:- call_pel_directive(ignore(inviteIn)).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4498).
% From E: 
% 
% ':-'(call_pel_directive(ignore(invitedIn))).
:- call_pel_directive(ignore(invitedIn)).
% From E: 
% 
% ':-'(call_pel_directive(ignore(intendToWalkIn))).
:- call_pel_directive(ignore(intendToWalkIn)).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4498).
% From E: 
% 
% ':-'(call_pel_directive(ignore(intentionToWalkIn))).
:- call_pel_directive(ignore(intentionToWalkIn)).

% ignore ActOnIntentionToWalkIn, Greet, SayGoodbye, CryForJoy
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4498).
% From E: 
% 
% ':-'(call_pel_directive(ignore(actOnIntentionToWalkIn))).
:- call_pel_directive(ignore(actOnIntentionToWalkIn)).
% From E: 
% 
% ':-'(call_pel_directive(ignore(greet))).
:- call_pel_directive(ignore(greet)).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4498).
% From E: 
% 
% ':-'(call_pel_directive(ignore(sayGoodbye))).
:- call_pel_directive(ignore(sayGoodbye)).
% From E: 
% 
% ':-'(call_pel_directive(ignore(cryForJoy))).
:- call_pel_directive(ignore(cryForJoy)).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4500).
% ignore Threaten, ReleaseFromThreat, ThreatenedBy
% From E: 
% 
% ':-'(call_pel_directive(ignore(threaten))).
:- call_pel_directive(ignore(threaten)).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4500).
% From E: 
% 
% ':-'(call_pel_directive(ignore(releaseFromThreat))).
:- call_pel_directive(ignore(releaseFromThreat)).
% From E: 
% 
% ':-'(call_pel_directive(ignore(threatenedBy))).
:- call_pel_directive(ignore(threatenedBy)).

% ignore Order, KnowOrder, Request, KnowRequest
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4500).
% From E: 
% 
% ':-'(call_pel_directive(ignore(order))).
:- call_pel_directive(ignore(order)).
% From E: 
% 
% ':-'(call_pel_directive(ignore(knowOrder))).
:- call_pel_directive(ignore(knowOrder)).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4500).
% From E: 
% 
% ':-'(call_pel_directive(ignore(request))).
:- call_pel_directive(ignore(request)).
% From E: 
% 
% ':-'(call_pel_directive(ignore(knowRequest))).
:- call_pel_directive(ignore(knowRequest)).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4502).
% ignore PutInside, TakeOutOf
% From E: 
% 
% ':-'(call_pel_directive(ignore(putInside))).
:- call_pel_directive(ignore(putInside)).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4502).
% From E: 
% 
% ':-'(call_pel_directive(ignore(takeOutOf))).
:- call_pel_directive(ignore(takeOutOf)).

% ignore SayPleaseToMeet, Move
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4502).
% From E: 
% 
% ':-'(call_pel_directive(ignore(sayPleaseToMeet))).
:- call_pel_directive(ignore(sayPleaseToMeet)).
% From E: 
% 
% ':-'(call_pel_directive(ignore(move))).
:- call_pel_directive(ignore(move)).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4505).
% load foundations/Root.e
% From E: 
% 
% ':-'(call_pel_directive(load('foundations/Root.e'))).
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4505).
% From E: 
% 
% ':-'(call_pel_directive(load('foundations/EC.e'))).
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4507).
% load answers/Mueller2003/Ontology.e
% From E: 
% 
% ':-'(call_pel_directive(load('answers/Mueller2003/Ontology.e'))).
:- call_pel_directive(load('answers/Mueller2003/Ontology.e')).

% load answers/Mueller2004c/RTSpaceM.e
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4507).
% From E: 
% 
% ':-'(call_pel_directive(load('answers/Mueller2004c/RTSpaceM.e'))).
:- call_pel_directive(load('answers/Mueller2004c/RTSpaceM.e')).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4509).
% load answers/Mueller2004c/OTSpaceM.e
% From E: 
% 
% ':-'(call_pel_directive(load('answers/Mueller2004c/OTSpaceM.e'))).
:- call_pel_directive(load('answers/Mueller2004c/OTSpaceM.e')).

% load answers/Mueller2004c/HungerNeed.e
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4509).
% From E: 
% 
% ':-'(call_pel_directive(load('answers/Mueller2004c/HungerNeed.e'))).
:- call_pel_directive(load('answers/Mueller2004c/HungerNeed.e')).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4511).
% load answers/Mueller2004c/Restaurant.e
% From E: 
% 
% ':-'(call_pel_directive(load('answers/Mueller2004c/Restaurant.e'))).
:- call_pel_directive(load('answers/Mueller2004c/Restaurant.e')).

% load answers/Mueller2003/Sleep.e
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4511).
% From E: 
% 
% ':-'(call_pel_directive(load('answers/Mueller2003/Sleep.e'))).
:- call_pel_directive(load('answers/Mueller2003/Sleep.e')).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4513).
% load answers/Mueller2003/SpeechAct.e
% From E: 
% 
% ':-'(call_pel_directive(load('answers/Mueller2003/SpeechAct.e'))).
:- call_pel_directive(load('answers/Mueller2003/SpeechAct.e')).

% load answers/Mueller2004c/Dress.e
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4513).
% From E: 
% 
% ':-'(call_pel_directive(load('answers/Mueller2004c/Dress.e'))).
:- call_pel_directive(load('answers/Mueller2004c/Dress.e')).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4516).
% room Upstairs1
% From E: 
% 
% t(room,upstairs1).
room(upstairs1).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4518).
% staircase Staircase1
% From E: 
% 
% t(staircase,staircase1).
staircase(staircase1).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4520).
% room Hallway1
% From E: 
% 
% t(room,hallway1).
room(hallway1).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4522).
% Side1(Staircase1)=Hallway1.
% From E: 
% 
% '='(
%    side1(staircase1), 
%    hallway1).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4522).
side1(staircase1,hallway1).


% Side2(Staircase1)=Upstairs1.
% From E: 
% 
% '='(
%    side2(staircase1), 
%    upstairs1).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4522).
side2(staircase1,upstairs1).

% door DiningRoomDoor1
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4524).
% From E: 
% 
% t(door,diningRoomDoor1).
door(diningRoomDoor1).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4527).
% room DiningRoom1
% From E: 
% 
% t(room,diningRoom1).
room(diningRoom1).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4529).
% Side1(DiningRoomDoor1)=Hallway1.
% From E: 
% 
% '='(
%    side1(diningRoomDoor1), 
%    hallway1).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4529).
side1(diningRoomDoor1,hallway1).


% Side2(DiningRoomDoor1)=DiningRoom1.
% From E: 
% 
% '='(
%    side2(diningRoomDoor1), 
%    diningRoom1).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4529).
side2(diningRoomDoor1,diningRoom1).

% door KitchenDoor1
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4531).
% From E: 
% 
% t(door,kitchenDoor1).
door(kitchenDoor1).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4534).
% room Kitchen1
% From E: 
% 
% t(room,kitchen1).
room(kitchen1).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4536).
% Side1(KitchenDoor1)=DiningRoom1.
% From E: 
% 
% '='(
%    side1(kitchenDoor1), 
%    diningRoom1).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4536).
side1(kitchenDoor1,diningRoom1).


% Side2(KitchenDoor1)=Kitchen1.
% From E: 
% 
% '='(
%    side2(kitchenDoor1), 
%    kitchen1).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4536).
side2(kitchenDoor1,kitchen1).

% agent Eater1
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4538).
% From E: 
% 
% t(agent,eater1).
agent(eater1).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4541).
% agent Eater2
% From E: 
% 
% t(agent,eater2).
agent(eater2).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4543).
% clothing Clothing1
% From E: 
% 
% t(clothing,clothing1).
clothing(clothing1).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4545).
% clothing Clothing2
% From E: 
% 
% t(clothing,clothing2).
clothing(clothing2).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4547).
% chair Chair1
% From E: 
% 
% t(chair,chair1).
chair(chair1).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4549).
% chair Chair2
% From E: 
% 
% t(chair,chair2).
chair(chair2).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4551).
% food Food1
% From E: 
% 
% t(food,food1).
food(food1).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4553).
% agent Cook1
% From E: 
% 
% t(agent,cook1).
agent(cook1).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4555).
% table Table1
% From E: 
% 
% t(table,table1).
table table1.

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4557).
% content Content1
% From E: 
% 
% t(content,content1).
content(content1).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4559).
% content Content2
% From E: 
% 
% t(content,content2).
content(content2).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4561).
% outside DummyOutside1
% From E: 
% 
% t(outside,dummyOutside1).
outside(dummyOutside1).
%; prune

% sort ona, onb
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4563).
% From E: 
% 
% sort(ona).
sort(ona).
% From E: 
% 
% sort(onb).
sort(onb).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4565).
% fluent! On(ona,onb)
% From E: 
% 
% fluent(on(ona,onb)).
mpred_prop(on(ona, onb), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4565).
fluents([on/2]).

% event! PlaceOn(agent,ona,onb)
% From E: 
% 
% event(placeOn(agent,ona,onb)).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4565).
events([placeOn/3]).
mpred_prop(placeOn(agent, ona, onb), action).
actions([placeOn/3]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4567).
% event! TakeOffOf(agent,ona,onb)
% From E: 
% 
% event(takeOffOf(agent,ona,onb)).
events([takeOffOf/3]).
mpred_prop(takeOffOf(agent, ona, onb), action).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4567).
actions([takeOffOf/3]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4569).
% sort ordera, orderb, orderc
% From E: 
% 
% sort(ordera).
sort(ordera).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4569).
% From E: 
% 
% sort(orderb).
sort(orderb).
% From E: 
% 
% sort(orderc).
sort(orderc).

% event! Order(ordera,orderb,orderc)
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4569).
% From E: 
% 
% event(order(ordera,orderb,orderc)).
mpred_prop(order(ordera, orderb, orderc), event).
events([order/3]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4571).
% fluent! KnowOrder(orderb,ordera,orderc)
% From E: 
% 
% fluent(knowOrder(orderb,ordera,orderc)).
mpred_prop(knowOrder(orderb, ordera, orderc), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4571).
fluents([knowOrder/3]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4573).
% sort requesta, requestb, requestc
% From E: 
% 
% sort(requesta).
sort(requesta).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4573).
% From E: 
% 
% sort(requestb).
sort(requestb).
% From E: 
% 
% sort(requestc).
sort(requestc).

% event! Request(requesta,requestb,requestc)
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4573).
% From E: 
% 
% event(request(requesta,requestb,requestc)).
mpred_prop(request(requesta, requestb, requestc), event).
events([request/3]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4575).
% fluent! KnowRequest(requestb,requesta,requestc)
% From E: 
% 
% fluent(knowRequest(requestb,requesta,requestc)).
mpred_prop(knowRequest(requestb, requesta, requestc), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4575).
fluents([knowRequest/3]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4577).
% sort holda, holdb, holdc
% From E: 
% 
% sort(holda).
sort(holda).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4577).
% From E: 
% 
% sort(holdb).
sort(holdb).
% From E: 
% 
% sort(holdc).
sort(holdc).

% event! TakeOffOf(holda,holdb,holdc)
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4577).
% From E: 
% 
% event(takeOffOf(holda,holdb,holdc)).
mpred_prop(takeOffOf(holda, holdb, holdc), event).
events([takeOffOf/3]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4579).
% event! PickUp(holda,holdb)
% From E: 
% 
% event(pickUp(holda,holdb)).
mpred_prop(pickUp(holda, holdb), event).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4579).
events([pickUp/2]).

% event! LetGoOf(holda,holdb)
% From E: 
% 
% event(letGoOf(holda,holdb)).
mpred_prop(letGoOf(holda, holdb), event).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4579).
events([letGoOf/2]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4581).
% event! Hold(holda,holdb)
% From E: 
% 
% event(hold(holda,holdb)).
mpred_prop(hold(holda, holdb), event).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4581).
events([hold/2]).

% fluent! Holding(holda,holdb)
% From E: 
% 
% fluent(holding(holda,holdb)).
mpred_prop(holding(holda, holdb), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4581).
fluents([holding/2]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4584).
% sort sita, sitb
% From E: 
% 
% sort(sita).
sort(sita).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4584).
% From E: 
% 
% sort(sitb).
sort(sitb).

% event! LieOn(sita,sitb)
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4584).
% From E: 
% 
% event(lieOn(sita,sitb)).
mpred_prop(lieOn(sita, sitb), event).
events([lieOn/2]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4586).
% event! SitOn(sita,sitb)
% From E: 
% 
% event(sitOn(sita,sitb)).
mpred_prop(sitOn(sita, sitb), event).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4586).
events([sitOn/2]).

% event! RiseFrom(sita,sitb)
% From E: 
% 
% event(riseFrom(sita,sitb)).
mpred_prop(riseFrom(sita, sitb), event).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4586).
events([riseFrom/2]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4588).
% fluent! LyingOn(sita,sitb)
% From E: 
% 
% fluent(lyingOn(sita,sitb)).
mpred_prop(lyingOn(sita, sitb), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4588).
fluents([lyingOn/2]).

% fluent! SittingOn(sita,sitb)
% From E: 
% 
% fluent(sittingOn(sita,sitb)).
mpred_prop(sittingOn(sita, sitb), fluent).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4588).
fluents([sittingOn/2]).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4591).
% ona! Food1
% From E: 
% 
% t(ona,food1).
ona(food1).

% onb! Table1
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4591).
% From E: 
% 
% t(onb,table1).
onb(table1).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4593).
% holda! Cook1
% From E: 
% 
% t(holda,cook1).
holda(cook1).

% holdb! Food1
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4593).
% From E: 
% 
% t(holdb,food1).
holdb(food1).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4595).
% holdc! Table1
% From E: 
% 
% t(holdc,table1).
holdc(table1).

% sita! Eater1
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4595).
% From E: 
% 
% t(sita,eater1).
sita(eater1).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4597).
% sitb! Chair1
% From E: 
% 
% t(sitb,chair1).
sitb(chair1).
%; initial situation
% [agent]
 % HoldsAt(Dressed(agent),0).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4599).
% From E: 
% 
% holds(
%    dressed(Agent), 0).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4599).
initially(dressed(Agent)).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4601).
% [agent]
 % HoldsAt(Awake(agent),0).
% From E: 
% 
% holds(
%    awake(Agent), 0).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4601).
initially(awake(Agent)).


% [agent]
 % HoldsAt(Sleep3(agent),0).
% From E: 
% 
% holds(
%    sleep3(Agent), 0).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4601).
initially(sleep3(Agent)).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4603).
% [agent]
 % HoldsAt(Standing(agent),0).
% From E: 
% 
% holds(
%    standing(Agent), 0).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4603).
initially(standing(Agent)).


% [agent]
 % HoldsAt(Standing(agent),0).
% From E: 
% 
% holds(
%    standing(Agent), 0).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4603).
initially(standing(Agent)).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4605).
% [agent,object]
 % !HoldsAt(Holding(agent,object),0).
% From E: 
% 
% holds(
%    not(holding(Agent,Object)), 0).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4605).
initially(not(holding(Agent,Object))).


% [food]
 % HoldsAt(At(food,Kitchen1),0).
% From E: 
% 
% holds(
%    at_loc(Food,kitchen1), 0).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4605).
initially(at_loc(Food,kitchen1)).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4607).
% [food]
 % !HoldsAt(FoodPrepared(food),0).
% From E: 
% 
% holds(
%    not(foodPrepared(Food)), 0).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4607).
initially(not(foodPrepared(Food))).


% [agent]
 % HoldsAt(Hungry(agent),0).
% From E: 
% 
% holds(
%    hungry(Agent), 0).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4607).
initially(hungry(Agent)).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4609).
% [door]
 % HoldsAt(DoorIsOpen(door),0).
% From E: 
% 
% holds(
%    doorIsOpen(Door), 0).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4609).
initially(doorIsOpen(Door)).


% [clothing]
 % HoldsAt(At(clothing,Upstairs1),0).
% From E: 
% 
% holds(
%    at_loc(Clothing,upstairs1), 0).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4609).
initially(at_loc(Clothing,upstairs1)).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4611).
% [chair]
 % HoldsAt(At(chair,DiningRoom1),0).
% From E: 
% 
% holds(
%    at_loc(Chair,diningRoom1), 0).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4611).
initially(at_loc(Chair,diningRoom1)).


% HoldsAt(At(Cook1,Kitchen1),0).
% From E: 
% 
% holds(
%    at_loc(cook1,kitchen1), 0).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4611).
initially(at_loc(cook1,kitchen1)).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4613).
% HoldsAt(At(Table1,DiningRoom1),0).
% From E: 
% 
% holds(
%    at_loc(table1,diningRoom1), 0).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4613).
initially(at_loc(table1,diningRoom1)).


% [agent,clothing]
 % !HoldsAt(Wearing(agent,clothing),0).
% From E: 
% 
% holds(
%    not(wearing(Agent,Clothing)), 0).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4613).
initially(not(wearing(Agent,Clothing))).


%; narrative


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4617).
% HoldsAt(At(Cook1,Kitchen1),0).
% From E: 
% 
% holds(
%    at_loc(cook1,kitchen1), 0).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4617).
initially(at_loc(cook1,kitchen1)).


% HoldsAt(At(Eater1,Upstairs1),0).
% From E: 
% 
% holds(
%    at_loc(eater1,upstairs1), 0).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4617).
initially(at_loc(eater1,upstairs1)).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4619).
% HoldsAt(At(Eater2,Upstairs1),0).
% From E: 
% 
% holds(
%    at_loc(eater2,upstairs1), 0).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4619).
initially(at_loc(eater2,upstairs1)).


% Happens(FoodPrepare(Cook1,Food1),0).
% From E: 
% 
% happens(
%    foodPrepare(cook1,food1), 0).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4619).
observe(at(foodPrepare(cook1,food1),0)).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4621).
% Happens(PutOn(Eater1,Clothing1),1).
% From E: 
% 
% happens(
%    putOn(eater1,clothing1), 1).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4621).
observe(at(putOn(eater1,clothing1),1)).


% Happens(PutOn(Eater2,Clothing2),2).
% From E: 
% 
% happens(
%    putOn(eater2,clothing2), 2).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4621).
observe(at(putOn(eater2,clothing2),2)).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4623).
% Happens(WalkDownStaircase(Eater1,Staircase1),3).
% From E: 
% 
% happens(
%    walkDownStaircase(eater1,staircase1), 3).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4623).
observe(at(walkDownStaircase(eater1,staircase1),3)).


% Happens(WalkDownStaircase(Eater2,Staircase1),4).
% From E: 
% 
% happens(
%    walkDownStaircase(eater2,staircase1), 4).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4623).
observe(at(walkDownStaircase(eater2,staircase1),4)).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4625).
% Happens(WalkThroughDoor12(Eater1,DiningRoomDoor1),5).
% From E: 
% 
% happens(
%    walkThroughDoor12(eater1,diningRoomDoor1), 5).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4625).
observe(at(walkThroughDoor12(eater1,diningRoomDoor1),5)).


% Happens(WalkThroughDoor12(Eater2,DiningRoomDoor1),6).
% From E: 
% 
% happens(
%    walkThroughDoor12(eater2,diningRoomDoor1), 6).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4625).
observe(at(walkThroughDoor12(eater2,diningRoomDoor1),6)).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4627).
% Happens(SitOn(Eater1,Chair1),7).
% From E: 
% 
% happens(
%    sitOn(eater1,chair1), 7).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4627).
observe(at(sitOn(eater1,chair1),7)).


% Happens(SitOn(Eater2,Chair2),8).
% From E: 
% 
% happens(
%    sitOn(eater2,chair2), 8).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4627).
observe(at(sitOn(eater2,chair2),8)).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4629).
% Happens(PickUp(Cook1, Food1),9).
% From E: 
% 
% happens(
%    pickUp(cook1,food1), 9).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4629).
observe(at(pickUp(cook1,food1),9)).


% Happens(WalkThroughDoor21(Cook1, KitchenDoor1),10).
% From E: 
% 
% happens(
%    walkThroughDoor21(cook1,kitchenDoor1), 10).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4629).
observe(at(walkThroughDoor21(cook1,kitchenDoor1),10)).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4631).
% Happens(PlaceOn(Cook1, Food1, Table1),11).
% From E: 
% 
% happens(
%    placeOn(cook1,food1,table1), 11).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4631).
observe(at(placeOn(cook1,food1,table1),11)).


% Happens(WalkThroughDoor12(Cook1, KitchenDoor1),12).
% From E: 
% 
% happens(
%    walkThroughDoor12(cook1,kitchenDoor1), 12).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4631).
observe(at(walkThroughDoor12(cook1,kitchenDoor1),12)).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4633).
% Happens(Eat(Eater1,Food1),13).
% From E: 
% 
% happens(
%    eat(eater1,food1), 13).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4633).
observe(at(eat(eater1,food1),13)).


% Happens(Eat(Eater2,Food1),14).
% From E: 
% 
% happens(
%    eat(eater2,food1), 14).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4633).
observe(at(eat(eater2,food1),14)).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4635).
% Happens(Converse(Eater1,Eater2),15).
% From E: 
% 
% happens(
%    converse(eater1,eater2), 15).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4635).
observe(at(converse(eater1,eater2),15)).


% Happens(TalkAbout(Eater1,Content1),16).
% From E: 
% 
% happens(
%    talkAbout(eater1,content1), 16).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4635).
observe(at(talkAbout(eater1,content1),16)).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4637).
% Happens(TalkAbout(Eater2,Content2),17).
% From E: 
% 
% happens(
%    talkAbout(eater2,content2), 17).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4637).
observe(at(talkAbout(eater2,content2),17)).


% Happens(RiseFrom(Eater1,Chair1),18).
% From E: 
% 
% happens(
%    riseFrom(eater1,chair1), 18).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4637).
observe(at(riseFrom(eater1,chair1),18)).


:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4639).
% Happens(RiseFrom(Eater2,Chair2),19).
% From E: 
% 
% happens(
%    riseFrom(eater2,chair2), 19).
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4639).
observe(at(riseFrom(eater2,chair2),19)).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4641).
% range time 0 20
% From E: 
% 
% ':-'(call_pel_directive(range(time,0,20))).
:- call_pel_directive(range(time, 0, 20)).

% range offset 0 0
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4641).
% From E: 
% 
% ':-'(call_pel_directive(range(offset,0,0))).
:- call_pel_directive(range(offset, 0, 0)).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4643).
% range diameter 0 0
% From E: 
% 
% ':-'(call_pel_directive(range(diameter,0,0))).
:- call_pel_directive(range(diameter, 0, 0)).

:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4645).
% completion Happens
% From E: 
% 
% ':-'(call_pel_directive(completion(happens))).
:- call_pel_directive(completion(happens)).
%; End of file.
:-was_s_l('/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4647).
% From E: 
% 
% ':-'(call_pel_directive(translate(ending,'/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e.lps'))).
:- call_pel_directive(translate(ending,
                                '/mnt/sdc1/logicmoo_workspace.1/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e.lps')).
