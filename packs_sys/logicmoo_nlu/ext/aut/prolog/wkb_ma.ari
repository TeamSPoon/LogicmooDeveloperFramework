/*
Three guys got together for a dinner, they 've got some food, but it is unclear who will cook.
This is the usual story for the friends, Mike, Peter and Nick, and below is what they have learned from the 
previous dinners:
Mike wants either Nick ot Peter to cook.
Mike knows that Nick does not want Peter to cook.
Peter does not want to cook himself and believes that Mike would not cook anyway.
Also, Peter believes that Mike believes that Nick wants Mike to cook.
Peter wants Mike to know that Peter would not cook himself.

Nick believes that Mike wants Peter to cook, and Nick wants Mike to cook.

However, Peter would cook if he knows (someone tells him) that Nick wants him (Peter) to cook.
Mike would cook if Peter believes (is said) that Nick wants himself (Mike) to cook.
And Nick would cook if no one else does, but would not like to.

The friends take information from each other seriously in spite of the fact that they
sometimes may want to cheat each other. In other words, they always trust each other even though they are
aware that they may be told a lie.
To decide who will cook, they exchange some thoughts on that matter.

Who will finally cook?
Try to be as realistic as possible in your explanation.

*/

allActions([ inform, ask]). %, forgive, conceal,pretend,]).
allAgents([nick, mike, peter]).

want(mike, cook(A, food)):-   not cook(mike, food), A = nick  ; A = peter.
know(mike, not cook(mike, food)).
want(mike, not cook(mike, food)).

%know(mike, ( cook(peter, food) :- inform(mike, peter, want(nick, cook(peter, food))  ))).
%know(peter, know(mike, ( not cook(peter, food) :- inform(mike, peter, want(nick, cook(peter, food))  )))).

know(mike, not want(nick, cook(peter, food))).
know(peter, not cook(mike, food)).



want(peter, not cook(peter, food) ).

%peter follows nick

cook(peter, food) :- know(peter,  want(nick, cook(peter, food))).
cook(mike, food) :- know(peter,  want(nick, cook(mike, food))).
								
know(Agent,  W):- inform(A,Agent, W);cheat(A,Agent, W). 


know(nick, want(mike, cook(peter, food))).

	% need inform(nick, peter, want(nick, cook(mike, food)))
know(peter,  know(nick, want(nick, cook(mike, food))) ).
     
want(nick, not cook(peter, food)).
want(nick, cook(mike, food)).

want(peter, know(mike, not cook(peter, food))).

%%%%
%want(peter, not silence).
%silence:-not inform(_,_,_).

%want(peter, know(peter, cook(Who, food))).
%believe(peter, know(mike, cook(Who, food))).

%% for compiler
believe(a,b).
inform(a,b,c).
cheat(a,b,c).
%happen([]).




/*
inform(nick,peter,want(mike,cook(peter,food))),
cheat(mike,peter,want(nick,cook(peter,food))),
inform(peter,mike,not cook(peter,food)),

cheat(nick,peter,want(mike,cook(peter,food))),
inform(mike,nick,not cook(mike,food)),

inform(nick,peter,not cook(mike,food)),
cheat(mike,nick,cook(mike,food)),

cheat(nick,peter,cook(mike,food)),
inform(mike,peter,not cook(mike,food)),

inform(nick,peter,cook(mike,food)),
cheat(mike,peter,cook(mike,food)),

ask(nick,mike,not cook(mike,food)),
inform(mike,peter,not want(nick,cook(peter,food))),

ask(nick,mike,cook(mike,food)),
ask(mike,nick,not cook(mike,food)) 


*/
/*
inform(nick,peter,want(mike,cook(peter,food))),
cheat(mike,peter,want(nick,cook(peter,food))),
inform(peter,mike,not cook(peter,food)),

cheat(nick,peter,want(mike,cook(peter,food))),
inform(mike,nick,not cook(mike,food)),

inform(nick,peter,not cook(mike,food)),
cheat(mike,nick,cook(mike,food)),

cheat(nick,peter,cook(mike,food)),
inform(mike,peter,not cook(mike,food)),

inform(nick,peter,cook(mike,food)),
cheat(mike,peter,cook(mike,food)),

ask(nick,mike,not cook(mike,food)),
inform(mike,peter,not want(nick,cook(peter,food))),

ask(nick,mike,cook(mike,food)),
answer(mike,nick,not cook(mike,food)) ]
*/
/*
inform(nick,peter,want(mike,cook(peter,food))),
cheat(mike,peter,want(nick,cook(peter,food))),
inform(peter,mike,not cook(peter,food)),

cheat(nick,peter,want(mike,cook(peter,food))),
inform(mike,nick,not cook(mike,food)),

inform(nick,peter,not cook(mike,food)),
cheat(mike,nick,cook(mike,food)),

cheat(nick,peter,cook(mike,food)),
inform(mike,peter,not cook(mike,food)),

inform(nick,peter,cook(mike,food)),
cheat(mike,peter,cook(mike,food)),

ask(nick,mike,not cook(mike,food)),
inform(mike,peter,not want(nick,cook(peter,food))),

ask(nick,mike,cook(mike,food)),
answer(mike,nick,not cook(mike,food)),

ask(nick,mike,want(mike,cook(peter,food))),
answer(mike,nick,cook(mike,food)),

ask(nick,peter,not cook(mike,food)),
answer(mike,nick,want(mike,cook(peter,food))),

ask(nick,peter,cook(mike,food)),
ask(mike,nick,not cook(mike,food)),

answer(nick,mike,not cook(mike,food)),
ask(mike,nick,not want(nick,cook(peter,food))),

answer(nick,mike,not want(nick,cook(peter,food))),
ask(mike,peter,not cook(mike,food)),

ask(nick,peter,want(mike,cook(peter,food))),
ask(mike,peter,not want(nick,cook(peter,food))) ]

*/

