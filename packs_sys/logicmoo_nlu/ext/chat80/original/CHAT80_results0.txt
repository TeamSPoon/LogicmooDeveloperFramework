tmp : test80_result( "Does afghanistan border china ?", 
        into_lexical_segs, 
        [ w( does, [
            alt(pos(vbz)), root(do),loc(1),lnks(1),txt("Does"), 
            truecase('INIT_UPPER'),link(1,'S',r('S',seg(1,5))), 
            old_pos(aux),pos(vbz),spacy,spos(vbz), 
            tense(present),dep_child(root,n(does,1)), 
            dep_child(nsubj,n(china,4)),dep_child(punct,n(?,5)), 
            dep_parent(root,n(does,1)),node(n(does,1)),flair, 
            upos(verb),fner(o),fn('do.01')]), 
          w( afghanistan, [
            alt(pos(jj)), root(afghanistan),pos(nnp),loc(2),lnks(2), 
            txt("afghanistan"),ner('COUNTRY'), 
            truecase('INIT_UPPER'),entitylink('Afghanistan'), 
            link(1,NP,r(NP,seg(2,2))), link(2,'S',r('S',seg(1,5))),spacy,spos(nnp), 
            form(sg),dep_parent(compound,n(china,4)), 
            node(n(afghanistan,2)),flair,upos(propn), 
            fner('s-loc'),fn('_')]), 
          w( border, [
            root(border), loc(3),lnks(2),txt("border"), 
            truecase('INIT_UPPER'),link(1,'NP',r('NP',seg(3,4))), 
            link(2,'S',r('S',seg(1,5))),old_pos(nn),spacy, 
            spos(nnp),form(sg), 
            dep_parent(compound,n(china,4)),node(n(border,3)), 
            old_pos(nnp),pos(vb),allen_srl, 
            srl(border,[o(V,[border]),o(ARG1,[china])]), flair,upos(noun),fner(o),fn('_')]), 
          w( china, [
            root(china), loc(4),lnks(2),txt("china"),ner('COUNTRY'), 
            truecase('INIT_UPPER'),entitylink('Porcelain'), 
            link(1,NP,r(NP,seg(3,4))), link(2,'S',r('S',seg(1,5))),old_pos(nn),pos(nnp), 
            spacy,spos(nnp),form(sg), 
            dep_child(compound,n(afghanistan,2)), 
            dep_child(compound,n(border,3)), dep_parent(nsubj,n(does,1)),node(n(china,4)), 
            flair,upos(noun),fner('s-loc'),fn('_')]), 
          w( ?, [
            pos('.'), root(?),loc(5),lnks(1),txt("?"), 
            link(1,'S',r('S',seg(1,5))),spacy,spos('.'), 
            dep_parent(punct,n(does,1)),node(n(?,5)),flair, 
            upos(punct),fner(o),fn('_')])]).
tmp : test80_result( "Does afghanistan border china ?", 
        sentence80, 
        q( s( np(3+sg,nameOf(afghanistan,[]),[]), 
              verb(main+tv,border,active,pres+fin,[],posP(PosP)), 
              [ arg(dirO(DirO),np(3+sg,nameOf(china,[]),[]))], 
              []))).
tmp : test80_result( "Does afghanistan border china ?", 
        i_sentence, 
        question80( [], 
          pred( 
             quantV( identityQ(IdentityQ), 
               thing&geo&country-C, '`'(named(C,afghanistan)),'`'(true), 
               [], 
               thing&geo&country-C), 
             identityQ(IdentityQ18), 
             generic_pred(thing,border,C,B), 
             [ quantV( identityQ(IdentityQ19), 
                 thing&geo&country-B, '`'(named(B,china)),'`'(true), 
                 [], 
                 thing&geo&country-B)]))).
tmp : test80_result( "Does afghanistan border china ?", 
        qplan, 
        answer80([]) :- 
          named(Generic_China16,china) , 
          named(Border_Afghanistan17,afghanistan) , 
          generic_pred(thing,border,Border_Afghanistan17,Generic_China16)).
tmp : test80_result( "Does afghanistan border china ?", 
        into_lexical_segs, 
        [ w( does, [
            alt(pos(vbz)), root(do),loc(1),lnks(1),txt("Does"), 
            truecase('INIT_UPPER'),link(1,'S',r('S',seg(1,5))), 
            old_pos(aux),pos(vbz),spacy,spos(vbz), 
            tense(present),dep_child(root,n(does,1)), 
            dep_child(nsubj,n(china,4)),dep_child(punct,n(?,5)), 
            dep_parent(root,n(does,1)),node(n(does,1)),flair, 
            upos(verb),fner(o),fn('do.01')]), 
          w( afghanistan, [
            alt(pos(jj)), root(afghanistan),pos(nnp),loc(2),lnks(2), 
            txt("afghanistan"),ner('COUNTRY'), 
            truecase('INIT_UPPER'),entitylink('Afghanistan'), 
            link(1,NP,r(NP,seg(2,2))), link(2,'S',r('S',seg(1,5))),spacy,spos(nnp), 
            form(sg),dep_parent(compound,n(china,4)), 
            node(n(afghanistan,2)),flair,upos(propn), 
            fner('s-loc'),fn('_')]), 
          w( border, [
            root(border), loc(3),lnks(2),txt("border"), 
            truecase('INIT_UPPER'),link(1,'NP',r('NP',seg(3,4))), 
            link(2,'S',r('S',seg(1,5))),old_pos(nn),spacy, 
            spos(nnp),form(sg), 
            dep_parent(compound,n(china,4)),node(n(border,3)), 
            old_pos(nnp),pos(vb),allen_srl, 
            srl(border,[o(V,[border]),o(ARG1,[china])]), flair,upos(noun),fner(o),fn('_')]), 
          w( china, [
            root(china), loc(4),lnks(2),txt("china"),ner('COUNTRY'), 
            truecase('INIT_UPPER'),entitylink('Porcelain'), 
            link(1,NP,r(NP,seg(3,4))), link(2,'S',r('S',seg(1,5))),old_pos(nn),pos(nnp), 
            spacy,spos(nnp),form(sg), 
            dep_child(compound,n(afghanistan,2)), 
            dep_child(compound,n(border,3)), dep_parent(nsubj,n(does,1)),node(n(china,4)), 
            flair,upos(noun),fner('s-loc'),fn('_')]), 
          w( ?, [
            pos('.'), root(?),loc(5),lnks(1),txt("?"), 
            link(1,'S',r('S',seg(1,5))),spacy,spos('.'), 
            dep_parent(punct,n(does,1)),node(n(?,5)),flair, 
            upos(punct),fner(o),fn('_')])]).
tmp : test80_result( "Does afghanistan border china ?", 
        sentence80, 
        q( s( np(3+sg,nameOf(afghanistan,[]),[]), 
              verb(main+tv,border,active,pres+fin,[],posP(PosP)), 
              [ arg(dirO(DirO),np(3+sg,nameOf(china,[]),[]))], 
              []))).
tmp : test80_result( "Does afghanistan border china ?", 
        i_sentence, 
        question80( [], 
          pred( 
             quantV( identityQ(IdentityQ), 
               thing&geo&country-C, '`'(named(C,afghanistan)),'`'(true), 
               [], 
               thing&geo&country-C), 
             identityQ(IdentityQ18), 
             generic_pred(thing,border,C,B), 
             [ quantV( identityQ(IdentityQ19), 
                 thing&geo&country-B, '`'(named(B,china)),'`'(true), 
                 [], 
                 thing&geo&country-B)]))).
tmp : test80_result( "Does afghanistan border china ?", 
        qplan, 
        answer80([]) :- 
          named(Generic_China16,china) , 
          named(Border_Afghanistan17,afghanistan) , 
          generic_pred(thing,border,Border_Afghanistan17,Generic_China16)).
tmp : test80_result( "Does afghanistan border china ?", 
        into_lexical_segs, 
        [ w( does, [
            alt(pos(vbz)), root(do),loc(1),lnks(1),txt("Does"), 
            truecase('INIT_UPPER'),link(1,'S',r('S',seg(1,5))), 
            old_pos(aux),pos(vbz),spacy,spos(vbz), 
            tense(present),dep_child(root,n(does,1)), 
            dep_child(nsubj,n(china,4)),dep_child(punct,n(?,5)), 
            dep_parent(root,n(does,1)),node(n(does,1)),flair, 
            upos(verb),fner(o),fn('do.01')]), 
          w( afghanistan, [
            alt(pos(jj)), root(afghanistan),pos(nnp),loc(2),lnks(2), 
            txt("afghanistan"),ner('COUNTRY'), 
            truecase('INIT_UPPER'),entitylink('Afghanistan'), 
            link(1,NP,r(NP,seg(2,2))), link(2,'S',r('S',seg(1,5))),spacy,spos(nnp), 
            form(sg),dep_parent(compound,n(china,4)), 
            node(n(afghanistan,2)),flair,upos(propn), 
            fner('s-loc'),fn('_')]), 
          w( border, [
            root(border), loc(3),lnks(2),txt("border"), 
            truecase('INIT_UPPER'),link(1,'NP',r('NP',seg(3,4))), 
            link(2,'S',r('S',seg(1,5))),old_pos(nn),spacy, 
            spos(nnp),form(sg), 
            dep_parent(compound,n(china,4)),node(n(border,3)), 
            old_pos(nnp),pos(vb),allen_srl, 
            srl(border,[o(V,[border]),o(ARG1,[china])]), flair,upos(noun),fner(o),fn('_')]), 
          w( china, [
            root(china), loc(4),lnks(2),txt("china"),ner('COUNTRY'), 
            truecase('INIT_UPPER'),entitylink('Porcelain'), 
            link(1,NP,r(NP,seg(3,4))), link(2,'S',r('S',seg(1,5))),old_pos(nn),pos(nnp), 
            spacy,spos(nnp),form(sg), 
            dep_child(compound,n(afghanistan,2)), 
            dep_child(compound,n(border,3)), dep_parent(nsubj,n(does,1)),node(n(china,4)), 
            flair,upos(noun),fner('s-loc'),fn('_')]), 
          w( ?, [
            pos('.'), root(?),loc(5),lnks(1),txt("?"), 
            link(1,'S',r('S',seg(1,5))),spacy,spos('.'), 
            dep_parent(punct,n(does,1)),node(n(?,5)),flair, 
            upos(punct),fner(o),fn('_')])]).
tmp : test80_result( "Does afghanistan border china ?", 
        sentence80, 
        q( s( np(3+sg,nameOf(afghanistan,[]),[]), 
              verb(main+tv,border,active,pres+fin,[],posP(PosP)), 
              [ arg(dirO(DirO),np(3+sg,nameOf(china,[]),[]))], 
              []))).
tmp : test80_result( "Does afghanistan border china ?", 
        i_sentence, 
        question80( [], 
          pred( 
             quantV( identityQ(IdentityQ), 
               thing&geo&country-C, '`'(named(C,afghanistan)),'`'(true), 
               [], 
               thing&geo&country-C), 
             identityQ(IdentityQ18), 
             generic_pred(thing,border,C,B), 
             [ quantV( identityQ(IdentityQ19), 
                 thing&geo&country-B, '`'(named(B,china)),'`'(true), 
                 [], 
                 thing&geo&country-B)]))).
tmp : test80_result( "Does afghanistan border china ?", 
        qplan, 
        answer80([]) :- 
          named(Generic_China16,china) , 
          named(Border_Afghanistan17,afghanistan) , 
          generic_pred(thing,border,Border_Afghanistan17,Generic_China16)).
tmp : test80_result( "Does america contain New york ?", 
        into_lexical_segs, 
        [ w( does, [
            alt(pos(vbz)), root(do),loc(1),lnks(1),txt("Does"), 
            truecase('INIT_UPPER'),link(1,'S',r('S',seg(1,6))), 
            old_pos(aux),pos(vbz),spacy,spos(vbz), 
            tense(present),dep_parent(aux,n(contain,3)), 
            node(n(does,1)),flair,upos(verb),fner(o), 
            fn('do.01')]), 
          w( america, [
            pos(nnp), root(america),loc(2),lnks(2), 
            txt("america"),ner('COUNTRY'), 
            truecase('INIT_UPPER'),entitylink('America'), 
            corefed,#(2),txt(["america"]), 
            type('PROPER'),numb('SINGULAR'),gender('NEUTRAL'), 
            animacy('INANIMATE'),repm(@(true)), 
            link(1,NP,r(NP,seg(2,2))), link(2,'S',r('S',seg(1,6))),spacy,spos(nnp), 
            form(sg),dep_parent(nsubj,n(contain,3)), 
            node(n(america,2)),flair,upos(propn), 
            fner('s-loc'),fn('_')]), 
          w( contain, [
            pos(vb), root(contain),loc(3),lnks(2), 
            txt("contain"),truecase('LOWER'), 
            link(1,VP,r(VP,seg(3,5))), link(2,'S',r('S',seg(1,6))),spacy,spos(vb), 
            dep_child(aux,n(does,1)),dep_child(nsubj,n(america,2)), 
            dep_child(root,n(contain,3)),dep_child(dobj,n(york,5)), 
            dep_child(punct,n(?,6)),dep_parent(root,n(contain,3)), 
            node(n(contain,3)),allen_srl, 
            srl( contain, [
              o(ARG0,[america]), 
              o(V,[contain]), 
              o(ARG1,[New,york])]), flair,upos(verb),fner(o),fn('contain.01')]), 
          w( new, [
            pos(nnp), root('New'),loc(4),lnks(3),txt("New"), 
            ner('STATE_OR_PROVINCE'),truecase('INIT_UPPER'), 
            entitylink('New_York'),link(1,'NP',r('NP',seg(4,5))), 
            link(2,VP,r(VP,seg(3,5))), link(3,'S',r('S',seg(1,6))),spacy,spos(nnp), 
            form(sg),dep_parent(compound,n(york,5)), 
            node(n(new,4)),flair,upos(propn), 
            fner('b-loc'),fn('_')]), 
          w( york, [
            pos(nnp), root(york),loc(5),lnks(3),txt("york"), 
            ner('STATE_OR_PROVINCE'),truecase('INIT_UPPER'), 
            entitylink('New_York'),link(1,'NP',r('NP',seg(4,5))), 
            link(2,VP,r(VP,seg(3,5))), link(3,'S',r('S',seg(1,6))),spacy,spos(nnp), 
            form(sg),dep_child(compound,n(new,4)), 
            dep_parent(dobj,n(contain,3)),node(n(york,5)), 
            flair,upos(propn),fner('e-loc'),fn('_')]), 
          w( ?, [
            pos('.'), root(?),loc(6),lnks(1),txt("?"), 
            link(1,'S',r('S',seg(1,6))),spacy,spos('.'), 
            dep_parent(punct,n(contain,3)),node(n(?,6)),flair, 
            upos(punct),fner(o),fn('_')])]).
tmp : test80_result( "Does america contain New york ?", 
        sentence80, 
        q( s( np(3+sg,nameOf(america,[]),[]), 
              verb(main+tv,contain,active,pres+fin,[],posP(PosP)), 
              [ arg(dirO(DirO),np(3+sg,nameOf(new_york,[]),[]))], 
              []))).
tmp : test80_result( "Does america contain New york ?", 
        i_sentence, 
        question80( [], 
          pred( 
             quantV( identityQ(IdentityQ), 
               thing&geo&continent-C, '`'(named(C,america)),'`'(true), 
               [], 
               thing&geo&continent-C), 
             identityQ(IdentityQ18), 
             trans_pred(thing,contain,C,B), 
             [ quantV( identityQ(IdentityQ19), 
                 thing&City&city-B, '`'(named(B,new_york)),'`'(true), 
                 [], 
                 thing&City&city-B)]))).
tmp : test80_result( "Does america contain New york ?", 
        qplan, 
        answer80([]) :- 
          named(New_york,new_york) , 
          named(Contain_America,america) , 
          trans_pred(thing,contain,Contain_America,New_york)).
tmp : test80_result( "Does Mexico border the United States ?", 
        into_lexical_segs, 
        [ w( does, [
            alt(pos(vbz)), root(do),loc(1),lnks(1),txt("Does"), 
            truecase('INIT_UPPER'),link(1,'S',r('S',seg(1,7))), 
            old_pos(aux),pos(vbz),spacy,spos(vbz), 
            tense(present),dep_parent(aux,n(border,3)), 
            node(n(does,1)),flair,upos(verb),fner(o), 
            fn('do.01')]), 
          w( mexico, [
            pos(nnp), root('Mexico'),loc(2),lnks(2), 
            txt("Mexico"),ner('COUNTRY'), 
            truecase('INIT_UPPER'),entitylink('Mexico'), 
            corefed,#(1),txt(["Mexico"]), 
            type('PROPER'),numb('SINGULAR'),gender('NEUTRAL'), 
            animacy('INANIMATE'),repm(@(true)), 
            link(1,NP,r(NP,seg(2,2))), link(2,'S',r('S',seg(1,7))),spacy,spos(nnp), 
            form(sg),dep_parent(nsubj,n(border,3)), 
            node(n(mexico,2)),flair,upos(propn), 
            fner('s-loc'),fn('_')]), 
          w( border, [
            alt(pos(vb)), root(border),loc(3),lnks(2),txt("border"), 
            truecase('LOWER'),link(1,'VP',r('VP',seg(3,6))), 
            link(2,'S',r('S',seg(1,7))),old_pos(nn),pos(vb), 
            spacy,spos(vb),dep_child(aux,n(does,1)), 
            dep_child(nsubj,n(mexico,2)),dep_child(root,n(border,3)), 
            dep_child(dobj,n(states,6)),dep_child(punct,n(?,7)), 
            dep_parent(root,n(border,3)),node(n(border,3)), 
            allen_srl, 
            srl( border, [
              o(ARG0,[Mexico]), 
              o(V,[border]), 
              o(ARG1,[the,United,States])]), flair,upos(verb),fner(o),fn('border.01')]), 
          w( the, [
            pos(dt), root(the),loc(4),lnks(3),txt("the"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(4,6))), 
            link(2,VP,r(VP,seg(3,6))), link(3,'S',r('S',seg(1,7))),spacy,spos(dt), 
            dep_parent(det,n(states,6)),node(n(the,4)),flair, 
            upos(det),fner(o),fn('_')]), 
          w( united, [
            pos(nnp), root('United'),loc(5),lnks(3), 
            txt("United"),ner('COUNTRY'), 
            truecase('INIT_UPPER'),entitylink('United_States'), 
            link(1,NP,r(NP,seg(4,6))), 
            link(2,VP,r(VP,seg(3,6))), link(3,'S',r('S',seg(1,7))),spacy,spos(nnp), 
            form(sg),dep_parent(compound,n(states,6)), 
            node(n(united,5)),flair,upos(propn), 
            fner('b-loc'),fn('_')]), 
          w( states, [
            alt(pos(nnp)), root('States'),pos(nnps),loc(6),lnks(3), 
            txt("States"),ner('COUNTRY'), 
            truecase('INIT_UPPER'),entitylink('United_States'), 
            link(1,NP,r(NP,seg(4,6))), 
            link(2,VP,r(VP,seg(3,6))), link(3,'S',r('S',seg(1,7))),spacy,spos(nnp), 
            form(sg),dep_child(det,n(the,4)), 
            dep_child(compound,n(united,5)), dep_parent(dobj,n(border,3)),node(n(states,6)), 
            flair,upos(propn),fner('e-loc'),fn('_')]), 
          w( ?, [
            pos('.'), root(?),loc(7),lnks(1),txt("?"), 
            link(1,'S',r('S',seg(1,7))),spacy,spos('.'), 
            dep_parent(punct,n(border,3)),node(n(?,7)),flair, 
            upos(punct),fner(o),fn('_')])]).
tmp : test80_result( "Does Mexico border the United States ?", 
        sentence80, 
        q( s( np(3+sg,nameOf(mexico,[]),[]), 
              verb(main+tv,border,active,pres+fin,[],posP(PosP)), 
              [ arg(dirO(DirO),np(3+sg,nameOf(united_states,[]),[]))], 
              []))).
tmp : test80_result( "Does Mexico border the United States ?", 
        i_sentence, 
        question80( [], 
          pred( 
             quantV( identityQ(IdentityQ), 
               thing&geo&country-C, '`'(named(C,mexico)),'`'(true), 
               [], 
               thing&geo&country-C), 
             identityQ(IdentityQ18), 
             generic_pred(thing,border,C,B), 
             [ quantV( identityQ(IdentityQ19), 
                 thing&geo&country-B, '`'(named(B,united_states)),'`'(true), 
                 [], 
                 thing&geo&country-B)]))).
tmp : test80_result( "Does Mexico border the United States ?", 
        qplan, 
        answer80([]) :- 
          named(Generic_United_states,united_states) , 
          named(Border_Mexico,mexico) , 
          generic_pred(thing,border,Border_Mexico,Generic_United_states)).
tmp : test80_result( "Does the atlantic border spain ?", 
        into_lexical_segs, 
        [ w( does, [
            alt(pos(vbz)), root(do),loc(1),lnks(1),txt("Does"), 
            truecase('INIT_UPPER'),link(1,'S',r('S',seg(1,6))), 
            old_pos(aux),pos(vb),flair,upos(verb), 
            fner(o),fn('do.01')]), 
          w( the, [
            pos(dt), root(the),loc(2),lnks(2),txt("the"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(2,4))), 
            link(2,'S',r('S',seg(1,6))),flair,upos(det), 
            fner(o),fn('_')]), 
          w( atlantic, [
            pos(jj), root(atlantic),loc(3),lnks(2), 
            txt("atlantic"),truecase('INIT_UPPER'), 
            link(1,NP,r(NP,seg(2,4))), link(2,'S',r('S',seg(1,6))),flair,upos(adj), 
            fner('s-misc'),fn('_')]), 
          w( border, [
            pos(nn), root(border),loc(4),lnks(2),txt("border"), 
            truecase('INIT_UPPER'),link(1,'NP',r('NP',seg(2,4))), 
            link(2,'S',r('S',seg(1,6))),flair,upos(noun), 
            fner(o),fn('_')]), 
          w( spain, [
            alt(pos(nn)), root(spain),loc(5),lnks(2),txt("spain"), 
            ner('COUNTRY'),truecase('INIT_UPPER'), 
            entitylink('Spain'),link(1,'NP',r('NP',seg(5,5))), 
            link(2,'S',r('S',seg(1,6))),old_pos(nnp),pos(vb), 
            flair,upos(verb),fner(o),fn('_')]), 
          w( ?, [
            pos('.'), root(?),loc(6),lnks(1),txt("?"), 
            link(1,'S',r('S',seg(1,6))),flair,upos(punct), 
            fner(o),fn('_')])]).
tmp : test80_result( "Does the atlantic border spain ?", 
        sentence80, 
        q( s( np(3+sg,nameOf(atlantic,[]),[]), 
              verb(main+tv,border,active,pres+fin,[],posP(PosP)), 
              [ arg(dirO(DirO),np(3+sg,nameOf(spain,[]),[]))], 
              []))).
tmp : test80_result( "Does the atlantic border spain ?", 
        i_sentence, 
        question80( [], 
          pred( 
             quantV( identityQ(IdentityQ), 
               thing&geo&seamass-C, '`'(named(C,atlantic)),'`'(true), 
               [], 
               thing&geo&seamass-C), 
             identityQ(IdentityQ18), 
             generic_pred(thing,border,C,B), 
             [ quantV( identityQ(IdentityQ19), 
                 thing&geo&country-B, '`'(named(B,spain)),'`'(true), 
                 [], 
                 thing&geo&country-B)]))).
tmp : test80_result( "Does the atlantic border spain ?", 
        qplan, 
        answer80([]) :- 
          named(Generic_Spain,spain) , 
          named(Border_Atlantic,atlantic) , 
          generic_pred(thing,border,Border_Atlantic,Generic_Spain)).
tmp : test80_result( "Does the population of china exceed 1000 million ?", 
        into_lexical_segs, 
        [ w( does, [
            alt(pos(vbz)), root(do),loc(1),lnks(1),txt("Does"), 
            truecase('INIT_UPPER'),link(1,'S',r('S',seg(1,9))), 
            old_pos(aux),pos(vbz),spacy,spos(vbz), 
            tense(present),dep_child(root,n(does,1)), 
            dep_child(nsubj,n(spain,5)),dep_child(punct,n(?,6)), 
            dep_parent(root,n(does,1)),node(n(does,1)),flair, 
            upos(verb),fner(o),fn('do.01')]), 
          w( the, [
            pos(dt), root(the),loc(2),lnks(3),txt("the"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(2,3))), 
            link(2,NP,r(NP,seg(2,5))), link(3,'S',r('S',seg(1,9))),spacy,spos(dt), 
            dep_parent(det,n(spain,5)),node(n(the,2)),flair, 
            upos(det),fner(o),fn('_')]), 
          w( population, [
            pos(nn), root(population),loc(3),lnks(3), 
            txt("population"),truecase('LOWER'), 
            link(1,NP,r(NP,seg(2,3))), 
            link(2,NP,r(NP,seg(2,5))), link(3,'S',r('S',seg(1,9))),flair,upos(noun), 
            fner(o),fn('_')]), 
          w( of, [
            pos(in), root(of),loc(4),lnks(3),txt("of"), 
            truecase('LOWER'),link(1,'PP',r('PP',seg(4,5))), 
            link(2,NP,r(NP,seg(2,5))), link(3,'S',r('S',seg(1,9))),flair,upos(adp), 
            fner(o),fn('_')]), 
          w( china, [
            root(china), loc(5),lnks(4),txt("china"),ner('COUNTRY'), 
            truecase('INIT_UPPER'),entitylink('Porcelain'), 
            link(1,NP,r(NP,seg(5,5))), 
            link(2,PP,r(PP,seg(4,5))), 
            link(3,NP,r(NP,seg(2,5))), link(4,'S',r('S',seg(1,9))),old_pos(nn),pos(nnp), 
            flair,upos(propn),fner('s-loc'),fn('_')]), 
          w( exceed, [
            alt(pos(vbp)), root(exceed),pos(vb),loc(6),lnks(2), 
            txt("exceed"),truecase('INIT_UPPER'), 
            link(1,VP,r(VP,seg(6,8))), link(2,'S',r('S',seg(1,9))),allen_srl, 
            srl( exceed, [
              o(ARG0,[the,population,of,china]), 
              o(V,[exceed]), 
              o(ARG1,[1000,million])]), flair,upos(verb),fner(o),fn('exceed.01')]), 
          w( '1000', [
            pos(cd), root('1000'),loc(7),lnks(3),txt("1000"), 
            ner('NUMBER'),normalizedNER(1000000000.0), 
            link(1,NP,r(NP,seg(7,8))), 
            link(2,VP,r(VP,seg(6,8))), link(3,'S',r('S',seg(1,9))),flair,upos(num), 
            fner(o),fn('_')]), 
          w( million, [
            pos(cd), root(million),loc(8),lnks(3), 
            txt("million"),ner('NUMBER'), 
            normalizedNER(1000000000.0),truecase('LOWER'), 
            link(1,NP,r(NP,seg(7,8))), 
            link(2,VP,r(VP,seg(6,8))), link(3,'S',r('S',seg(1,9))),flair,upos(num), 
            fner(o),fn('_')]), 
          w( ?, [
            pos('.'), root(?),loc(9),lnks(1),txt("?"), 
            link(1,'S',r('S',seg(1,9))),spacy,spos('.'), 
            loc(6),dep_parent(punct,n(does,1)),node(n(?,6)), 
            flair,upos(punct),fner(o),fn('_')])]).
tmp : test80_result( "Does the population of china exceed 1000 million ?", 
        sentence80, 
        q( s( np(3+sg,np_head(det(the(sg)),[],population),[prep_phrase(prep(of),np(3+sg,nameOf(china,[]),[]))]), 
              verb(main+tv,exceed,active,pres+fin,[],posP(PosP)), 
              [ arg(dirO(DirO),np(3+pl,np_head(quantV(same,1000),[],million),[]))], 
              []))).
tmp : test80_result( "Does the population of china exceed 1000 million ?", 
        i_sentence, 
        question80( [], 
          pred( 
             quantV( det(the(sg)), 
               value&units&population-B, 
               '`'(count_pred(thing,population,C,B)), 
               '`'(true), 
               [ quantV( identityQ(IdentityQ), 
                   thing&geo&country-C, '`'(named(C,china)),'`'(true), 
                   [], 
                   thing&geo&country-C)], 
               value&units&population-B), 
             identityQ(IdentityQ18), 
             exceeds(B,D), 
             [ quantV( voidQ(VoidQ), 
                 value&units&population-D, '`'(D= --(1000,million)),'`'(true), 
                 [], 
                 value&units&population-D)]))).
tmp : test80_result( "Does the population of china exceed 1000 million ?", 
        qplan, 
        answer80([]) :-  
          ^( Count, 
            ( named(Population_China16,china)  ,
              count_pred(thing,population,Population_China16,Count) , 
              exceeds(Count,--(1000,million))))).
tmp : test80_result( "Does the population of china exceed the population of india ?", 
        into_lexical_segs, 
        [ w( does, [
            alt(pos(vbz)), root(do),loc(1),lnks(1),txt("Does"), 
            truecase('INIT_UPPER'),link(1,'S',r('S',seg(1,11))), 
            old_pos(aux),pos(vb),flair,upos(verb), 
            fner(o),fn('do.01')]), 
          w( the, [
            pos(dt), root(the),loc(2),lnks(3),txt("the"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(2,3))), 
            link(2,NP,r(NP,seg(2,5))), link(3,'S',r('S',seg(1,11))),flair,upos(det), 
            fner(o),fn('_')]), 
          w( population, [
            pos(nn), root(population),loc(3),lnks(3), 
            txt("population"),truecase('LOWER'), 
            link(1,NP,r(NP,seg(2,3))), 
            link(2,NP,r(NP,seg(2,5))), link(3,'S',r('S',seg(1,11))),flair,upos(noun), 
            fner(o),fn('_')]), 
          w( of, [
            pos(in), root(of),loc(4),lnks(3),txt("of"), 
            truecase('LOWER'),link(1,'PP',r('PP',seg(4,5))), 
            link(2,NP,r(NP,seg(2,5))), link(3,'S',r('S',seg(1,11))),flair,upos(adp), 
            fner(o),fn('_')]), 
          w( china, [
            root(china), loc(5),lnks(4),txt("china"),ner('COUNTRY'), 
            truecase('INIT_UPPER'),entitylink('Porcelain'), 
            link(1,NP,r(NP,seg(5,5))), 
            link(2,PP,r(PP,seg(4,5))), 
            link(3,NP,r(NP,seg(2,5))), link(4,'S',r('S',seg(1,11))),old_pos(nn),pos(nnp), 
            flair,upos(propn),fner('s-loc'),fn('_')]), 
          w( exceed, [
            alt(pos(vbp)), root(exceed),pos(vb),loc(6),lnks(2), 
            txt("exceed"),truecase('LOWER'), 
            link(1,VP,r(VP,seg(6,10))), link(2,'S',r('S',seg(1,11))),allen_srl, 
            srl( exceed, [
              o(ARG0,[the,population,of,china]), 
              o(V,[exceed]), 
              o(ARG1,[the,population,of,india])]), flair,upos(verb),fner(o),fn('exceed.01')]), 
          w( the, [
            pos(dt), root(the),loc(7),lnks(4),txt("the"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(7,8))), 
            link(2,NP,r(NP,seg(7,10))), 
            link(3,VP,r(VP,seg(6,10))), link(4,'S',r('S',seg(1,11))),flair,upos(det), 
            fner(o),fn('_')]), 
          w( population, [
            pos(nn), root(population),loc(8),lnks(4), 
            txt("population"),truecase('LOWER'), 
            link(1,NP,r(NP,seg(7,8))), 
            link(2,NP,r(NP,seg(7,10))), 
            link(3,VP,r(VP,seg(6,10))), link(4,'S',r('S',seg(1,11))),flair,upos(noun), 
            fner(o),fn('_')]), 
          w( of, [
            pos(in), root(of),loc(9),lnks(4),txt("of"), 
            truecase('LOWER'),link(1,'PP',r('PP',seg(9,10))), 
            link(2,NP,r(NP,seg(7,10))), 
            link(3,VP,r(VP,seg(6,10))), link(4,'S',r('S',seg(1,11))),flair,upos(adp), 
            fner(o),fn('_')]), 
          w( india, [
            pos(nnp), root(india),loc(10),lnks(5),txt("india"), 
            ner('COUNTRY'),truecase('INIT_UPPER'), 
            entitylink('India'),corefed,#(1), 
            txt(["india"]),type('PROPER'), 
            numb('SINGULAR'),gender('NEUTRAL'), 
            animacy('INANIMATE'),repm(@(true)), 
            link(1,NP,r(NP,seg(10,10))), 
            link(2,PP,r(PP,seg(9,10))), 
            link(3,NP,r(NP,seg(7,10))), 
            link(4,VP,r(VP,seg(6,10))), link(5,'S',r('S',seg(1,11))),flair,upos(propn), 
            fner('s-loc'),fn('_')]), 
          w( ?, [
            pos('.'), root(?),loc(11),lnks(1),txt("?"), 
            link(1,'S',r('S',seg(1,11))),flair,upos(punct), 
            fner(o),fn('_')])]).
tmp : test80_result( "Does the population of china exceed the population of india ?", 
        sentence80, 
        q( s( np(3+sg,np_head(det(the(sg)),[],population),[prep_phrase(prep(of),np(3+sg,nameOf(china,[]),[]))]), 
              verb(main+tv,exceed,active,pres+fin,[],posP(PosP)), 
              [ arg( dirO(DirO), 
                  np(3+sg,np_head(det(the(sg)),[],population),[prep_phrase(prep(of),np(3+sg,nameOf(india,[]),[]))]))], 
              []))).
tmp : test80_result( "Does the population of china exceed the population of india ?", 
        i_sentence, 
        question80( [], 
          pred( 
             quantV( det(the(sg)), 
               value&units&population-B, 
               '`'(count_pred(thing,population,C,B)), 
               '`'(true), 
               [ quantV( identityQ(IdentityQ), 
                   thing&geo&country-C, '`'(named(C,china)),'`'(true), 
                   [], 
                   thing&geo&country-C)], 
               value&units&population-B), 
             identityQ(IdentityQ18), 
             exceeds(B,D), 
             [ quantV( det(the(sg)), 
                 value&units&population-D, 
                 '`'(count_pred(thing,population,E,D)), 
                 '`'(true), 
                 [ quantV( identityQ(IdentityQ19), 
                     thing&geo&country-E, '`'(named(E,india)),'`'(true), 
                     [], 
                     thing&geo&country-E)], 
                 value&units&population-D)]))).
tmp : test80_result( "Does the population of china exceed the population of india ?", 
        qplan, 
        answer80([]) :-  
          ^( Count_Exceeds, 
            ( named(Population_China16,china)  ,
              count_pred(thing,population,Population_China16,Count_Exceeds) , 
              ^( Exceeds_Count, 
                ( named(Population_India,india)  ,
                  count_pred(thing,population,Population_India,Exceeds_Count) , 
                  exceeds(Count_Exceeds,Exceeds_Count)))))).
tmp : test80_result( "How large is the smallest american country ?", 
        into_lexical_segs, 
        [ w( how, [
            pos(wrb), root(how),loc(1),lnks(2),txt("How"), 
            truecase('INIT_UPPER'),link(1,'NP',r('NP',seg(1,2))), 
            link(2,'SBAR',r('SBAR',seg(1,8))),flair,upos(adv), 
            fner(o),fn('_')]), 
          w( large, [
            pos(jj), root(large),loc(2),lnks(2),txt("large"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(1,2))), 
            link(2,'SBAR',r('SBAR',seg(1,8))),flair,upos(adj), 
            fner(o),fn('_')]), 
          w( is, [
            alt(pos(vbz)), root(be),loc(3),lnks(2),txt("is"), 
            truecase('LOWER'),link(1,'S',r('S',seg(3,7))), 
            link(2,'SBAR',r('SBAR',seg(1,8))),old_pos(aux), 
            pos(vb),allen_srl, 
            srl( is, [
              o(ARG2,[How,large]), 
              o(V,[is]), 
              o(ARG1,[the,smallest,american,country])]), flair,upos(verb),fner(o),fn('be.01')]), 
          w( the, [
            pos(dt), root(the),loc(4),lnks(3),txt("the"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(4,7))), 
            link(2,S,r(S,seg(3,7))), link(3,'SBAR',r('SBAR',seg(1,8))),spacy,spos(dt), 
            loc(2),dep_parent(det,n(population,3)), 
            node(n(the,2)),flair,upos(det),fner(o), 
            fn('_')]), 
          w( smallest, [
            pos(jjs), root(smallest),loc(5),lnks(4), 
            txt("smallest"),truecase('LOWER'), 
            link(1,ADJP,r(ADJP,seg(5,6))), 
            link(2,NP,r(NP,seg(4,7))), 
            link(3,S,r(S,seg(3,7))), link(4,'SBAR',r('SBAR',seg(1,8))),flair,upos(adj), 
            fner(o),fn('_')]), 
          w( american, [
            pos(jj), root(american),loc(6),lnks(4), 
            txt("american"),ner('NATIONALITY'), 
            truecase('INIT_UPPER'),entitylink('United_States'), 
            link(1,ADJP,r(ADJP,seg(5,6))), 
            link(2,NP,r(NP,seg(4,7))), 
            link(3,S,r(S,seg(3,7))), link(4,'SBAR',r('SBAR',seg(1,8))),flair,upos(adj), 
            fner('s-misc'),fn('_')]), 
          w( country, [
            pos(nn), root(country),loc(7),lnks(3), 
            txt("country"),truecase('LOWER'), 
            link(1,NP,r(NP,seg(4,7))), 
            link(2,S,r(S,seg(3,7))), link(3,'SBAR',r('SBAR',seg(1,8))),flair, 
            upos(noun),fner(o),fn('_')]), 
          w( ?, [
            pos('.'), root(?),loc(8),lnks(1),txt("?"), 
            link(1,'SBAR',r('SBAR',seg(1,8))),spacy,spos('.'), 
            loc(9),dep_parent(punct,n(exceed,6)),node(n(?,9)), 
            flair,upos(punct),fner(o),fn('_')])]).
tmp : test80_result( "How large is the smallest american country ?", 
        sentence80, 
        whq( value&size&area-B, 
          s( np(3+sg,np_head(det(the(sg)),[sup(most,adj(small)),adj(american)],country),[]), 
             verb(aux+be(Be),be(Be),active,pres+fin,[],posP(PosP)), 
             [ arg(arg_pred(Arg19),value80(adj(large),wh(value&size&area-B)))], 
             []))).
tmp : test80_result( "How large is the smallest american country ?", 
        i_sentence, 
        question80( [value&size&area-B], 
          pred( 
             quantV( det(the(sg)), 
               thing&Thing-C, 
               aggr( min, 
                 C, 
                 [E,F], 
                 '`'(ti(country,F)), 
                 '`'(measure_pred(thing,area,F,E))&'`'(ti(american,F))&'`'(true)), 
               '`'(true), 
               [], 
               thing&Thing-C), identityQ(IdentityQ),true, 
             ['`'(measure_pred(thing,area,C,B))]))).
tmp : test80_result( "How large is the smallest american country ?", 
        qplan, 
        answer80([Measure]) :-  
          ^( Aggregate80_Area, 
            ( ^( SetOf_Min, 
                ( setOf( Measure_Kw:American_Area_Country, 
                    ( ti(country,American_Area_Country)  ,
                      measure_pred(thing,area,American_Area_Country,Measure_Kw) , 
                      ti(american,American_Area_Country)), 
                    SetOf_Min) , 
                  aggregate80(min,SetOf_Min,Aggregate80_Area))) , 
              measure_pred(thing,area,Aggregate80_Area,Measure)))).
tmp : test80_result( "How many asian countries have a population exceeding 10 million ?", 
        into_lexical_segs, 
        [ w( how, [
            pos(wrb), root(how),loc(1),lnks(3),txt("How"), 
            truecase('INIT_UPPER'),link(1,'WHADJP',r('WHADJP',seg(1,2))), 
            link(2,SBAR,r(SBAR,seg(1,11))), link(3,'CORENLP',r('CORENLP',seg(1,11))),flair, 
            upos(adv),fner(o),fn('_')]), 
          w( many, [
            pos(jj), root(many),loc(2),lnks(3),txt("many"), 
            truecase('LOWER'),link(1,'WHADJP',r('WHADJP',seg(1,2))), 
            link(2,SBAR,r(SBAR,seg(1,11))), link(3,'CORENLP',r('CORENLP',seg(1,11))),flair, 
            upos(adj),fner(o),fn('_')]), 
          w( asian, [
            pos(jj), root(asian),loc(3),lnks(4),txt("asian"), 
            ner('NATIONALITY'),truecase('INIT_UPPER'), 
            entitylink('Asian'),link(1,'NP',r('NP',seg(3,4))), 
            link(2,S,r(S,seg(3,10))), 
            link(3,SBAR,r(SBAR,seg(1,11))), link(4,'CORENLP',r('CORENLP',seg(1,11))),flair, 
            upos(adj),fner('s-misc'),fn('_')]), 
          w( countries, [
            pos(nns), root(country),loc(4),lnks(4), 
            txt("countries"),truecase('LOWER'), 
            link(1,NP,r(NP,seg(3,4))), 
            link(2,S,r(S,seg(3,10))), 
            link(3,SBAR,r(SBAR,seg(1,11))), link(4,'CORENLP',r('CORENLP',seg(1,11))),flair, 
            upos(noun),fner(o),fn('_')]), 
          w( have, [
            alt(pos(vbp)), root(have),pos(vb),loc(5),lnks(4), 
            txt("have"),truecase('LOWER'), 
            link(1,VP,r(VP,seg(5,10))), 
            link(2,S,r(S,seg(3,10))), 
            link(3,SBAR,r(SBAR,seg(1,11))), link(4,'CORENLP',r('CORENLP',seg(1,11))),allen_srl, 
            srl( have, [
              o(ARG0,[How,many,asian,countries]), 
              o(V,[have]), 
              o(ARG1,[a,population,exceeding,10,million])]), flair,upos(verb),fner(o),fn('have.03')]), 
          w( a, [
            pos(dt), root(a),loc(6),lnks(6),txt("a"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(6,7))), 
            link(2,NP,r(NP,seg(6,10))), 
            link(3,VP,r(VP,seg(5,10))), 
            link(4,S,r(S,seg(3,10))), 
            link(5,SBAR,r(SBAR,seg(1,11))), link(6,'CORENLP',r('CORENLP',seg(1,11))),flair, 
            upos(det),fner(o),fn('_')]), 
          w( population, [
            pos(nn), root(population),loc(7),lnks(6), 
            txt("population"),truecase('LOWER'), 
            link(1,NP,r(NP,seg(6,7))), 
            link(2,NP,r(NP,seg(6,10))), 
            link(3,VP,r(VP,seg(5,10))), 
            link(4,S,r(S,seg(3,10))), 
            link(5,SBAR,r(SBAR,seg(1,11))), link(6,'CORENLP',r('CORENLP',seg(1,11))),flair, 
            upos(noun),fner(o),fn('_')]), 
          w( exceeding, [
            pos(vbg), root(exceed),loc(8),lnks(6), 
            txt("exceeding"),truecase('LOWER'), 
            link(1,VP,r(VP,seg(8,10))), 
            link(2,NP,r(NP,seg(6,10))), 
            link(3,VP,r(VP,seg(5,10))), 
            link(4,S,r(S,seg(3,10))), 
            link(5,SBAR,r(SBAR,seg(1,11))), link(6,'CORENLP',r('CORENLP',seg(1,11))),allen_srl, 
            srl( exceeding, [
              o(ARG0,[a,population]), 
              o(V,[exceeding]), 
              o(ARG1,[10,million])]), flair,upos(verb),fner(o),fn('exceed.01')]), 
          w( '10', [
            pos(cd), root('10'),loc(9),lnks(8),txt("10"), 
            ner('NUMBER'),normalizedNER(10000000.0), 
            entitylink('10000000_(number)'), 
            link(1,QP,r(QP,seg(9,10))), 
            link(2,NP,r(NP,seg(9,10))), 
            link(3,VP,r(VP,seg(8,10))), 
            link(4,NP,r(NP,seg(6,10))), 
            link(5,VP,r(VP,seg(5,10))), 
            link(6,S,r(S,seg(3,10))), 
            link(7,SBAR,r(SBAR,seg(1,11))), link(8,'CORENLP',r('CORENLP',seg(1,11))),flair, 
            upos(num),fner(o),fn('_')]), 
          w( million, [
            pos(cd), root(million),loc(10),lnks(8), 
            txt("million"),ner('NUMBER'), 
            normalizedNER(10000000.0),truecase('LOWER'), 
            entitylink('10000000_(number)'), 
            link(1,QP,r(QP,seg(9,10))), 
            link(2,NP,r(NP,seg(9,10))), 
            link(3,VP,r(VP,seg(8,10))), 
            link(4,NP,r(NP,seg(6,10))), 
            link(5,VP,r(VP,seg(5,10))), 
            link(6,S,r(S,seg(3,10))), 
            link(7,SBAR,r(SBAR,seg(1,11))), link(8,'CORENLP',r('CORENLP',seg(1,11))),flair, 
            upos(num),fner(o),fn('_')]), 
          w( ?, [
            pos('.'), root(?),loc(11),lnks(2),txt("?"), 
            link(1,SBAR,r(SBAR,seg(1,11))), link(2,'CORENLP',r('CORENLP',seg(1,11))),flair, 
            upos(punct),fner(o),fn('_')])]).
tmp : test80_result( "How many asian countries have a population exceeding 10 million ?", 
        sentence80, 
        whq( thing&Thing-B, 
          s( np(3+pl,np_head(quantV(same,wh(thing&Thing-B)),[adj(asian)],country),[]), 
             verb(aux+have(Have),have(Have),active,pres+fin,[],posP(PosP)), 
             [ arg( dirO(DirO), 
                 np( 3+sg, 
                   np_head(det(a),[],population), 
                   [ reduced_rel( value&units&population-D, 
                       s( np(3+sg,wh(value&units&population-D),[]), 
                          verb(main+tv,exceed,active,inf,[prog],posP(PosP24)), 
                          [ arg(dirO(DirO25),np(3+pl,np_head(quantV(same,10),[],million),[]))], 
                          []))]))], 
             []))).
tmp : test80_result( "How many asian countries have a population exceeding 10 million ?", 
        i_sentence, 
        question80( [thing&Thing-B], 
          pred( 
             quantV( 
                quantV(same,wh(thing&Thing-B)), 
                thing&Thing-C, 
                '`'(ti(country,C)), 
                '`'(ti(asian,C))&'`'(true), 
                [], 
                thing&Thing-C), 
             identityQ(IdentityQ), 
             count_pred(thing,population,C,D),D=F, 
             [ quantV( det(a), 
                 value&units&population-D, '`'(true),'`'(true), 
                 [ pred( 
                      quantV( identityQ(IdentityQ18), 
                        value&units&population-D, '`'(true),'`'(true), 
                        [], 
                        value&units&population-D), 
                      identityQ(IdentityQ19), 
                      exceeds(D,E), 
                      [ quantV( voidQ(VoidQ), 
                          value&units&population-E, '`'(E= --(10,million)),'`'(true), 
                          [], 
                          value&units&population-E)])], 
                 value&units&population-D), 
               quantV( voidQ(VoidQ21), 
                 value&units&population-F, '`'(true),'`'(true), 
                 [], 
                 _94422-F)]))).
tmp : test80_result( "How many asian countries have a population exceeding 10 million ?", 
        qplan, 
        answer80([Numberof]) :-  
          numberof( Population_Asian_Country, 
            ( ti(country,Population_Asian_Country)  ,
              ti(asian,Population_Asian_Country) , 
              ^( Count, 
                ( exceeds(Count,--(10,million)) , 
                  count_pred(thing,population,Population_Asian_Country,Count)))), 
            Numberof)).
tmp : test80_result( "How many countries does the danube flow through ?", 
        into_lexical_segs, 
        [ w( how, [
            pos(wrb), root(how),loc(1),lnks(2),txt("How"), 
            truecase('INIT_UPPER'),link(1,'NP',r('NP',seg(1,3))), 
            link(2,'SBAR',r('SBAR',seg(1,9))),flair,upos(adv), 
            fner(o),fn('_')]), 
          w( many, [
            pos(jj), root(many),loc(2),lnks(2),txt("many"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(1,3))), 
            link(2,'SBAR',r('SBAR',seg(1,9))),flair,upos(adj), 
            fner(o),fn('_')]), 
          w( countries, [
            pos(nns), root(country),loc(3),lnks(2), 
            txt("countries"),truecase('LOWER'), 
            link(1,NP,r(NP,seg(1,3))), link(2,'SBAR',r('SBAR',seg(1,9))),flair, 
            upos(noun),fner(o),fn('_')]), 
          w( does, [
            alt(pos(vbz)), root(do),loc(4),lnks(2),txt("does"), 
            truecase('LOWER'),link(1,'S',r('S',seg(4,8))), 
            link(2,'SBAR',r('SBAR',seg(1,9))),old_pos(aux), 
            pos(vbz),spacy,spos(vbz),loc(1), 
            tense(present),txt("Does"), 
            dep_parent(aux,n(exceed,6)),node(n(does,1)),flair, 
            upos(verb),fner(o),fn('do.01')]), 
          w( the, [
            pos(dt), root(the),loc(5),lnks(3),txt("the"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(5,6))), 
            link(2,S,r(S,seg(4,8))), link(3,'SBAR',r('SBAR',seg(1,9))),spacy,spos(dt), 
            loc(2),dep_parent(det,n(population,3)), 
            node(n(the,2)),flair,upos(det),fner(o), 
            fn('_')]), 
          w( danube, [
            pos(nn), root(danube),loc(6),lnks(3),txt("danube"), 
            truecase('INIT_UPPER'),link(1,'NP',r('NP',seg(5,6))), 
            link(2,S,r(S,seg(4,8))), link(3,'SBAR',r('SBAR',seg(1,9))),flair, 
            upos(noun),fner(o),fn('_')]), 
          w( flow, [
            alt(pos(nn)), root(flow),pos(vb),loc(7),lnks(3), 
            txt("flow"),truecase('LOWER'), 
            link(1,VP,r(VP,seg(7,8))), 
            link(2,S,r(S,seg(4,8))), link(3,'SBAR',r('SBAR',seg(1,9))),flair, 
            upos(verb),fner(o),fn('flow.01')]), 
          w( through, [
            alt(pos(in)), root(through),pos(rp),loc(8),lnks(4), 
            txt("through"),truecase('LOWER'), 
            link(1,PRT,r(PRT,seg(8,8))), 
            link(2,VP,r(VP,seg(7,8))), 
            link(3,S,r(S,seg(4,8))), link(4,'SBAR',r('SBAR',seg(1,9))),flair,upos(adp), 
            fner(o),fn('_')]), 
          w( ?, [
            pos('.'), root(?),loc(9),lnks(1),txt("?"), 
            link(1,'SBAR',r('SBAR',seg(1,9))),spacy,spos('.'), 
            loc(11),dep_parent(punct,n(exceed,6)), 
            node(n(?,11)),flair,upos(punct),fner(o), 
            fn('_')])]).
tmp : test80_result( "How many countries does the danube flow through ?", 
        sentence80, 
        whq( thing&Thing-B, 
          s( np(3+sg,nameOf(danube,[]),[]), 
             verb(main+tv,flow,active,pres+fin,[],posP(PosP)), 
             [], 
             [ prep_phrase(prep(through),np(3+pl,np_head(quantV(same,wh(thing&Thing-B)),[],country),[]))]))).
tmp : test80_result( "How many countries does the danube flow through ?", 
        i_sentence, 
        question80( [thing&Thing-B], 
          pred( 
             quantV( identityQ(IdentityQ), 
               thing&River&river-E, '`'(named(E,danube)),'`'(true), 
               [], 
               thing&River&river-E), 
             identityQ(IdentityQ18), 
             path_pred_linkage(direct(river_flows),river,E,C,D), 
             [ quantV( 
                  quantV(same,wh(thing&Thing-B)), 
                  thing&Thing-C, '`'(ti(country,C)),'`'(true), 
                  [], 
                  thing&Thing-C), 
               quantV(voidQ(VoidQ),thing&Thing21-D,`(true),`(true),[],_158700-D)]))).
tmp : test80_result( "How many countries does the danube flow through ?", 
        qplan, 
        answer80([Numberof]) :-  
          numberof( Country, 
            ( ti(country,Country) , 
              ^( Linkage, 
                ( named(River_Danube,danube) , 
                  path_pred_linkage(direct(river_flows),river,River_Danube,Country,Linkage)))), 
            Numberof)).
tmp : test80_result( "How many countries have a population exceeding 10 million ?", 
        into_lexical_segs, 
        [ w( how, [
            pos(wrb), root(how),loc(1),lnks(4),txt("How"), 
            truecase('INIT_UPPER'),link(1,'WHADJP',r('WHADJP',seg(1,2))), 
            link(2,NP,r(NP,seg(1,3))), 
            link(3,SBAR,r(SBAR,seg(1,10))), link(4,'CORENLP',r('CORENLP',seg(1,10))),flair, 
            upos(adv),fner(o),fn('_')]), 
          w( many, [
            pos(jj), root(many),loc(2),lnks(4),txt("many"), 
            truecase('LOWER'),link(1,'WHADJP',r('WHADJP',seg(1,2))), 
            link(2,NP,r(NP,seg(1,3))), 
            link(3,SBAR,r(SBAR,seg(1,10))), link(4,'CORENLP',r('CORENLP',seg(1,10))),flair, 
            upos(adj),fner(o),fn('_')]), 
          w( countries, [
            pos(nns), root(country),loc(3),lnks(3), 
            txt("countries"),truecase('LOWER'), 
            link(1,NP,r(NP,seg(1,3))), 
            link(2,SBAR,r(SBAR,seg(1,10))), link(3,'CORENLP',r('CORENLP',seg(1,10))),flair, 
            upos(noun),fner(o),fn('_')]), 
          w( have, [
            alt(pos(vbp)), root(have),pos(vb),loc(4),lnks(4), 
            txt("have"),truecase('LOWER'), 
            link(1,VP,r(VP,seg(4,9))), 
            link(2,S,r(S,seg(4,9))), 
            link(3,SBAR,r(SBAR,seg(1,10))), link(4,'CORENLP',r('CORENLP',seg(1,10))),flair, 
            upos(verb),fner(o),fn('have.03')]), 
          w( a, [
            pos(dt), root(a),loc(5),lnks(6),txt("a"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(5,6))), 
            link(2,NP,r(NP,seg(5,9))), 
            link(3,VP,r(VP,seg(4,9))), 
            link(4,S,r(S,seg(4,9))), 
            link(5,SBAR,r(SBAR,seg(1,10))), link(6,'CORENLP',r('CORENLP',seg(1,10))),flair, 
            upos(det),fner(o),fn('_')]), 
          w( population, [
            pos(nn), root(population),loc(6),lnks(6), 
            txt("population"),truecase('LOWER'), 
            link(1,NP,r(NP,seg(5,6))), 
            link(2,NP,r(NP,seg(5,9))), 
            link(3,VP,r(VP,seg(4,9))), 
            link(4,S,r(S,seg(4,9))), 
            link(5,SBAR,r(SBAR,seg(1,10))), link(6,'CORENLP',r('CORENLP',seg(1,10))),flair, 
            upos(noun),fner(o),fn('_')]), 
          w( exceeding, [
            pos(vbg), root(exceed),loc(7),lnks(6), 
            txt("exceeding"),truecase('LOWER'), 
            link(1,VP,r(VP,seg(7,9))), 
            link(2,NP,r(NP,seg(5,9))), 
            link(3,VP,r(VP,seg(4,9))), 
            link(4,S,r(S,seg(4,9))), 
            link(5,SBAR,r(SBAR,seg(1,10))), link(6,'CORENLP',r('CORENLP',seg(1,10))),flair, 
            upos(verb),fner(o),fn('exceed.01')]), 
          w( '10', [
            pos(cd), root('10'),loc(8),lnks(8),txt("10"), 
            ner('NUMBER'),normalizedNER(10000000.0), 
            entitylink('10000000_(number)'), 
            link(1,QP,r(QP,seg(8,9))), 
            link(2,NP,r(NP,seg(8,9))), 
            link(3,VP,r(VP,seg(7,9))), 
            link(4,NP,r(NP,seg(5,9))), 
            link(5,VP,r(VP,seg(4,9))), 
            link(6,S,r(S,seg(4,9))), 
            link(7,SBAR,r(SBAR,seg(1,10))), link(8,'CORENLP',r('CORENLP',seg(1,10))),flair, 
            upos(num),fner(o),fn('_')]), 
          w( million, [
            pos(cd), root(million),loc(9),lnks(8), 
            txt("million"),ner('NUMBER'), 
            normalizedNER(10000000.0),truecase('LOWER'), 
            entitylink('10000000_(number)'), 
            link(1,QP,r(QP,seg(8,9))), 
            link(2,NP,r(NP,seg(8,9))), 
            link(3,VP,r(VP,seg(7,9))), 
            link(4,NP,r(NP,seg(5,9))), 
            link(5,VP,r(VP,seg(4,9))), 
            link(6,S,r(S,seg(4,9))), 
            link(7,SBAR,r(SBAR,seg(1,10))), link(8,'CORENLP',r('CORENLP',seg(1,10))),flair, 
            upos(num),fner(o),fn('_')]), 
          w( ?, [
            pos('.'), root(?),loc(10),lnks(2),txt("?"), 
            link(1,SBAR,r(SBAR,seg(1,10))), link(2,'CORENLP',r('CORENLP',seg(1,10))),flair, 
            upos(punct),fner(o),fn('_')])]).
tmp : test80_result( "How many countries have a population exceeding 10 million ?", 
        sentence80, 
        whq( G&_201010-B, 
          s( np(3+pl,np_head(quantV(same,wh(G&_248920-B)),[],country),[]), 
             verb(aux+have(Have),have(Have),active,pres+fin,[],posP(PosP)), 
             [ arg( dirO(DirO), 
                 np( 3+sg, 
                   np_head(det(a),[],population), 
                   [ reduced_rel( value&units&population-D, 
                       s( np(3+sg,wh(value&units&population-D),[]), 
                          verb(main+tv,exceed,active,inf,[prog],posP(PosP24)), 
                          [ arg(dirO(DirO25),np(3+pl,np_head(quantV(same,10),[],million),[]))], 
                          []))]))], 
             []))).
tmp : test80_result( "How many countries have a population exceeding 10 million ?", 
        i_sentence, 
        question80( [G&_95740-B], 
          pred( 
             quantV( 
                quantV(same,wh(G&_159182-B)), 
                G&_149042-C, '`'(ti(country,C)),'`'(true), 
                [], 
                G&_149042-C), 
             identityQ(IdentityQ), 
             count_pred(G,population,C,D),D=F, 
             [ quantV( det(a), 
                 value&units&population-D, '`'(true),'`'(true), 
                 [ pred( 
                      quantV( identityQ(IdentityQ17), 
                        value&units&population-D, '`'(true),'`'(true), 
                        [], 
                        value&units&population-D), 
                      identityQ(IdentityQ18), 
                      exceeds(D,E), 
                      [ quantV( voidQ(VoidQ), 
                          value&units&population-E, '`'(E= --(10,million)),'`'(true), 
                          [], 
                          value&units&population-E)])], 
                 value&units&population-D), 
               quantV( voidQ(VoidQ20), 
                 value&units&population-F, '`'(true),'`'(true), 
                 [], 
                 _126062-F)]))).
tmp : test80_result( "How many countries have a population exceeding 10 million ?", 
        qplan, 
        answer80([Numberof]) :-  
          numberof( Country, 
            ( ti(country,Country) , 
              ^( Count, 
                ( exceeds(Count,--(10,million)) , 
                  count_pred(Population,population,Country,Count)))), 
            Numberof)).
tmp : test80_result( "How many countries have a population greater than 10 million ?", 
        into_lexical_segs, 
        [ w( how, [
            pos(wrb), root(how),loc(1),lnks(4),txt("How"), 
            truecase('INIT_UPPER'),link(1,'WHADJP',r('WHADJP',seg(1,2))), 
            link(2,NP,r(NP,seg(1,3))), 
            link(3,SBAR,r(SBAR,seg(1,11))), link(4,'CORENLP',r('CORENLP',seg(1,11))),spacy, 
            spos(wrb),dep_parent(advmod,n(large,2)), 
            node(n(how,1)),flair,upos(adv),fner(o), 
            fn('_')]), 
          w( many, [
            pos(jj), root(many),loc(2),lnks(4),txt("many"), 
            truecase('LOWER'),link(1,'WHADJP',r('WHADJP',seg(1,2))), 
            link(2,NP,r(NP,seg(1,3))), 
            link(3,SBAR,r(SBAR,seg(1,11))), link(4,'CORENLP',r('CORENLP',seg(1,11))),flair, 
            upos(adj),fner(o),fn('_')]), 
          w( countries, [
            pos(nns), root(country),loc(3),lnks(3), 
            txt("countries"),truecase('LOWER'), 
            link(1,NP,r(NP,seg(1,3))), 
            link(2,SBAR,r(SBAR,seg(1,11))), link(3,'CORENLP',r('CORENLP',seg(1,11))),flair, 
            upos(noun),fner(o),fn('_')]), 
          w( have, [
            alt(pos(vbp)), root(have),pos(vb),loc(4),lnks(4), 
            txt("have"),truecase('LOWER'), 
            link(1,VP,r(VP,seg(4,10))), 
            link(2,S,r(S,seg(4,10))), 
            link(3,SBAR,r(SBAR,seg(1,11))), link(4,'CORENLP',r('CORENLP',seg(1,11))),allen_srl, 
            srl( have, [
              o(ARG0,[How,many,countries]), 
              o(V,[have]), 
              o(ARG1,[a,population,exceeding,10,million])]), flair,upos(verb),fner(o),fn('have.03')]), 
          w( a, [
            pos(dt), root(a),loc(5),lnks(5),txt("a"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(5,10))), 
            link(2,VP,r(VP,seg(4,10))), 
            link(3,S,r(S,seg(4,10))), 
            link(4,SBAR,r(SBAR,seg(1,11))), link(5,'CORENLP',r('CORENLP',seg(1,11))),flair, 
            upos(det),fner(o),fn('_')]), 
          w( population, [
            pos(nn), root(population),loc(6),lnks(5), 
            txt("population"),truecase('LOWER'), 
            link(1,NP,r(NP,seg(5,10))), 
            link(2,VP,r(VP,seg(4,10))), 
            link(3,S,r(S,seg(4,10))), 
            link(4,SBAR,r(SBAR,seg(1,11))), link(5,'CORENLP',r('CORENLP',seg(1,11))),flair, 
            upos(noun),fner(o),fn('_')]), 
          w( greater, [
            pos(jjr), root(greater),loc(7),lnks(6), 
            txt("greater"),truecase('LOWER'), 
            link(1,QP,r(QP,seg(7,10))), 
            link(2,NP,r(NP,seg(5,10))), 
            link(3,VP,r(VP,seg(4,10))), 
            link(4,S,r(S,seg(4,10))), 
            link(5,SBAR,r(SBAR,seg(1,11))), link(6,'CORENLP',r('CORENLP',seg(1,11))),flair, 
            upos(adj),fner(o),fn('_')]), 
          w( than, [
            pos(in), root(than),loc(8),lnks(6),txt("than"), 
            truecase('LOWER'),link(1,'QP',r('QP',seg(7,10))), 
            link(2,NP,r(NP,seg(5,10))), 
            link(3,VP,r(VP,seg(4,10))), 
            link(4,S,r(S,seg(4,10))), 
            link(5,SBAR,r(SBAR,seg(1,11))), link(6,'CORENLP',r('CORENLP',seg(1,11))),flair, 
            upos(adp),fner(o),fn('_')]), 
          w( '10', [
            pos(cd), root('10'),loc(9),lnks(6),txt("10"), 
            ner('NUMBER'),normalizedNER('>1.0E7'), 
            entitylink('10000000_(number)'), 
            link(1,QP,r(QP,seg(7,10))), 
            link(2,NP,r(NP,seg(5,10))), 
            link(3,VP,r(VP,seg(4,10))), 
            link(4,S,r(S,seg(4,10))), 
            link(5,SBAR,r(SBAR,seg(1,11))), link(6,'CORENLP',r('CORENLP',seg(1,11))),flair, 
            upos(num),fner(o),fn('_')]), 
          w( million, [
            pos(cd), root(million),loc(10),lnks(6), 
            txt("million"),ner('NUMBER'), 
            normalizedNER('>1.0E7'),truecase('LOWER'), 
            entitylink('10000000_(number)'), 
            link(1,QP,r(QP,seg(7,10))), 
            link(2,NP,r(NP,seg(5,10))), 
            link(3,VP,r(VP,seg(4,10))), 
            link(4,S,r(S,seg(4,10))), 
            link(5,SBAR,r(SBAR,seg(1,11))), link(6,'CORENLP',r('CORENLP',seg(1,11))),flair, 
            upos(num),fner(o),fn('_')]), 
          w( ?, [
            pos('.'), root(?),loc(11),lnks(2),txt("?"), 
            link(1,SBAR,r(SBAR,seg(1,11))), link(2,'CORENLP',r('CORENLP',seg(1,11))),spacy, 
            spos('.'),loc(8),dep_parent(punct,n(is,3)), 
            node(n(?,8)),flair,upos(punct),fner(o), 
            fn('_')])]).
tmp : test80_result( "How many countries have a population greater than 10 million ?", 
        sentence80, 
        whq( I&_224872-B, 
          s( np(3+pl,np_head(quantV(same,wh(I&_19146-B)),[],country),[]), 
             verb(aux+have(Have),have(Have),active,pres+fin,[],posP(PosP)), 
             [ arg( dirO(DirO), 
                 np( 3+sg, 
                   np_head(det(a),[],population), 
                   [ reduced_rel( value&units&population-D, 
                       s( np(3+sg,wh(value&units&population-D),[]), 
                          verb(aux+be(PosP_Be),be(PosP_Be),active,pres+fin,[],posP(PosP_Be)), 
                          [ arg(arg_pred(Arg26),comp(more,adj(great),np(3+pl,np_head(quantV(same,10),[],million),[])))], 
                          []))]))], 
             []))).
tmp : test80_result( "How many countries have a population greater than 10 million ?", 
        i_sentence, 
        question80( [I&_128482-B], 
          pred( 
             quantV( 
                quantV(same,wh(I&_199256-B)), 
                I&_189116-C, '`'(ti(country,C)),'`'(true), 
                [], 
                I&_189116-C), 
             identityQ(IdentityQ), 
             count_pred(I,population,C,D),D=H, 
             [ quantV( det(a), 
                 value&units&population-D, '`'(true),'`'(true), 
                 [ pred( 
                      quantV( identityQ(IdentityQ17), 
                        value&units&population-D, '`'(true),'`'(true), 
                        [], 
                        value&units&population-D), identityQ(IdentityQ18),true, 
                      [ ( quantV( voidQ(VoidQ), 
                            value&units&population-G, '`'(exceeds(D,G)),'`'(true), 
                            [], 
                            _251984-G)  &
                          quantV( voidQ(VoidQ20), 
                            value&units&population-F, '`'(exceeds(E,F)),'`'(true), 
                            [], 
                            _245254-F) & 
                          '`'(exceeds(G,F))), 
                        quantV( voidQ(VoidQ21), 
                          value&units&population-E, '`'(E= --(10,million)),'`'(true), 
                          [], 
                          value&units&population-E)])], 
                 value&units&population-D), 
               quantV( voidQ(VoidQ22), 
                 value&units&population-H, '`'(true),'`'(true), 
                 [], 
                 _7766-H)]))).
tmp : test80_result( "How many countries have a population greater than 10 million ?", 
        qplan, 
        answer80([Numberof]) :-  
          numberof( Country, 
            ( ti(country,Country) , 
              ^( Count, 
                ( exceeds(Count,--(10,million)) , 
                  count_pred(Population,population,Country,Count)))), 
            Numberof)).
tmp : test80_result( "How many rivers are in asia ?", 
        into_lexical_segs, 
        [ w( how, [
            pos(wrb), root(how),loc(1),lnks(2),txt("How"), 
            truecase('INIT_UPPER'),link(1,'NP',r('NP',seg(1,3))), 
            link(2,'SBAR',r('SBAR',seg(1,7))),flair,upos(adv), 
            fner(o),fn('_')]), 
          w( many, [
            pos(jj), root(many),loc(2),lnks(2),txt("many"), 
            truecase('INIT_UPPER'),link(1,'NP',r('NP',seg(1,3))), 
            link(2,'SBAR',r('SBAR',seg(1,7))),flair,upos(adj), 
            fner(o),fn('_')]), 
          w( rivers, [
            pos(nns), root(river),loc(3),lnks(2),txt("rivers"), 
            truecase('INIT_UPPER'),link(1,'NP',r('NP',seg(1,3))), 
            link(2,'SBAR',r('SBAR',seg(1,7))),flair, 
            upos(noun),fner(o),fn('_')]), 
          w( are, [
            alt(pos(vbp)), root(be),loc(4),lnks(3),txt("are"), 
            truecase('LOWER'),link(1,'VP',r('VP',seg(4,6))), 
            link(2,S,r(S,seg(4,6))), link(3,'SBAR',r('SBAR',seg(1,7))),old_pos(aux), 
            pos(vb),allen_srl, 
            srl( are, [
              o(ARG1,[How,many,rivers]), 
              o(V,[are]), 
              o(ARG2,[in,asia])]), flair,upos(verb),fner(o),fn('be.01')]), 
          w( in, [
            pos(in), root(in),loc(5),lnks(4),txt("in"), 
            truecase('LOWER'),link(1,'PP',r('PP',seg(5,6))), 
            link(2,VP,r(VP,seg(4,6))), 
            link(3,S,r(S,seg(4,6))), link(4,'SBAR',r('SBAR',seg(1,7))),flair,upos(adp), 
            fner(o),fn('_')]), 
          w( asia, [
            alt(pos(nn)), root(asia),pos(nnp),loc(6),lnks(5), 
            txt("asia"),truecase('INIT_UPPER'), 
            link(1,NP,r(NP,seg(6,6))), 
            link(2,PP,r(PP,seg(5,6))), 
            link(3,VP,r(VP,seg(4,6))), 
            link(4,S,r(S,seg(4,6))), link(5,'SBAR',r('SBAR',seg(1,7))),flair, 
            upos(noun),fner('s-loc'),fn('_')]), 
          w( ?, [
            pos('.'), root(?),loc(7),lnks(1),txt("?"), 
            link(1,'SBAR',r('SBAR',seg(1,7))),flair, 
            upos(punct),fner(o),fn('_')])]).
tmp : test80_result( "How many rivers are in asia ?", 
        sentence80, 
        whq( thing&Thing-B, 
          s( np(3+pl,np_head(quantV(same,wh(thing&Thing-B)),[],river),[]), 
             verb(aux+be(Be),be(Be),active,pres+fin,[],posP(PosP)), 
             [ arg(arg_pred(Arg22),prep_phrase(prep(in),np(3+sg,nameOf(asia,[]),[])))], 
             []))).
tmp : test80_result( "How many rivers are in asia ?", 
        i_sentence, 
        question80( [thing&Thing-B], 
          pred( 
             quantV( 
                quantV(same,wh(thing&Thing-B)), 
                thing&Thing-C, '`'(ti(river,C)),'`'(true), 
                [], 
                thing&Thing-C), identityQ(IdentityQ),true, 
             [ '`'(trans_pred(thing,contain,D,C)), 
               quantV( identityQ(IdentityQ18), 
                 thing&geo&continent-D, '`'(named(D,asia)),'`'(true), 
                 [], 
                 thing&geo&continent-D)]))).
tmp : test80_result( "How many rivers are in asia ?", 
        qplan, 
        answer80([Numberof]) :-  
          numberof( River, 
            ( ti(river,River)  ,
              named(Contain_Asia,asia) , 
              trans_pred(thing,contain,Contain_Asia,River)), 
            Numberof)).
tmp : test80_result( "How many rivers are not in asia ?", 
        into_lexical_segs, 
        [ w( how, [
            pos(wrb), root(how),loc(1),lnks(2),txt("How"), 
            truecase('INIT_UPPER'),link(1,'NP',r('NP',seg(1,3))), 
            link(2,'SBAR',r('SBAR',seg(1,8))),spacy,spos(wrb), 
            dep_parent(advmod,n(many,2)),node(n(how,1)),flair, 
            upos(adv),fner(o),fn('_')]), 
          w( many, [
            pos(jj), root(many),loc(2),lnks(2),txt("many"), 
            truecase('INIT_UPPER'),link(1,'NP',r('NP',seg(1,3))), 
            link(2,'SBAR',r('SBAR',seg(1,8))),spacy,spos(jj), 
            dep_child(advmod,n(how,1)), dep_parent(amod,n(countries,4)),node(n(many,2)), 
            flair,upos(adj),fner(o),fn('_')]), 
          w( rivers, [
            pos(nns), root(river),loc(3),lnks(2),txt("rivers"), 
            truecase('INIT_UPPER'),corefed,#(1), 
            txt(["rivers"]),type('NOMINAL'), 
            numb('PLURAL'),gender('UNKNOWN'), 
            animacy('INANIMATE'),repm(@(true)), 
            link(1,NP,r(NP,seg(1,3))), link(2,'SBAR',r('SBAR',seg(1,8))),flair, 
            upos(noun),fner(o),fn('_')]), 
          w( are, [
            alt(pos(vbp)), root(be),loc(4),lnks(3),txt("are"), 
            truecase('LOWER'),link(1,'VP',r('VP',seg(4,7))), 
            link(2,S,r(S,seg(4,7))), link(3,'SBAR',r('SBAR',seg(1,8))),old_pos(aux), 
            pos(vb),allen_srl, 
            srl( are, [
              o(ARG1,[How,many,rivers]), o('V',[are]),o('ARGM-NEG',[not]), 
              o(ARG2,[in,asia])]), flair,upos(verb),fner(o),fn('be.01')]), 
          w( not, [
            pos(rb), root(not),loc(5),lnks(3),txt("not"), 
            truecase('LOWER'),link(1,'VP',r('VP',seg(4,7))), 
            link(2,S,r(S,seg(4,7))), link(3,'SBAR',r('SBAR',seg(1,8))),flair,upos(adv), 
            fner(o),fn('_')]), 
          w( in, [
            pos(in), root(in),loc(6),lnks(4),txt("in"), 
            truecase('LOWER'),link(1,'PP',r('PP',seg(6,7))), 
            link(2,VP,r(VP,seg(4,7))), 
            link(3,S,r(S,seg(4,7))), link(4,'SBAR',r('SBAR',seg(1,8))),flair,upos(adp), 
            fner(o),fn('_')]), 
          w( asia, [
            alt(pos(nn)), root(asia),pos(nnp),loc(7),lnks(5), 
            txt("asia"),truecase('INIT_UPPER'), 
            link(1,NP,r(NP,seg(7,7))), 
            link(2,PP,r(PP,seg(6,7))), 
            link(3,VP,r(VP,seg(4,7))), 
            link(4,S,r(S,seg(4,7))), link(5,'SBAR',r('SBAR',seg(1,8))),flair, 
            upos(noun),fner('s-loc'),fn('_')]), 
          w( ?, [
            pos('.'), root(?),loc(8),lnks(1),txt("?"), 
            link(1,'SBAR',r('SBAR',seg(1,8))),spacy,spos('.'), 
            loc(11),dep_parent(punct,n(have,5)),node(n(?,11)), 
            flair,upos(punct),fner(o),fn('_')])]).
tmp : test80_result( "How many rivers are not in asia ?", 
        sentence80, 
        whq( thing&Thing-B, 
          s( np(3+pl,np_head(quantV(same,wh(thing&Thing-B)),[],river),[]), 
             verb(aux+be(Be),be(Be),active,pres+fin,[],negP(NegP)), 
             [ arg(arg_pred(Arg22),prep_phrase(prep(in),np(3+sg,nameOf(asia,[]),[])))], 
             []))).
tmp : test80_result( "How many rivers are not in asia ?", 
        i_sentence, 
        question80( [thing&Thing-B], 
          pred( 
             quantV( 
                quantV(same,wh(thing&Thing-B)), 
                thing&Thing-C, '`'(ti(river,C)),'`'(true), 
                [], 
                thing&Thing-C), notP,true, 
             [ '`'(trans_pred(thing,contain,D,C)), 
               quantV( identityQ(IdentityQ), 
                 thing&geo&continent-D, '`'(named(D,asia)),'`'(true), 
                 [], 
                 thing&geo&continent-D)]))).
tmp : test80_result( "How many rivers are not in asia ?", 
        qplan, 
        answer80([Numberof]) :-  
          numberof( River, 
            ( ti(river,River) , 
              \+ (named(Contain_Asia,asia),trans_pred(thing,contain,Contain_Asia,River))), 
            Numberof)).
tmp : test80_result( "Iran is bordered by iraq ?", 
        into_lexical_segs, 
        [ w( iran, [
            pos(nnp), root('Iran'),loc(1),lnks(2),txt("Iran"), 
            ner('COUNTRY'),truecase('INIT_UPPER'), 
            entitylink('Iran'),corefed,#(1), 
            txt(["Iran"]),type('PROPER'),numb('SINGULAR'), 
            gender('NEUTRAL'),animacy('INANIMATE'),repm(@(true)), 
            link(1,'NP',r('NP',seg(1,1))),link(2,'S',r('S',seg(1,6))), 
            flair,upos(propn),fner('s-loc'),fn('_')]), 
          w( is, [
            alt(pos(vbz)), root(be),loc(2),lnks(2),txt("is"), 
            truecase('LOWER'),link(1,'VP',r('VP',seg(2,5))), 
            link(2,'S',r('S',seg(1,6))),old_pos(aux),pos(vb), 
            allen_srl,srl(is,[o('V',[is])]), 
            flair,upos(verb),fner(o),fn('be.03')]), 
          w( bordered, [
            pos(vbn), root(border),loc(3),lnks(3), 
            txt("bordered"),truecase('LOWER'), 
            link(1,VP,r(VP,seg(3,5))), 
            link(2,VP,r(VP,seg(2,5))), link(3,'S',r('S',seg(1,6))),allen_srl, 
            srl( bordered, [
              o(ARG2,[Iran]), 
              o(V,[bordered]), 
              o(ARG1,[by,iraq])]), flair,upos(verb),fner(o),fn('surround.01')]), 
          w( by, [
            pos(in), root(by),loc(4),lnks(4),txt("by"), 
            truecase('LOWER'),link(1,'PP',r('PP',seg(4,5))), 
            link(2,VP,r(VP,seg(3,5))), 
            link(3,VP,r(VP,seg(2,5))), link(4,'S',r('S',seg(1,6))),flair,upos(adp), 
            fner(o),fn('_')]), 
          w( iraq, [
            alt(pos(nn)), root(iraq),pos(nnp),loc(5),lnks(5), 
            txt("iraq"),ner('COUNTRY'),truecase('INIT_UPPER'), 
            entitylink('Iraq_War'),link(1,'NP',r('NP',seg(5,5))), 
            link(2,PP,r(PP,seg(4,5))), 
            link(3,VP,r(VP,seg(3,5))), 
            link(4,VP,r(VP,seg(2,5))), link(5,'S',r('S',seg(1,6))),flair,upos(propn), 
            fner('s-loc'),fn('_')]), 
          w( ?, [
            pos('.'), root(?),loc(6),lnks(1),txt("?"), 
            link(1,'S',r('S',seg(1,6))),flair,upos(punct), 
            fner(o),fn('_')])]).
tmp : test80_result( "Iran is bordered by iraq ?", 
        sentence80, 
        q( s( np(3+sg,nameOf(iran,[]),[]), 
              verb(main+tv,border,passive,pres+fin,[],posP(PosP)), 
              [], 
              [ prep_phrase(prep(by),np(3+sg,nameOf(iraq,[]),[]))]))).
tmp : test80_result( "Iran is bordered by iraq ?", 
        i_sentence, 
        question80( [], 
          pred( 
             quantV( identityQ(IdentityQ), 
               thing&geo&country-C, '`'(named(C,iran)),'`'(true), 
               [], 
               thing&geo&country-C), 
             identityQ(IdentityQ18), 
             generic_pred(thing,border,B,C), 
             [ quantV( identityQ(IdentityQ19), 
                 thing&geo&country-B, '`'(named(B,iraq)),'`'(true), 
                 [], 
                 thing&geo&country-B)]))).
tmp : test80_result( "Iran is bordered by iraq ?", 
        qplan, 
        answer80([]) :- 
          named(Border_Iraq,iraq) , 
          named(Generic_Iran,iran) , 
          generic_pred(thing,border,Border_Iraq,Generic_Iran)).
tmp : test80_result( "Iraq borders iran ?", 
        into_lexical_segs, 
        [ w( iraq, [
            pos(nnp), root('Iraq'),loc(1),lnks(2),txt("Iraq"), 
            ner('COUNTRY'),truecase('INIT_UPPER'), 
            entitylink('Iraq'),corefed,#(1), 
            txt(["Iraq"]),type('PROPER'),numb('SINGULAR'), 
            gender('NEUTRAL'),animacy('INANIMATE'),repm(@(true)), 
            link(1,'NP',r('NP',seg(1,1))),link(2,'S',r('S',seg(1,4))), 
            flair,upos(propn),fner('s-loc'),fn('_')]), 
          w( borders, [
            root(border), loc(2),lnks(2),txt("borders"), 
            truecase('LOWER'),corefed,#(2), 
            txt(["borders"]),type('NOMINAL'), 
            numb('PLURAL'),gender('UNKNOWN'), 
            animacy('INANIMATE'),repm(@(true)), 
            link(1,VP,r(VP,seg(2,3))), link(2,'S',r('S',seg(1,4))),old_pos(nns),pos(vb), 
            flair,upos(verb),fner(o),fn('occupy.01')]), 
          w( iran, [
            pos(nnp), root(iran),loc(3),lnks(3),txt("iran"), 
            ner('COUNTRY'),truecase('INIT_UPPER'), 
            entitylink('Iran'),corefed,#(3), 
            txt(["iran"]),type('PROPER'), 
            numb('SINGULAR'),gender('NEUTRAL'), 
            animacy('UNKNOWN'),repm(@(true)), 
            link(1,NP,r(NP,seg(3,3))), 
            link(2,VP,r(VP,seg(2,3))), link(3,'S',r('S',seg(1,4))),flair,upos(propn), 
            fner('s-loc'),fn('_')]), 
          w( ?, [
            pos('.'), root(?),loc(4),lnks(1),txt("?"), 
            link(1,'S',r('S',seg(1,4))),spacy,spos('.'), 
            loc(9),dep_parent(punct,n(flow,7)),node(n(?,9)), 
            flair,upos(punct),fner(o),fn('_')])]).
tmp : test80_result( "Iraq borders iran ?", 
        sentence80, 
        q( s( np(3+sg,nameOf(iraq,[]),[]), 
              verb(main+tv,border,active,pres+fin,[],posP(PosP)), 
              [ arg(dirO(DirO),np(3+sg,nameOf(iran,[]),[]))], 
              []))).
tmp : test80_result( "Iraq borders iran ?", 
        i_sentence, 
        question80( [], 
          pred( 
             quantV( identityQ(IdentityQ), 
               thing&geo&country-C, '`'(named(C,iraq)),'`'(true), 
               [], 
               thing&geo&country-C), 
             identityQ(IdentityQ18), 
             generic_pred(thing,border,C,B), 
             [ quantV( identityQ(IdentityQ19), 
                 thing&geo&country-B, '`'(named(B,iran)),'`'(true), 
                 [], 
                 thing&geo&country-B)]))).
tmp : test80_result( "Iraq borders iran ?", 
        qplan, 
        answer80([]) :- 
          named(Generic_Iran,iran) , 
          named(Border_Iraq,iraq) , 
          generic_pred(thing,border,Border_Iraq,Generic_Iran)).
tmp : test80_result( "Iraq did border iran ?", 
        into_lexical_segs, 
        [ w( iraq, [
            pos(nnp), root('Iraq'),loc(1),lnks(2),txt("Iraq"), 
            ner('COUNTRY'),truecase('INIT_UPPER'), 
            entitylink('Iraq'),corefed,#(1), 
            txt(["Iraq"]),type('PROPER'),numb('SINGULAR'), 
            gender('NEUTRAL'),animacy('INANIMATE'),repm(@(true)), 
            link(1,'NP',r('NP',seg(1,1))),link(2,'S',r('S',seg(1,5))), 
            flair,upos(propn),fner('s-loc'),fn('_')]), 
          w( did, [
            alt(pos(vbd)), root(do),loc(2),lnks(2),txt("did"), 
            truecase('LOWER'),link(1,'VP',r('VP',seg(2,4))), 
            link(2,'S',r('S',seg(1,5))),old_pos(aux),pos(vb), 
            allen_srl,srl(did,[o('V',[did])]), 
            flair,upos(verb),fner(o),fn('do.01')]), 
          w( border, [
            root(border), loc(3),lnks(3),txt("border"), 
            truecase('LOWER'),link(1,'VP',r('VP',seg(3,4))), 
            link(2,VP,r(VP,seg(2,4))), link(3,'S',r('S',seg(1,5))),old_pos(nn),pos(vb), 
            allen_srl, 
            srl(border,[o(ARG0,[Iraq]),o(V,[border]),o(ARG1,[iran])]), flair,upos(noun),fner(o),fn('_')]), 
          w( iran, [
            alt(pos(nn)), root(iran),pos(nnp),loc(4),lnks(4), 
            txt("iran"),ner('COUNTRY'),truecase('INIT_UPPER'), 
            entitylink('Iran'),link(1,'NP',r('NP',seg(4,4))), 
            link(2,VP,r(VP,seg(3,4))), 
            link(3,VP,r(VP,seg(2,4))), link(4,'S',r('S',seg(1,5))),flair,upos(propn), 
            fner('s-loc'),fn('_')]), 
          w( ?, [
            pos('.'), root(?),loc(5),lnks(1),txt("?"), 
            link(1,'S',r('S',seg(1,5))),flair,upos(punct), 
            fner(o),fn('_')])]).
tmp : test80_result( "Iraq did border iran ?", 
        sentence80, 
        q( s( np(3+sg,nameOf(iraq,[]),[]), 
              verb(main+tv,border,active,past+fin,[],posP(PosP)), 
              [ arg(dirO(DirO),np(3+sg,nameOf(iran,[]),[]))], 
              []))).
tmp : test80_result( "Iraq did border iran ?", 
        i_sentence, 
        question80( [], 
          pred( 
             quantV( identityQ(IdentityQ), 
               thing&geo&country-C, '`'(named(C,iraq)),'`'(true), 
               [], 
               thing&geo&country-C), 
             identityQ(IdentityQ18), 
             generic_pred(thing,border,C,B), 
             [ quantV( identityQ(IdentityQ19), 
                 thing&geo&country-B, '`'(named(B,iran)),'`'(true), 
                 [], 
                 thing&geo&country-B)]))).
tmp : test80_result( "Iraq did border iran ?", 
        qplan, 
        answer80([]) :- 
          named(Generic_Iran,iran) , 
          named(Border_Iraq,iraq) , 
          generic_pred(thing,border,Border_Iraq,Generic_Iran)).
tmp : test80_result( "Iraq does border iran ?", 
        into_lexical_segs, 
        [ w( iraq, [
            pos(nnp), root('Iraq'),loc(1),lnks(2),txt("Iraq"), 
            ner('COUNTRY'),truecase('INIT_UPPER'), 
            entitylink('Iraq'),corefed,#(1), 
            txt(["Iraq"]),type('PROPER'),numb('SINGULAR'), 
            gender('NEUTRAL'),animacy('INANIMATE'),repm(@(true)), 
            link(1,'NP',r('NP',seg(1,1))),link(2,'S',r('S',seg(1,5))), 
            flair,upos(propn),fner('s-loc'),fn('_')]), 
          w( does, [
            alt(pos(vbz)), root(do),loc(2),lnks(2),txt("does"), 
            truecase('LOWER'),link(1,'VP',r('VP',seg(2,4))), 
            link(2,'S',r('S',seg(1,5))),old_pos(aux),pos(vb), 
            flair,upos(verb),fner(o),fn('do.01')]), 
          w( border, [
            root(border), loc(3),lnks(3),txt("border"), 
            truecase('LOWER'),link(1,'VP',r('VP',seg(3,4))), 
            link(2,VP,r(VP,seg(2,4))), link(3,'S',r('S',seg(1,5))),old_pos(nn),pos(vb), 
            allen_srl, 
            srl(border,[o(V,[border]),o(ARG1,[iran])]), flair,upos(noun),fner(o),fn('_')]), 
          w( iran, [
            alt(pos(nn)), root(iran),pos(nnp),loc(4),lnks(4), 
            txt("iran"),ner('COUNTRY'),truecase('INIT_UPPER'), 
            entitylink('Iran'),link(1,'NP',r('NP',seg(4,4))), 
            link(2,VP,r(VP,seg(3,4))), 
            link(3,VP,r(VP,seg(2,4))), link(4,'S',r('S',seg(1,5))),flair,upos(propn), 
            fner('s-loc'),fn('_')]), 
          w( ?, [
            pos('.'), root(?),loc(5),lnks(1),txt("?"), 
            link(1,'S',r('S',seg(1,5))),spacy,spos('.'), 
            loc(10),dep_parent(punct,n(have,4)),node(n(?,10)), 
            flair,upos(punct),fner(o),fn('_')])]).
tmp : test80_result( "Iraq does border iran ?", 
        sentence80, 
        q( s( np(3+sg,nameOf(iraq,[]),[]), 
              verb(main+tv,border,active,pres+fin,[],posP(PosP)), 
              [ arg(dirO(DirO),np(3+sg,nameOf(iran,[]),[]))], 
              []))).
tmp : test80_result( "Iraq does border iran ?", 
        i_sentence, 
        question80( [], 
          pred( 
             quantV( identityQ(IdentityQ), 
               thing&geo&country-C, '`'(named(C,iraq)),'`'(true), 
               [], 
               thing&geo&country-C), 
             identityQ(IdentityQ18), 
             generic_pred(thing,border,C,B), 
             [ quantV( identityQ(IdentityQ19), 
                 thing&geo&country-B, '`'(named(B,iran)),'`'(true), 
                 [], 
                 thing&geo&country-B)]))).
tmp : test80_result( "Iraq does border iran ?", 
        qplan, 
        answer80([]) :- 
          named(Generic_Iran,iran) , 
          named(Border_Iraq,iraq) , 
          generic_pred(thing,border,Border_Iraq,Generic_Iran)).
tmp : test80_result( "Iraq is bordering iran ?", 
        into_lexical_segs, 
        [ w( iraq, [
            pos(nnp), root('Iraq'),loc(1),lnks(2),txt("Iraq"), 
            ner('COUNTRY'),truecase('INIT_UPPER'), 
            entitylink('Iraq'),corefed,#(1), 
            txt(["Iraq"]),type('PROPER'),numb('SINGULAR'), 
            gender('NEUTRAL'),animacy('INANIMATE'),repm(@(true)), 
            link(1,'NP',r('NP',seg(1,1))),link(2,'S',r('S',seg(1,5))), 
            flair,upos(propn),fner('s-loc'),fn('_')]), 
          w( is, [
            alt(pos(vbz)), root(be),loc(2),lnks(2),txt("is"), 
            truecase('LOWER'),link(1,'VP',r('VP',seg(2,4))), 
            link(2,'S',r('S',seg(1,5))),old_pos(aux),pos(vb), 
            flair,upos(verb),fner(o),fn('be.03')]), 
          w( bordering, [
            pos(vbg), root(border),loc(3),lnks(3), 
            txt("bordering"),truecase('LOWER'), 
            link(1,VP,r(VP,seg(3,4))), 
            link(2,VP,r(VP,seg(2,4))), link(3,'S',r('S',seg(1,5))),flair,upos(verb), 
            fner(o),fn('border.01')]), 
          w( iran, [
            pos(nnp), root(iran),loc(4),lnks(4),txt("iran"), 
            ner('COUNTRY'),truecase('INIT_UPPER'), 
            entitylink('Iran'),corefed,#(2), 
            txt(["iran"]),type('PROPER'), 
            numb('SINGULAR'),gender('NEUTRAL'), 
            animacy('INANIMATE'),repm(@(true)), 
            link(1,NP,r(NP,seg(4,4))), 
            link(2,VP,r(VP,seg(3,4))), 
            link(3,VP,r(VP,seg(2,4))), link(4,'S',r('S',seg(1,5))),flair,upos(propn), 
            fner('s-loc'),fn('_')]), 
          w( ?, [
            pos('.'), root(?),loc(5),lnks(1),txt("?"), 
            link(1,'S',r('S',seg(1,5))),flair,upos(punct), 
            fner(o),fn('_')])]).
tmp : test80_result( "Iraq is bordering iran ?", 
        sentence80, 
        q( s( np(3+sg,nameOf(iraq,[]),[]), 
              verb(main+tv,border,active,pres+fin,[prog],posP(PosP)), 
              [ arg(dirO(DirO),np(3+sg,nameOf(iran,[]),[]))], 
              []))).
tmp : test80_result( "Iraq is bordering iran ?", 
        i_sentence, 
        question80( [], 
          pred( 
             quantV( identityQ(IdentityQ), 
               thing&geo&country-C, '`'(named(C,iraq)),'`'(true), 
               [], 
               thing&geo&country-C), 
             identityQ(IdentityQ18), 
             generic_pred(thing,border,C,B), 
             [ quantV( identityQ(IdentityQ19), 
                 thing&geo&country-B, '`'(named(B,iran)),'`'(true), 
                 [], 
                 thing&geo&country-B)]))).
tmp : test80_result( "Iraq is bordering iran ?", 
        qplan, 
        answer80([]) :- 
          named(Generic_Iran,iran) , 
          named(Border_Iraq,iraq) , 
          generic_pred(thing,border,Border_Iraq,Generic_Iran)).
tmp : test80_result( "Iraq was bordering iran ?", 
        into_lexical_segs, 
        [ w( iraq, [
            pos(nnp), root('Iraq'),loc(1),lnks(2),txt("Iraq"), 
            ner('COUNTRY'),truecase('INIT_UPPER'), 
            entitylink('Iraq'),corefed,#(1), 
            txt(["Iraq"]),type('PROPER'),numb('SINGULAR'), 
            gender('NEUTRAL'),animacy('INANIMATE'),repm(@(true)), 
            link(1,'NP',r('NP',seg(1,1))),link(2,'S',r('S',seg(1,5))), 
            flair,upos(propn),fner('s-loc'),fn('_')]), 
          w( was, [
            alt(pos(vbd)), root(be),loc(2),lnks(2),txt("was"), 
            truecase('LOWER'),link(1,'VP',r('VP',seg(2,4))), 
            link(2,'S',r('S',seg(1,5))),old_pos(aux),pos(vb), 
            flair,upos(verb),fner(o),fn('be.03')]), 
          w( bordering, [
            pos(vbg), root(border),loc(3),lnks(3), 
            txt("bordering"),truecase('LOWER'), 
            link(1,VP,r(VP,seg(3,4))), 
            link(2,VP,r(VP,seg(2,4))), link(3,'S',r('S',seg(1,5))),allen_srl, 
            srl( bordering, [
              o(ARG2,[Iraq]), o('V',[bordering]),o('ARG1',[iran])]), flair,upos(verb),fner(o),fn('border.01')]), 
          w( iran, [
            pos(nnp), root(iran),loc(4),lnks(4),txt("iran"), 
            ner('COUNTRY'),truecase('INIT_UPPER'), 
            entitylink('Iran'),corefed,#(2), 
            txt(["iran"]),type('PROPER'), 
            numb('SINGULAR'),gender('NEUTRAL'), 
            animacy('INANIMATE'),repm(@(true)), 
            link(1,NP,r(NP,seg(4,4))), 
            link(2,VP,r(VP,seg(3,4))), 
            link(3,VP,r(VP,seg(2,4))), link(4,'S',r('S',seg(1,5))),flair,upos(propn), 
            fner('s-loc'),fn('_')]), 
          w( ?, [
            pos('.'), root(?),loc(5),lnks(1),txt("?"), 
            link(1,'S',r('S',seg(1,5))),spacy,spos('.'), 
            loc(11),dep_parent(punct,n(have,4)),node(n(?,11)), 
            flair,upos(punct),fner(o),fn('_')])]).
tmp : test80_result( "Iraq was bordering iran ?", 
        sentence80, 
        q( s( np(3+sg,nameOf(iraq,[]),[]), 
              verb(main+tv,border,active,past+fin,[prog],posP(PosP)), 
              [ arg(dirO(DirO),np(3+sg,nameOf(iran,[]),[]))], 
              []))).
tmp : test80_result( "Iraq was bordering iran ?", 
        i_sentence, 
        question80( [], 
          pred( 
             quantV( identityQ(IdentityQ), 
               thing&geo&country-C, '`'(named(C,iraq)),'`'(true), 
               [], 
               thing&geo&country-C), 
             identityQ(IdentityQ18), 
             generic_pred(thing,border,C,B), 
             [ quantV( identityQ(IdentityQ19), 
                 thing&geo&country-B, '`'(named(B,iran)),'`'(true), 
                 [], 
                 thing&geo&country-B)]))).
tmp : test80_result( "Iraq was bordering iran ?", 
        qplan, 
        answer80([]) :- 
          named(Generic_Iran,iran) , 
          named(Border_Iraq,iraq) , 
          generic_pred(thing,border,Border_Iraq,Generic_Iran)).
tmp : test80_result( "Iraq will border iran ?", 
        into_lexical_segs, 
        [ w( iraq, [
            pos(nnp), root('Iraq'),loc(1),lnks(3),txt("Iraq"), 
            ner('COUNTRY'),truecase('INIT_UPPER'), 
            entitylink('Iraq'),corefed,#(1), 
            txt(["Iraq"]),type('PROPER'),numb('SINGULAR'), 
            gender('NEUTRAL'),animacy('INANIMATE'),repm(@(true)), 
            link(1,'NP',r('NP',seg(1,1))),link(2,'S',r('S',seg(1,5))), 
            link(3,'CORENLP',r('CORENLP',seg(1,5))),flair, 
            upos(propn),fner('s-loc'),fn('_')]), 
          w( will, [
            pos(md), root(will),loc(2),lnks(3),txt("will"), 
            truecase('LOWER'),link(1,'VP',r('VP',seg(2,4))), 
            link(2,S,r(S,seg(1,5))), link(3,'CORENLP',r('CORENLP',seg(1,5))),flair, 
            upos(aux),fner(o),fn('_')]), 
          w( border, [
            pos(vb), root(border),loc(3),lnks(4),txt("border"), 
            truecase('LOWER'),link(1,'VP',r('VP',seg(3,4))), 
            link(2,VP,r(VP,seg(2,4))), 
            link(3,S,r(S,seg(1,5))), link(4,'CORENLP',r('CORENLP',seg(1,5))),flair, 
            upos(verb),fner(o),fn('border.01')]), 
          w( iran, [
            pos(nnp), root(iran),loc(4),lnks(5),txt("iran"), 
            ner('COUNTRY'),truecase('INIT_UPPER'), 
            entitylink('Iran'),corefed,#(2), 
            txt(["iran"]),type('PROPER'), 
            numb('SINGULAR'),gender('NEUTRAL'), 
            animacy('INANIMATE'),repm(@(true)), 
            link(1,NP,r(NP,seg(4,4))), 
            link(2,VP,r(VP,seg(3,4))), 
            link(3,VP,r(VP,seg(2,4))), 
            link(4,S,r(S,seg(1,5))), link(5,'CORENLP',r('CORENLP',seg(1,5))),flair, 
            upos(propn),fner('s-loc'),fn('_')]), 
          w( ?, [
            pos('.'), root(?),loc(5),lnks(2),txt("?"), 
            link(1,S,r(S,seg(1,5))), link(2,'CORENLP',r('CORENLP',seg(1,5))),flair, 
            upos(punct),fner(o),fn('_')])]).
tmp : test80_result( "Iraq will border iran ?", 
        sentence80, 
        q( s( np(3+sg,nameOf(iraq,[]),[]), 
              verb(main+tv,border,active,Fin+fin,[],posP(will)), 
              [ arg(dirO(DirO),np(3+sg,nameOf(iran,[]),[]))], 
              []))).
tmp : test80_result( "Iraq will border iran ?", 
        i_sentence, 
        question80( [], 
          pred( 
             quantV( identityQ(IdentityQ), 
               thing&geo&country-C, '`'(named(C,iraq)),'`'(true), 
               [], 
               thing&geo&country-C), 
             identityQ(IdentityQ18), 
             will(generic_pred(thing,border,C,B)), 
             [ quantV( identityQ(IdentityQ19), 
                 thing&geo&country-B, '`'(named(B,iran)),'`'(true), 
                 [], 
                 thing&geo&country-B)]))).
tmp : test80_result( "Iraq will border iran ?", 
        qplan, 
        answer80([]) :- 
          named(Generic_Iran,iran) , 
          named(Border_Iraq,iraq) , 
          will(generic_pred(thing,border,Border_Iraq,Generic_Iran))).
tmp : test80_result( "Is New York in america ?", 
        into_lexical_segs, 
        [ w( is, [
            alt(pos(vbz)), root(be),loc(1),lnks(1),txt("Is"), 
            truecase('INIT_UPPER'),link(1,'S',r('S',seg(1,6))), 
            old_pos(aux),pos(vb),flair,upos(verb), 
            fner(o),fn('be.01')]), 
          w( new, [
            pos(nnp), root('New'),loc(2),lnks(2),txt("New"), 
            ner('STATE_OR_PROVINCE'),truecase('INIT_UPPER'), 
            entitylink('New_York'),link(1,'NP',r('NP',seg(2,3))), 
            link(2,'S',r('S',seg(1,6))),flair,upos(propn), 
            fner('b-loc'),fn('_')]), 
          w( york, [
            pos(nnp), root('York'),loc(3),lnks(2),txt("York"), 
            ner('STATE_OR_PROVINCE'),truecase('INIT_UPPER'), 
            entitylink('New_York'),link(1,'NP',r('NP',seg(2,3))), 
            link(2,'S',r('S',seg(1,6))),flair,upos(propn), 
            fner('e-loc'),fn('_')]), 
          w( in, [
            pos(in), root(in),loc(4),lnks(2),txt("in"), 
            truecase('LOWER'),link(1,'PP',r('PP',seg(4,5))), 
            link(2,'S',r('S',seg(1,6))),spacy,spos(in), 
            loc(5),dep_child(pobj,n(asia,6)), 
            dep_parent(prep,n(are,4)),node(n(in,5)),flair, 
            upos(adp),fner(o),fn('_')]), 
          w( america, [
            pos(nnp), root(america),loc(5),lnks(3), 
            txt("america"),ner('COUNTRY'), 
            truecase('INIT_UPPER'),entitylink('America'), 
            corefed,#(2),txt(["america"]), 
            type('PROPER'),numb('SINGULAR'),gender('NEUTRAL'), 
            animacy('INANIMATE'),repm(@(true)), 
            link(1,NP,r(NP,seg(5,5))), 
            link(2,PP,r(PP,seg(4,5))), link(3,'S',r('S',seg(1,6))),flair,upos(propn), 
            fner('s-loc'),fn('_')]), 
          w( ?, [
            pos('.'), root(?),loc(6),lnks(1),txt("?"), 
            link(1,'S',r('S',seg(1,6))),spacy,spos('.'), 
            loc(7),dep_parent(punct,n(are,4)),node(n(?,7)), 
            flair,upos(punct),fner(o),fn('_')])]).
tmp : test80_result( "Is New York in america ?", 
        sentence80, 
        q( s( np(3+sg,nameOf(new_york,[]),[]), 
              verb(aux+be(Be),be(Be),active,pres+fin,[],posP(PosP)), 
              [ arg(arg_pred(Arg19),prep_phrase(prep(in),np(3+sg,nameOf(america,[]),[])))], 
              []))).
tmp : test80_result( "Is New York in america ?", 
        i_sentence, 
        question80( [], 
          pred( 
             quantV( identityQ(IdentityQ), 
               thing&City&city-C, '`'(named(C,new_york)),'`'(true), 
               [], 
               thing&City&city-C), identityQ(IdentityQ18),true, 
             [ '`'(trans_pred(thing,contain,B,C)), 
               quantV( identityQ(IdentityQ19), 
                 thing&geo&continent-B, '`'(named(B,america)),'`'(true), 
                 [], 
                 thing&geo&continent-B)]))).
tmp : test80_result( "Is New York in america ?", 
        qplan, 
        answer80([]) :- 
          named(Contain_America,america) , 
          named(New_york,new_york) , 
          trans_pred(thing,contain,Contain_America,New_york)).
tmp : test80_result( "Is spain bordered by the pacific ?", 
        into_lexical_segs, 
        [ w( is, [
            alt(pos(vbz)), root(be),loc(1),lnks(1),txt("Is"), 
            truecase('LOWER'),link(1,'S',r('S',seg(1,7))), 
            old_pos(aux),pos(vb),flair,upos(verb), 
            fner(o),fn('be.03')]), 
          w( spain, [
            alt(pos(nn)), root(spain),pos(nnp),loc(2),lnks(2), 
            txt("spain"),ner('COUNTRY'), 
            truecase('INIT_UPPER'),entitylink('Spain'), 
            link(1,NP,r(NP,seg(2,2))), link(2,'S',r('S',seg(1,7))),flair,upos(noun), 
            fner('s-loc'),fn('_')]), 
          w( bordered, [
            pos(vbn), root(border),loc(3),lnks(2), 
            txt("bordered"),truecase('LOWER'), 
            link(1,VP,r(VP,seg(3,6))), link(2,'S',r('S',seg(1,7))),allen_srl, 
            srl( bordered, [
              o(ARG2,[spain]), 
              o(V,[bordered]), 
              o(ARG1,[by,the,pacific])]), flair,upos(verb),fner(o),fn('border.01')]), 
          w( by, [
            pos(in), root(by),loc(4),lnks(3),txt("by"), 
            truecase('LOWER'),link(1,'PP',r('PP',seg(4,6))), 
            link(2,VP,r(VP,seg(3,6))), link(3,'S',r('S',seg(1,7))),flair,upos(adp), 
            fner(o),fn('_')]), 
          w( the, [
            pos(dt), root(the),loc(5),lnks(4),txt("the"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(5,6))), 
            link(2,PP,r(PP,seg(4,6))), 
            link(3,VP,r(VP,seg(3,6))), link(4,'S',r('S',seg(1,7))),flair,upos(det), 
            fner(o),fn('_')]), 
          w( pacific, [
            alt(pos(jj)), root(pacific),loc(6),lnks(4), 
            txt("pacific"),truecase('INIT_UPPER'), 
            link(1,NP,r(NP,seg(5,6))), 
            link(2,PP,r(PP,seg(4,6))), 
            link(3,VP,r(VP,seg(3,6))), link(4,'S',r('S',seg(1,7))),old_pos(nnp),pos(jj), 
            flair,upos(adj),fner(o),fn('_')]), 
          w( ?, [
            pos('.'), root(?),loc(7),lnks(1),txt("?"), 
            link(1,'S',r('S',seg(1,7))),flair,upos(punct), 
            fner(o),fn('_')])]).
tmp : test80_result( "Is spain bordered by the pacific ?", 
        sentence80, 
        q( s( np(3+sg,nameOf(spain,[]),[]), 
              verb(main+tv,border,passive,pres+fin,[],posP(PosP)), 
              [], 
              [ prep_phrase(prep(by),np(3+sg,nameOf(pacific,[]),[]))]))).
tmp : test80_result( "Is spain bordered by the pacific ?", 
        i_sentence, 
        question80( [], 
          pred( 
             quantV( identityQ(IdentityQ), 
               thing&geo&country-C, '`'(named(C,spain)),'`'(true), 
               [], 
               thing&geo&country-C), 
             identityQ(IdentityQ18), 
             generic_pred(thing,border,B,C), 
             [ quantV( identityQ(IdentityQ19), 
                 thing&geo&seamass-B, '`'(named(B,pacific)),'`'(true), 
                 [], 
                 thing&geo&seamass-B)]))).
tmp : test80_result( "Is spain bordered by the pacific ?", 
        qplan, 
        answer80([]) :- 
          named(Border_Pacific,pacific) , 
          named(Generic_Spain,spain) , 
          generic_pred(thing,border,Border_Pacific,Generic_Spain)).
tmp : test80_result( "Is the population of china 840 million ?", 
        into_lexical_segs, 
        [ w( is, [
            alt(pos(vbz)), root(be),loc(1),lnks(1),txt("Is"), 
            truecase('INIT_UPPER'),link(1,'S',r('S',seg(1,8))), 
            old_pos(aux),pos(vb),flair,upos(verb), 
            fner(o),fn('be.01')]), 
          w( the, [
            pos(dt), root(the),loc(2),lnks(3),txt("the"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(2,3))), 
            link(2,NP,r(NP,seg(2,5))), link(3,'S',r('S',seg(1,8))),flair,upos(det), 
            fner(o),fn('_')]), 
          w( population, [
            pos(nn), root(population),loc(3),lnks(3), 
            txt("population"),truecase('LOWER'), 
            link(1,NP,r(NP,seg(2,3))), 
            link(2,NP,r(NP,seg(2,5))), link(3,'S',r('S',seg(1,8))),flair,upos(noun), 
            fner(o),fn('_')]), 
          w( of, [
            pos(in), root(of),loc(4),lnks(3),txt("of"), 
            truecase('LOWER'),link(1,'PP',r('PP',seg(4,5))), 
            link(2,NP,r(NP,seg(2,5))), link(3,'S',r('S',seg(1,8))),flair,upos(adp), 
            fner(o),fn('_')]), 
          w( china, [
            root(china), loc(5),lnks(4),txt("china"),ner('COUNTRY'), 
            truecase('INIT_UPPER'),entitylink('Porcelain'), 
            link(1,NP,r(NP,seg(5,5))), 
            link(2,PP,r(PP,seg(4,5))), 
            link(3,NP,r(NP,seg(2,5))), link(4,'S',r('S',seg(1,8))),old_pos(nn),pos(nnp), 
            flair,upos(propn),fner('s-loc'),fn('_')]), 
          w( '840', [
            pos(cd), root('840'),loc(6),lnks(3),txt("840"), 
            ner('NUMBER'),normalizedNER(840000000.0), 
            entitylink('World_population'), 
            link(1,QP,r(QP,seg(6,7))), 
            link(2,NP,r(NP,seg(6,7))), link(3,'S',r('S',seg(1,8))),flair,upos(num), 
            fner(o),fn('_')]), 
          w( million, [
            pos(cd), root(million),loc(7),lnks(3), 
            txt("million"),ner('NUMBER'), 
            normalizedNER(840000000.0),truecase('LOWER'), 
            entitylink('World_population'), 
            link(1,QP,r(QP,seg(6,7))), 
            link(2,NP,r(NP,seg(6,7))), link(3,'S',r('S',seg(1,8))),flair,upos(num), 
            fner(o),fn('_')]), 
          w( ?, [
            pos('.'), root(?),loc(8),lnks(1),txt("?"), 
            link(1,'S',r('S',seg(1,8))),spacy,spos('.'), 
            dep_parent(punct,n(are,4)),node(n(?,8)),flair, 
            upos(punct),fner(o),fn('_')])]).
tmp : test80_result( "Is the population of china 840 million ?", 
        sentence80, 
        q( s( np( 3+sg, 
                np_head(det(the(sg)),[],population), 
                [ prep_phrase(prep(of),np(3+sg,nameOf(china,[adj(ace_var(self,840))]),[]))]), 
              verb(aux+be(Be),be(Be),active,pres+fin,[],posP(PosP)), 
              [ arg(dirO(DirO),np(3+_213936,np_head(generic(Generic22),[],million),[]))], 
              []))).
tmp : test80_result( "Is the population of china 840 million ?", 
        i_sentence, 
        question80( [], 
          pred( 
             quantV( det(the(sg)), 
               value&units&population-B, 
               '`'(count_pred(thing,population,C,B)), 
               '`'(true), 
               [ quantV( identityQ(IdentityQ), 
                   thing&geo&country-C, 
                   '`'(named(C,china)), 
                   '`'(ace_var(C,'840'))&'`'(true), 
                   [], 
                   thing&geo&country-C)], 
               value&units&population-B), 
             identityQ(IdentityQ18), 
             subsumed_by(B,D), 
             [ quantV( voidQ(VoidQ), 
                 value&units&population-D, '`'(D=million),'`'(true), 
                 [], 
                 value&units&population-D)]))).
tmp : test80_result( "Is the population of china 840 million ?", 
        qplan, 
        answer80([]) :-  
          ^( Count_Million, 
            ( named(Population_D840_China16,china)  ,
              ace_var(Population_D840_China16,'840') , 
              count_pred(thing,population,Population_D840_China16,Count_Million) , 
              subsumed_by(Count_Million,million)))).
tmp : test80_result( "Is the population of china greater than 200 million ?", 
        into_lexical_segs, 
        [ w( is, [
            alt(pos(vbz)), root(be),loc(1),lnks(2),txt("Is"), 
            truecase('INIT_UPPER'),link(1,'VP',r('VP',seg(1,9))), 
            link(2,'S',r('S',seg(1,10))),old_pos(aux),pos(vb), 
            flair,upos(verb),fner(o),fn('be.01')]), 
          w( the, [
            pos(dt), root(the),loc(2),lnks(4),txt("the"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(2,3))), 
            link(2,NP,r(NP,seg(2,9))), 
            link(3,VP,r(VP,seg(1,9))), link(4,'S',r('S',seg(1,10))),flair,upos(det), 
            fner(o),fn('_')]), 
          w( population, [
            pos(nn), root(population),loc(3),lnks(4), 
            txt("population"),truecase('LOWER'), 
            link(1,NP,r(NP,seg(2,3))), 
            link(2,NP,r(NP,seg(2,9))), 
            link(3,VP,r(VP,seg(1,9))), link(4,'S',r('S',seg(1,10))),flair,upos(noun), 
            fner(o),fn('_')]), 
          w( of, [
            pos(in), root(of),loc(4),lnks(4),txt("of"), 
            truecase('LOWER'),link(1,'PP',r('PP',seg(4,9))), 
            link(2,NP,r(NP,seg(2,9))), 
            link(3,VP,r(VP,seg(1,9))), link(4,'S',r('S',seg(1,10))),flair,upos(adp), 
            fner(o),fn('_')]), 
          w( china, [
            pos(nn), root(china),loc(5),lnks(5),txt("china"), 
            ner('COUNTRY'),truecase('INIT_UPPER'), 
            entitylink('Porcelain'),link(1,'NP',r('NP',seg(5,9))), 
            link(2,PP,r(PP,seg(4,9))), 
            link(3,NP,r(NP,seg(2,9))), 
            link(4,VP,r(VP,seg(1,9))), link(5,'S',r('S',seg(1,10))),flair,upos(noun), 
            fner('s-loc'),fn('_')]), 
          w( greater, [
            pos(jjr), root(greater),loc(6),lnks(6), 
            txt("greater"),truecase('LOWER'), 
            link(1,QP,r(QP,seg(6,9))), 
            link(2,NP,r(NP,seg(5,9))), 
            link(3,PP,r(PP,seg(4,9))), 
            link(4,NP,r(NP,seg(2,9))), 
            link(5,VP,r(VP,seg(1,9))), link(6,'S',r('S',seg(1,10))),flair,upos(adj), 
            fner(o),fn('_')]), 
          w( than, [
            pos(in), root(than),loc(7),lnks(6),txt("than"), 
            truecase('LOWER'),link(1,'QP',r('QP',seg(6,9))), 
            link(2,NP,r(NP,seg(5,9))), 
            link(3,PP,r(PP,seg(4,9))), 
            link(4,NP,r(NP,seg(2,9))), 
            link(5,VP,r(VP,seg(1,9))), link(6,'S',r('S',seg(1,10))),flair,upos(adp), 
            fner(o),fn('_')]), 
          w( '200', [
            pos(cd), root('200'),loc(8),lnks(6),txt("200"), 
            ner('NUMBER'),normalizedNER('>2.0E8'), 
            entitylink('Google_search'), 
            link(1,QP,r(QP,seg(6,9))), 
            link(2,NP,r(NP,seg(5,9))), 
            link(3,PP,r(PP,seg(4,9))), 
            link(4,NP,r(NP,seg(2,9))), 
            link(5,VP,r(VP,seg(1,9))), link(6,'S',r('S',seg(1,10))),flair,upos(num), 
            fner(o),fn('_')]), 
          w( million, [
            pos(cd), root(million),loc(9),lnks(6), 
            txt("million"),ner('NUMBER'), 
            normalizedNER('>2.0E8'),truecase('LOWER'), 
            entitylink('Google_search'), 
            link(1,QP,r(QP,seg(6,9))), 
            link(2,NP,r(NP,seg(5,9))), 
            link(3,PP,r(PP,seg(4,9))), 
            link(4,NP,r(NP,seg(2,9))), 
            link(5,VP,r(VP,seg(1,9))), link(6,'S',r('S',seg(1,10))),flair,upos(num), 
            fner(o),fn('_')]), 
          w( ?, [
            pos('.'), root(?),loc(10),lnks(1),txt("?"), 
            link(1,'S',r('S',seg(1,10))),flair,upos(punct), 
            fner(o),fn('_')])]).
tmp : test80_result( "Is the population of china greater than 200 million ?", 
        sentence80, 
        q( s( np( 3+sg, 
                np_head(det(the(sg)),[],population), 
                [ prep_phrase(prep(of),np(3+sg,nameOf(china,[]),[])), 
                  reduced_rel( value&units&population-B, 
                    s( np(3+sg,wh(value&units&population-B),[]), 
                       verb(aux+be(PosP_Be),be(PosP_Be),active,pres+fin,[],posP(PosP_Be)), 
                       [ arg(arg_pred(Arg23),comp(more,adj(great),np(3+sg,nameOf(200,[]),[])))], 
                       []))]), 
              verb(aux+be(Be24),be(Be24),active,pres+fin,[],posP(PosP)), 
              [ arg(dirO(DirO),np(3+_69284,np_head(generic(Generic27),[],million),[]))], 
              []))).
tmp : test80_result( "Is the population of china greater than 200 million ?", 
        i_sentence, 
        question80( [], 
          pred( 
             quantV( det(the(sg)), 
               value&units&population-B, 
               '`'(count_pred(thing,population,F,B)), 
               '`'(true), 
               [ quantV( identityQ(IdentityQ), 
                   thing&geo&country-F, '`'(named(F,china)),'`'(true), 
                   [], 
                   thing&geo&country-F), 
                 pred( 
                    quantV( identityQ(IdentityQ18), 
                      value&units&population-B, '`'(true),'`'(true), 
                      [], 
                      value&units&population-B), identityQ(IdentityQ19),true, 
                    [ ( quantV( voidQ(VoidQ), 
                          value&units&population-E, '`'(exceeds(B,E)),'`'(true), 
                          [], 
                          _202486-E)  &
                        quantV( voidQ(VoidQ21), 
                          value&units&population-D, '`'(exceeds(C,D)),'`'(true), 
                          [], 
                          _195756-D) & 
                        '`'(exceeds(E,D))), 
                      quantV( identityQ(IdentityQ22), 
                        value&units&population-C, '`'(named(C,'200')),'`'(true), 
                        [], 
                        value&units&population-C)])], 
               value&units&population-B), 
             identityQ(IdentityQ23), 
             subsumed_by(B,G), 
             [ quantV( voidQ(VoidQ24), 
                 value&units&population-G, '`'(G=million),'`'(true), 
                 [], 
                 value&units&population-G)]))).
tmp : test80_result( "Is the population of china greater than 200 million ?", 
        qplan, 
        answer80([]) :-  
          ^( Count_Million_Exceeds, 
            ( named(D200,'200')  ,
              ^( Exceeds22, 
                ( exceeds(D200,Exceeds22) , 
                  ^( Exceeds20, 
                    ( exceeds(Count_Million_Exceeds,Exceeds20)  ,
                      named(Population_China18,china) , 
                      count_pred(thing,population,Population_China18,Count_Million_Exceeds) , 
                      exceeds(Exceeds20,Exceeds22))))) , 
              subsumed_by(Count_Million_Exceeds,million)))).
tmp : test80_result( "Is the rhine in switzerland ?", 
        into_lexical_segs, 
        [ w( is, [
            alt(pos(vbz)), root(be),loc(1),lnks(1),txt("Is"), 
            truecase('LOWER'),link(1,'S',r('S',seg(1,6))), 
            old_pos(aux),pos(vbz),spacy,spos(vbz), 
            loc(2),tense(present),txt("is"), 
            dep_parent(auxpass,n(bordered,3)),node(n(is,2)),flair, 
            upos(verb),fner(o),fn('be.01')]), 
          w( the, [
            pos(dt), root(the),loc(2),lnks(2),txt("the"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(2,3))), 
            link(2,'S',r('S',seg(1,6))),flair,upos(det), 
            fner(o),fn('_')]), 
          w( rhine, [
            pos(nn), root(rhine),loc(3),lnks(2),txt("rhine"), 
            truecase('INIT_UPPER'),link(1,'NP',r('NP',seg(2,3))), 
            link(2,'S',r('S',seg(1,6))),flair,upos(noun), 
            fner(o),fn('_')]), 
          w( in, [
            pos(in), root(in),loc(4),lnks(2),txt("in"), 
            truecase('LOWER'),link(1,'PP',r('PP',seg(4,5))), 
            link(2,'S',r('S',seg(1,6))),flair,upos(adp), 
            fner(o),fn('_')]), 
          w( switzerland, [
            pos(nnp), root(switzerland),loc(5),lnks(3), 
            txt("switzerland"),ner('COUNTRY'), 
            truecase('INIT_UPPER'),entitylink('Switzerland'), 
            corefed,#(2),txt(["switzerland"]), 
            type('PROPER'),numb('SINGULAR'),gender('NEUTRAL'), 
            animacy('INANIMATE'),repm(@(true)), 
            link(1,NP,r(NP,seg(5,5))), 
            link(2,PP,r(PP,seg(4,5))), link(3,'S',r('S',seg(1,6))),flair,upos(noun), 
            fner('s-loc'),fn('_')]), 
          w( ?, [
            pos('.'), root(?),loc(6),lnks(1),txt("?"), 
            link(1,'S',r('S',seg(1,6))),spacy,spos('.'), 
            dep_parent(punct,n(bordered,3)),node(n(?,6)), 
            flair,upos(punct),fner(o),fn('_')])]).
tmp : test80_result( "Is the rhine in switzerland ?", 
        sentence80, 
        q( s( np(3+sg,nameOf(rhine,[]),[]), 
              verb(aux+be(Be),be(Be),active,pres+fin,[],posP(PosP)), 
              [ arg(arg_pred(Arg19),prep_phrase(prep(in),np(3+sg,nameOf(switzerland,[]),[])))], 
              []))).
tmp : test80_result( "Is the rhine in switzerland ?", 
        i_sentence, 
        question80( [], 
          pred( 
             quantV( identityQ(IdentityQ), 
               thing&River&river-C, '`'(named(C,rhine)),'`'(true), 
               [], 
               thing&River&river-C), identityQ(IdentityQ18),true, 
             [ '`'(trans_pred(thing,contain,B,C)), 
               quantV( identityQ(IdentityQ19), 
                 thing&geo&country-B, '`'(named(B,switzerland)),'`'(true), 
                 [], 
                 thing&geo&country-B)]))).
tmp : test80_result( "Is the rhine in switzerland ?", 
        qplan, 
        answer80([]) :- 
          named(Contain_Switzerland,switzerland) , 
          named(Rhine,rhine) , 
          trans_pred(thing,contain,Contain_Switzerland,Rhine)).
tmp : test80_result( "Is the united kingdom in europe ?", 
        into_lexical_segs, 
        [ w( is, [
            alt(pos(vbz)), root(be),loc(1),lnks(2),txt("Is"), 
            truecase('LOWER'),link(1,'VP',r('VP',seg(1,6))), 
            link(2,'S',r('S',seg(1,7))),old_pos(aux),pos(vb), 
            flair,upos(verb),fner(o),fn('be.01')]), 
          w( the, [
            pos(dt), root(the),loc(2),lnks(4),txt("the"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(2,4))), 
            link(2,NP,r(NP,seg(2,6))), 
            link(3,VP,r(VP,seg(1,6))), link(4,'S',r('S',seg(1,7))),flair,upos(det), 
            fner(o),fn('_')]), 
          w( united, [
            alt(pos(jj)), root(united),loc(3),lnks(4),txt("united"), 
            ner('COUNTRY'),truecase('INIT_UPPER'), 
            entitylink('United_Kingdom'), 
            link(1,NP,r(NP,seg(2,4))), 
            link(2,NP,r(NP,seg(2,6))), 
            link(3,VP,r(VP,seg(1,6))), link(4,'S',r('S',seg(1,7))),old_pos(vbn),pos(jj), 
            flair,upos(adj),fner('b-loc'),fn('_')]), 
          w( kingdom, [
            pos(nn), root(kingdom),loc(4),lnks(4), 
            txt("kingdom"),ner('COUNTRY'), 
            truecase('INIT_UPPER'),entitylink('United_Kingdom'), 
            link(1,NP,r(NP,seg(2,4))), 
            link(2,NP,r(NP,seg(2,6))), 
            link(3,VP,r(VP,seg(1,6))), link(4,'S',r('S',seg(1,7))),flair,upos(noun), 
            fner('e-loc'),fn('_')]), 
          w( in, [
            pos(in), root(in),loc(5),lnks(4),txt("in"), 
            truecase('LOWER'),link(1,'PP',r('PP',seg(5,6))), 
            link(2,NP,r(NP,seg(2,6))), 
            link(3,VP,r(VP,seg(1,6))), link(4,'S',r('S',seg(1,7))),flair,upos(adp), 
            fner(o),fn('_')]), 
          w( europe, [
            alt(pos(nn)), root(europe),pos(nnp),loc(6),lnks(5), 
            txt("europe"),truecase('INIT_UPPER'), 
            link(1,NP,r(NP,seg(6,6))), 
            link(2,PP,r(PP,seg(5,6))), 
            link(3,NP,r(NP,seg(2,6))), 
            link(4,VP,r(VP,seg(1,6))), link(5,'S',r('S',seg(1,7))),flair,upos(noun), 
            fner('s-loc'),fn('_')]), 
          w( ?, [
            pos('.'), root(?),loc(7),lnks(1),txt("?"), 
            link(1,'S',r('S',seg(1,7))),flair,upos(punct), 
            fner(o),fn('_')])]).
tmp : test80_result( "Is the united kingdom in europe ?", 
        sentence80, 
        q( s( np(3+sg,nameOf(united_kingdom,[]),[]), 
              verb(aux+be(Be),be(Be),active,pres+fin,[],posP(PosP)), 
              [ arg(arg_pred(Arg19),prep_phrase(prep(in),np(3+sg,nameOf(europe,[]),[])))], 
              []))).
tmp : test80_result( "Is the united kingdom in europe ?", 
        i_sentence, 
        question80( [], 
          pred( 
             quantV( identityQ(IdentityQ), 
               thing&geo&country-C, '`'(named(C,united_kingdom)),'`'(true), 
               [], 
               thing&geo&country-C), identityQ(IdentityQ18),true, 
             [ '`'(trans_pred(thing,contain,B,C)), 
               quantV( identityQ(IdentityQ19), 
                 thing&geo&continent-B, '`'(named(B,europe)),'`'(true), 
                 [], 
                 thing&geo&continent-B)]))).
tmp : test80_result( "Is the united kingdom in europe ?", 
        qplan, 
        answer80([]) :- 
          named(Contain_Europe,europe) , 
          named(United_kingdom,united_kingdom) , 
          trans_pred(thing,contain,Contain_Europe,United_kingdom)).
tmp : test80_result( "Is there more than one country in each continent ?", 
        into_lexical_segs, 
        [ w( is, [
            alt(pos(vbz)), root(be),loc(1),lnks(1),txt("Is"), 
            truecase('INIT_UPPER'),link(1,'S',r('S',seg(1,10))), 
            old_pos(aux),pos(vb),flair,upos(verb), 
            fner(o),fn('be.02')]), 
          w( there, [
            alt(pos(rb)), root(there),pos(ex),loc(2),lnks(2), 
            txt("there"),truecase('LOWER'), 
            link(1,NP,r(NP,seg(2,2))), link(2,'S',r('S',seg(1,10))),flair,upos(pron), 
            fner(o),fn('_')]), 
          w( more, [
            pos(jjr), root(more),loc(3),lnks(4),txt("more"), 
            truecase('LOWER'),link(1,'QP',r('QP',seg(3,5))), 
            link(2,NP,r(NP,seg(3,6))), 
            link(3,NP,r(NP,seg(3,9))), link(4,'S',r('S',seg(1,10))),flair,upos(adj), 
            fner(o),fn('_')]), 
          w( than, [
            pos(in), root(than),loc(4),lnks(4),txt("than"), 
            truecase('LOWER'),link(1,'QP',r('QP',seg(3,5))), 
            link(2,NP,r(NP,seg(3,6))), 
            link(3,NP,r(NP,seg(3,9))), link(4,'S',r('S',seg(1,10))),flair,upos(adp), 
            fner(o),fn('_')]), 
          w( one, [
            pos(cd), root(one),loc(5),lnks(4),txt("one"), 
            ner('NUMBER'),normalizedNER('>1.0'), 
            truecase('LOWER'),corefed,#(1), 
            txt(["one"]),type('PROPER'), 
            numb('SINGULAR'),gender('UNKNOWN'), 
            animacy('INANIMATE'),repm(@(true)), 
            link(1,QP,r(QP,seg(3,5))), 
            link(2,NP,r(NP,seg(3,6))), 
            link(3,NP,r(NP,seg(3,9))), link(4,'S',r('S',seg(1,10))),flair,upos(num), 
            fner(o),fn('_')]), 
          w( country, [
            pos(nn), root(country),loc(6),lnks(3), 
            txt("country"),truecase('LOWER'), 
            link(1,NP,r(NP,seg(3,6))), 
            link(2,NP,r(NP,seg(3,9))), link(3,'S',r('S',seg(1,10))),flair,upos(noun), 
            fner(o),fn('_')]), 
          w( in, [
            pos(in), root(in),loc(7),lnks(3),txt("in"), 
            truecase('LOWER'),link(1,'PP',r('PP',seg(7,9))), 
            link(2,NP,r(NP,seg(3,9))), link(3,'S',r('S',seg(1,10))),flair,upos(adp), 
            fner(o),fn('_')]), 
          w( each, [
            pos(dt), root(each),loc(8),lnks(4),txt("each"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(8,9))), 
            link(2,PP,r(PP,seg(7,9))), 
            link(3,NP,r(NP,seg(3,9))), link(4,'S',r('S',seg(1,10))),flair,upos(det), 
            fner(o),fn('_')]), 
          w( continent, [
            pos(nn), root(continent),loc(9),lnks(4), 
            txt("continent"),truecase('LOWER'), 
            link(1,NP,r(NP,seg(8,9))), 
            link(2,PP,r(PP,seg(7,9))), 
            link(3,NP,r(NP,seg(3,9))), link(4,'S',r('S',seg(1,10))),flair,upos(noun), 
            fner(o),fn('_')]), 
          w( ?, [
            pos('.'), root(?),loc(10),lnks(1),txt("?"), 
            link(1,'S',r('S',seg(1,10))),spacy,spos('.'), 
            loc(4),dep_parent(punct,n(borders,2)), 
            node(n(?,4)),flair,upos(punct),fner(o), 
            fn('_')])]).
tmp : test80_result( "Is there more than one country in each continent ?", 
        sentence80, 
        q( s( there, 
             verb(aux+be(Be),be(Be),active,pres+fin,[],posP(PosP)), 
             [ arg( dirO(DirO), 
                 np( 3+sg, 
                   np_head(quantV(more,1),[],country), 
                   [ prep_phrase(prep(in),np(3+sg,np_head(det(each),[],continent),[]))]))], 
             []))).
tmp : test80_result( "Is there more than one country in each continent ?", 
        i_sentence, 
        question80( [], 
          pred( 
             quantV(voidQ(VoidQ),_117734-E,`(true),`(true),[],thing&Thing-E), 
             identityQ(IdentityQ), 
             subsumed_by(E,D), 
             [ quantV( quantV(more,1), 
                 thing&Thing-D, '`'(ti(country,D)),'`'(true), 
                 [ ( quantV( det(each), 
                       thing&geo&continent-B, '`'(ti(continent,B)),'`'(true), 
                       [], 
                       thing&geo&continent-B) & 
                     '`'(trans_pred(thing,contain,B,D)))], 
                 thing&Thing-D)]))).
tmp : test80_result( "Is there more than one country in each continent ?", 
        qplan, 
        answer80([]) :-  
          \+( ^( Contain_Continent, 
                ( ti(continent,Contain_Continent) , 
                  \+( ^( Numberof, 
                        ( numberof( By_Country, 
                            ( ti(country,By_Country)  ,
                              trans_pred(thing,contain,Contain_Continent,By_Country) , 
                              Subsumed_by^subsumed_by(Subsumed_by,By_Country)), 
                            Numberof) , 
                          Numberof>1))))))).
tmp : test80_result( "Is there some ocean that does not border any country ?", 
        into_lexical_segs, 
        [ w( is, [
            alt(pos(vbz)), root(be),loc(1),lnks(1),txt("Is"), 
            truecase('INIT_UPPER'),link(1,'S',r('S',seg(1,11))), 
            old_pos(aux),pos(vb),flair,upos(verb), 
            fner(o),fn('be.02')]), 
          w( there, [
            alt(pos(rb)), root(there),pos(ex),loc(2),lnks(2), 
            txt("there"),truecase('LOWER'), 
            link(1,NP,r(NP,seg(2,2))), link(2,'S',r('S',seg(1,11))),flair,upos(pron), 
            fner(o),fn('_')]), 
          w( some, [
            pos(dt), root(some),loc(3),lnks(3),txt("some"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(3,4))), 
            link(2,NP,r(NP,seg(3,10))), link(3,'S',r('S',seg(1,11))),flair,upos(det), 
            fner(o),fn('_')]), 
          w( ocean, [
            pos(nn), root(ocean),loc(4),lnks(3),txt("ocean"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(3,4))), 
            link(2,NP,r(NP,seg(3,10))), link(3,'S',r('S',seg(1,11))),flair,upos(noun), 
            fner(o),fn('_')]), 
          w( that, [
            pos(wdt), root(that),loc(5),lnks(4),txt("that"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(5,5))), 
            link(2,SBAR,r(SBAR,seg(5,10))), 
            link(3,NP,r(NP,seg(3,10))), link(4,'S',r('S',seg(1,11))),flair,upos(pron), 
            fner(o),fn('_')]), 
          w( does, [
            alt(pos(vbz)), root(do),loc(6),lnks(5),txt("does"), 
            truecase('LOWER'),link(1,'VP',r('VP',seg(6,10))), 
            link(2,S,r(S,seg(6,10))), 
            link(3,SBAR,r(SBAR,seg(5,10))), 
            link(4,NP,r(NP,seg(3,10))), link(5,'S',r('S',seg(1,11))),old_pos(aux),pos(vb), 
            allen_srl,srl(does,[o('V',[does])]), 
            flair,upos(verb),fner(o),fn('do.01')]), 
          w( not, [
            pos(rb), root(not),loc(7),lnks(5),txt("not"), 
            truecase('LOWER'),link(1,'VP',r('VP',seg(6,10))), 
            link(2,S,r(S,seg(6,10))), 
            link(3,SBAR,r(SBAR,seg(5,10))), 
            link(4,NP,r(NP,seg(3,10))), link(5,'S',r('S',seg(1,11))),flair,upos(adv), 
            fner(o),fn('_')]), 
          w( border, [
            alt(pos(vb)), root(border),loc(8),lnks(6),txt("border"), 
            truecase('LOWER'),link(1,'VP',r('VP',seg(8,10))), 
            link(2,VP,r(VP,seg(6,10))), 
            link(3,S,r(S,seg(6,10))), 
            link(4,SBAR,r(SBAR,seg(5,10))), 
            link(5,NP,r(NP,seg(3,10))), link(6,'S',r('S',seg(1,11))),old_pos(nn),pos(vb), 
            allen_srl, 
            srl( border, [
              o(ARG0,[some,ocean]), o('R-ARG0',[that]),o('ARGM-NEG',[not]), 
              o(V,[border]), 
              o(ARG1,[any,country])]), flair,upos(verb),fner(o),fn('occupy.01')]), 
          w( any, [
            pos(dt), root(any),loc(9),lnks(7),txt("any"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(9,10))), 
            link(2,VP,r(VP,seg(8,10))), 
            link(3,VP,r(VP,seg(6,10))), 
            link(4,S,r(S,seg(6,10))), 
            link(5,SBAR,r(SBAR,seg(5,10))), 
            link(6,NP,r(NP,seg(3,10))), link(7,'S',r('S',seg(1,11))),flair,upos(det), 
            fner(o),fn('_')]), 
          w( country, [
            pos(nn), root(country),loc(10),lnks(7), 
            txt("country"),truecase('LOWER'), 
            link(1,NP,r(NP,seg(9,10))), 
            link(2,VP,r(VP,seg(8,10))), 
            link(3,VP,r(VP,seg(6,10))), 
            link(4,S,r(S,seg(6,10))), 
            link(5,SBAR,r(SBAR,seg(5,10))), 
            link(6,NP,r(NP,seg(3,10))), link(7,'S',r('S',seg(1,11))),flair,upos(noun), 
            fner(o),fn('_')]), 
          w( ?, [
            pos('.'), root(?),loc(11),lnks(1),txt("?"), 
            link(1,'S',r('S',seg(1,11))),flair,upos(punct), 
            fner(o),fn('_')])]).
tmp : test80_result( "Is there some ocean that does not border any country ?", 
        sentence80, 
        q( s( there, 
             verb(aux+be(Be),be(Be),active,pres+fin,[],posP(PosP)), 
             [ arg( dirO(DirO), 
                 np( 3+sg, 
                   np_head(det(some),[],ocean), 
                   [ rel( thing&_55064&_55066-B, 
                       s( np(3+sg,wh(thing&_87924&_87926-B),[]), 
                          verb(main+tv,border,active,pres+fin,[],negP(NegP)), 
                          [ arg(dirO(DirO24),np(3+sg,np_head(det(any),[],country),[]))], 
                          []))]))], 
             []))).
tmp : test80_result( "Is there some ocean that does not border any country ?", 
        i_sentence, 
        question80( [], 
          pred( 
             quantV(voidQ(VoidQ),_220940-D,`(true),`(true),[],thing&_220958&_220960-D), 
             identityQ(IdentityQ), 
             subsumed_by(D,B), 
             [ quantV( det(some), 
                 thing&_254646&_254648-B, 
                 '`'(ti(ocean,B)), 
                 ( pred( 
                      quantV( identityQ(IdentityQ19), 
                        thing&_25918&_25920-B, '`'(true),'`'(true), 
                        [], 
                        thing&_19526&_19528-B), notP,generic_pred(thing,border,B,C), 
                      [ quantV( det(any), 
                          thing&_49190&_49192-C, '`'(ti(country,C)),'`'(true), 
                          [], 
                          thing&_42800&_42802-C)]) & 
                   '`'(true)), 
                 [], 
                 thing&_7514&_7516-B)]))).
tmp : test80_result( "Is there some ocean that does not border any country ?", 
        qplan, 
        answer80([]) :-  
          ^( By_Border_Ocean, 
            ( ti(ocean,By_Border_Ocean)  ,
              \+( ^( Generic_Country, 
                    ( ti(country,Generic_Country) , 
                      generic_pred(thing,border,By_Border_Ocean,Generic_Country)))) , 
              Subsumed_by^subsumed_by(Subsumed_by,By_Border_Ocean)))).
tmp : test80_result( "The rhine flows at switzerland ?", 
        into_lexical_segs, 
        [ w( the, [
            pos(dt), root(the),loc(1),lnks(3),txt("The"), 
            truecase('INIT_UPPER'),link(1,'NP',r('NP',seg(1,2))), 
            link(2,S,r(S,seg(1,6))), link(3,'CORENLP',r('CORENLP',seg(1,6))),flair, 
            upos(det),fner(o),fn('_')]), 
          w( rhine, [
            pos(nn), root(rhine),loc(2),lnks(3),txt("rhine"), 
            truecase('INIT_UPPER'),link(1,'NP',r('NP',seg(1,2))), 
            link(2,S,r(S,seg(1,6))), link(3,'CORENLP',r('CORENLP',seg(1,6))),flair, 
            upos(noun),fner(o),fn('_')]), 
          w( flows, [
            pos(vbz), root(flow),loc(3),lnks(3),txt("flows"), 
            truecase('LOWER'),link(1,'VP',r('VP',seg(3,5))), 
            link(2,S,r(S,seg(1,6))), link(3,'CORENLP',r('CORENLP',seg(1,6))),flair, 
            upos(verb),fner(o),fn('flow.01')]), 
          w( at, [
            pos(in), root(at),loc(4),lnks(4),txt("at"), 
            truecase('LOWER'),link(1,'PP',r('PP',seg(4,5))), 
            link(2,VP,r(VP,seg(3,5))), 
            link(3,S,r(S,seg(1,6))), link(4,'CORENLP',r('CORENLP',seg(1,6))),flair, 
            upos(adp),fner(o),fn('_')]), 
          w( switzerland, [
            pos(nnp), root(switzerland),loc(5),lnks(5), 
            txt("switzerland"),ner('COUNTRY'), 
            truecase('INIT_UPPER'),entitylink('Switzerland'), 
            corefed,#(2),txt(["switzerland"]), 
            type('PROPER'),numb('SINGULAR'),gender('NEUTRAL'), 
            animacy('INANIMATE'),repm(@(true)), 
            link(1,NP,r(NP,seg(5,5))), 
            link(2,PP,r(PP,seg(4,5))), 
            link(3,VP,r(VP,seg(3,5))), 
            link(4,S,r(S,seg(1,6))), link(5,'CORENLP',r('CORENLP',seg(1,6))),flair, 
            upos(noun),fner('s-loc'),fn('_')]), 
          w( ?, [
            pos('.'), root(?),loc(6),lnks(2),txt("?"), 
            link(1,S,r(S,seg(1,6))), link(2,'CORENLP',r('CORENLP',seg(1,6))),spacy, 
            spos('.'),loc(5),dep_parent(punct,n(border,3)), 
            node(n(?,5)),flair,upos(punct),fner(o), 
            fn('_')])]).
tmp : test80_result( "The rhine flows at switzerland ?", 
        sentence80, 
        q( s( np(3+sg,nameOf(rhine,[]),[]), 
              verb(main+tv,flow,active,pres+fin,[],posP(PosP)), 
              [], 
              [ prep_phrase(prep(at),np(3+sg,nameOf(switzerland,[]),[]))]))).
tmp : test80_result( "The rhine flows at switzerland ?", 
        i_sentence, 
        question80( [], 
          pred( 
             quantV( identityQ(IdentityQ), 
               thing&River&river-D, '`'(named(D,rhine)),'`'(true), 
               [], 
               thing&River&river-D), 
             identityQ(IdentityQ18), 
             path_pred_linkage(direct(river_flows),river,D,C,B), 
             [ quantV( identityQ(IdentityQ19), 
                 thing&geo&country-C, '`'(named(C,switzerland)),'`'(true), 
                 [], 
                 thing&geo&country-C), 
               quantV(voidQ(VoidQ),thing&Thing-B,`(true),`(true),[],_7774-B)]))).
tmp : test80_result( "The rhine flows at switzerland ?", 
        qplan, 
        answer80([]) :-  
          ^( Linkage, 
            ( named(Switzerland,switzerland)  ,
              named(River_Rhine,rhine) , 
              path_pred_linkage(direct(river_flows),river,River_Rhine,Switzerland,Linkage)))).
tmp : test80_result( "The rhine flows at west germany ?", 
        into_lexical_segs, 
        [ w( the, [
            pos(dt), root(the),loc(1),lnks(3),txt("The"), 
            truecase('INIT_UPPER'),link(1,'NP',r('NP',seg(1,2))), 
            link(2,S,r(S,seg(1,7))), link(3,'CORENLP',r('CORENLP',seg(1,7))),flair, 
            upos(det),fner(o),fn('_')]), 
          w( rhine, [
            pos(nn), root(rhine),loc(2),lnks(3),txt("rhine"), 
            truecase('INIT_UPPER'),link(1,'NP',r('NP',seg(1,2))), 
            link(2,S,r(S,seg(1,7))), link(3,'CORENLP',r('CORENLP',seg(1,7))),flair, 
            upos(noun),fner('s-loc'),fn('_')]), 
          w( flows, [
            pos(vbz), root(flow),loc(3),lnks(3),txt("flows"), 
            truecase('LOWER'),link(1,'VP',r('VP',seg(3,6))), 
            link(2,S,r(S,seg(1,7))), link(3,'CORENLP',r('CORENLP',seg(1,7))),allen_srl, 
            srl( flows, [
              o(ARG1,[The,rhine]), 
              o(V,[flows]), 
              o(ARGM-LOC,[at,west,germany])]), flair,upos(verb),fner(o),fn('flow.01')]), 
          w( at, [
            pos(in), root(at),loc(4),lnks(4),txt("at"), 
            truecase('LOWER'),link(1,'PP',r('PP',seg(4,6))), 
            link(2,VP,r(VP,seg(3,6))), 
            link(3,S,r(S,seg(1,7))), link(4,'CORENLP',r('CORENLP',seg(1,7))),flair, 
            upos(adp),fner(o),fn('_')]), 
          w( west, [
            pos(nn), root(west),loc(5),lnks(5),txt("west"), 
            truecase('INIT_UPPER'),link(1,'NP',r('NP',seg(5,6))), 
            link(2,PP,r(PP,seg(4,6))), 
            link(3,VP,r(VP,seg(3,6))), 
            link(4,S,r(S,seg(1,7))), link(5,'CORENLP',r('CORENLP',seg(1,7))),flair, 
            upos(noun),fner(o),fn('_')]), 
          w( germany, [
            root(germany), loc(6),lnks(5),txt("germany"), 
            ner('COUNTRY'),truecase('INIT_UPPER'), 
            entitylink('Germany'),link(1,'NP',r('NP',seg(5,6))), 
            link(2,PP,r(PP,seg(4,6))), 
            link(3,VP,r(VP,seg(3,6))), 
            link(4,S,r(S,seg(1,7))), link(5,'CORENLP',r('CORENLP',seg(1,7))),old_pos(nn), 
            pos(nnp),flair,upos(propn),fner('s-loc'), 
            fn('_')]), 
          w( ?, [
            pos('.'), root(?),loc(7),lnks(2),txt("?"), 
            link(1,S,r(S,seg(1,7))), link(2,'CORENLP',r('CORENLP',seg(1,7))),flair, 
            upos(punct),fner(o),fn('_')])]).
tmp : test80_result( "The rhine flows at west germany ?", 
        sentence80, 
        q( s( np(3+sg,nameOf(rhine,[]),[]), 
              verb(main+tv,flow,active,pres+fin,[],posP(PosP)), 
              [], 
              [ prep_phrase(prep(at),np(3+sg,nameOf(west_germany,[]),[]))]))).
tmp : test80_result( "The rhine flows at west germany ?", 
        i_sentence, 
        question80( [], 
          pred( 
             quantV( identityQ(IdentityQ), 
               thing&River&river-D, '`'(named(D,rhine)),'`'(true), 
               [], 
               thing&River&river-D), 
             identityQ(IdentityQ18), 
             path_pred_linkage(direct(river_flows),river,D,C,B), 
             [ quantV( identityQ(IdentityQ19), 
                 thing&geo&country-C, '`'(named(C,west_germany)),'`'(true), 
                 [], 
                 thing&geo&country-C), 
               quantV(voidQ(VoidQ),thing&Thing-B,`(true),`(true),[],_219424-B)]))).
tmp : test80_result( "The rhine flows at west germany ?", 
        qplan, 
        answer80([]) :-  
          ^( Linkage, 
            ( named(West_germany,west_germany)  ,
              named(River_Rhine,rhine) , 
              path_pred_linkage(direct(river_flows),river,River_Rhine,West_germany,Linkage)))).
tmp : test80_result( "The rhine flows from switzerland ?", 
        into_lexical_segs, 
        [ w( the, [
            pos(dt), root(the),loc(1),lnks(3),txt("The"), 
            truecase('INIT_UPPER'),link(1,'NP',r('NP',seg(1,2))), 
            link(2,S,r(S,seg(1,6))), link(3,'CORENLP',r('CORENLP',seg(1,6))),flair, 
            upos(det),fner(o),fn('_')]), 
          w( rhine, [
            pos(nn), root(rhine),loc(2),lnks(3),txt("rhine"), 
            truecase('INIT_UPPER'),link(1,'NP',r('NP',seg(1,2))), 
            link(2,S,r(S,seg(1,6))), link(3,'CORENLP',r('CORENLP',seg(1,6))),flair, 
            upos(noun),fner(o),fn('_')]), 
          w( flows, [
            pos(vbz), root(flow),loc(3),lnks(3),txt("flows"), 
            truecase('LOWER'),link(1,'VP',r('VP',seg(3,5))), 
            link(2,S,r(S,seg(1,6))), link(3,'CORENLP',r('CORENLP',seg(1,6))),allen_srl, 
            srl( flows, [
              o(ARG1,[The,rhine]), 
              o(V,[flows]), 
              o(ARGM-DIR,[from,switzerland])]), flair,upos(verb),fner(o),fn('flow.01')]), 
          w( from, [
            pos(in), root(from),loc(4),lnks(4),txt("from"), 
            truecase('LOWER'),link(1,'PP',r('PP',seg(4,5))), 
            link(2,VP,r(VP,seg(3,5))), 
            link(3,S,r(S,seg(1,6))), link(4,'CORENLP',r('CORENLP',seg(1,6))),flair, 
            upos(adp),fner(o),fn('_')]), 
          w( switzerland, [
            pos(nnp), root(switzerland),loc(5),lnks(5), 
            txt("switzerland"),ner('COUNTRY'), 
            truecase('INIT_UPPER'),entitylink('Switzerland'), 
            corefed,#(1),txt(["switzerland"]), 
            type('PROPER'),numb('SINGULAR'),gender('NEUTRAL'), 
            animacy('INANIMATE'),repm(@(true)), 
            link(1,NP,r(NP,seg(5,5))), 
            link(2,PP,r(PP,seg(4,5))), 
            link(3,VP,r(VP,seg(3,5))), 
            link(4,S,r(S,seg(1,6))), link(5,'CORENLP',r('CORENLP',seg(1,6))),flair, 
            upos(propn),fner('s-loc'),fn('_')]), 
          w( ?, [
            pos('.'), root(?),loc(6),lnks(2),txt("?"), 
            link(1,S,r(S,seg(1,6))), link(2,'CORENLP',r('CORENLP',seg(1,6))),spacy, 
            spos('.'),loc(5),dep_parent(punct,n(border,3)), 
            node(n(?,5)),flair,upos(punct),fner(o), 
            fn('_')])]).
tmp : test80_result( "The rhine flows from switzerland ?", 
        sentence80, 
        q( s( np(3+sg,nameOf(rhine,[]),[]), 
              verb(main+tv,flow,active,pres+fin,[],posP(PosP)), 
              [], 
              [ prep_phrase(prep(from),np(3+sg,nameOf(switzerland,[]),[]))]))).
tmp : test80_result( "The rhine flows from switzerland ?", 
        i_sentence, 
        question80( [], 
          pred( 
             quantV( identityQ(IdentityQ), 
               thing&River&river-D, '`'(named(D,rhine)),'`'(true), 
               [], 
               thing&River&river-D), 
             identityQ(IdentityQ18), 
             path_pred_linkage(direct(river_flows),river,D,C,B), 
             [ quantV( identityQ(IdentityQ19), 
                 thing&geo&country-C, '`'(named(C,switzerland)),'`'(true), 
                 [], 
                 thing&geo&country-C), 
               quantV(voidQ(VoidQ),thing&Thing-B,`(true),`(true),[],_170888-B)]))).
tmp : test80_result( "The rhine flows from switzerland ?", 
        qplan, 
        answer80([]) :-  
          ^( Linkage, 
            ( named(Switzerland,switzerland)  ,
              named(River_Rhine,rhine) , 
              path_pred_linkage(direct(river_flows),river,River_Rhine,Switzerland,Linkage)))).
tmp : test80_result( "The rhine flows from west germany ?", 
        into_lexical_segs, 
        [ w( the, [
            pos(dt), root(the),loc(1),lnks(3),txt("The"), 
            truecase('INIT_UPPER'),link(1,'NP',r('NP',seg(1,2))), 
            link(2,S,r(S,seg(1,7))), link(3,'CORENLP',r('CORENLP',seg(1,7))),flair, 
            upos(det),fner(o),fn('_')]), 
          w( rhine, [
            pos(nn), root(rhine),loc(2),lnks(3),txt("rhine"), 
            truecase('INIT_UPPER'),link(1,'NP',r('NP',seg(1,2))), 
            link(2,S,r(S,seg(1,7))), link(3,'CORENLP',r('CORENLP',seg(1,7))),flair, 
            upos(noun),fner('s-loc'),fn('_')]), 
          w( flows, [
            pos(vbz), root(flow),loc(3),lnks(3),txt("flows"), 
            truecase('LOWER'),link(1,'VP',r('VP',seg(3,6))), 
            link(2,S,r(S,seg(1,7))), link(3,'CORENLP',r('CORENLP',seg(1,7))),allen_srl, 
            srl( flows, [
              o(ARG1,[The,rhine]), 
              o(V,[flows]), 
              o(ARGM-DIR,[from,west,germany])]), flair,upos(verb),fner(o),fn('flow.01')]), 
          w( from, [
            pos(in), root(from),loc(4),lnks(4),txt("from"), 
            truecase('LOWER'),link(1,'PP',r('PP',seg(4,6))), 
            link(2,VP,r(VP,seg(3,6))), 
            link(3,S,r(S,seg(1,7))), link(4,'CORENLP',r('CORENLP',seg(1,7))),flair, 
            upos(adp),fner(o),fn('_')]), 
          w( west, [
            pos(nn), root(west),loc(5),lnks(5),txt("west"), 
            truecase('INIT_UPPER'),link(1,'NP',r('NP',seg(5,6))), 
            link(2,PP,r(PP,seg(4,6))), 
            link(3,VP,r(VP,seg(3,6))), 
            link(4,S,r(S,seg(1,7))), link(5,'CORENLP',r('CORENLP',seg(1,7))),flair, 
            upos(noun),fner(o),fn('_')]), 
          w( germany, [
            root(germany), loc(6),lnks(5),txt("germany"), 
            ner('COUNTRY'),truecase('INIT_UPPER'), 
            entitylink('Germany'),link(1,'NP',r('NP',seg(5,6))), 
            link(2,PP,r(PP,seg(4,6))), 
            link(3,VP,r(VP,seg(3,6))), 
            link(4,S,r(S,seg(1,7))), link(5,'CORENLP',r('CORENLP',seg(1,7))),old_pos(nn), 
            pos(nnp),flair,upos(propn),fner('s-loc'), 
            fn('_')]), 
          w( ?, [
            pos('.'), root(?),loc(7),lnks(2),txt("?"), 
            link(1,S,r(S,seg(1,7))), link(2,'CORENLP',r('CORENLP',seg(1,7))),flair, 
            upos(punct),fner(o),fn('_')])]).
tmp : test80_result( "The rhine flows from west germany ?", 
        sentence80, 
        q( s( np(3+sg,nameOf(rhine,[]),[]), 
              verb(main+tv,flow,active,pres+fin,[],posP(PosP)), 
              [], 
              [ prep_phrase(prep(from),np(3+sg,nameOf(west_germany,[]),[]))]))).
tmp : test80_result( "The rhine flows from west germany ?", 
        i_sentence, 
        question80( [], 
          pred( 
             quantV( identityQ(IdentityQ), 
               thing&River&river-D, '`'(named(D,rhine)),'`'(true), 
               [], 
               thing&River&river-D), 
             identityQ(IdentityQ18), 
             path_pred_linkage(direct(river_flows),river,D,C,B), 
             [ quantV( identityQ(IdentityQ19), 
                 thing&geo&country-C, '`'(named(C,west_germany)),'`'(true), 
                 [], 
                 thing&geo&country-C), 
               quantV(voidQ(VoidQ),thing&Thing-B,`(true),`(true),[],_129836-B)]))).
tmp : test80_result( "The rhine flows from west germany ?", 
        qplan, 
        answer80([]) :-  
          ^( Linkage, 
            ( named(West_germany,west_germany)  ,
              named(River_Rhine,rhine) , 
              path_pred_linkage(direct(river_flows),river,River_Rhine,West_germany,Linkage)))).
tmp : test80_result( "The rhine flows in switzerland ?", 
        into_lexical_segs, 
        [ w( the, [
            pos(dt), root(the),loc(1),lnks(3),txt("The"), 
            truecase('INIT_UPPER'),link(1,'NP',r('NP',seg(1,2))), 
            link(2,S,r(S,seg(1,6))), link(3,'CORENLP',r('CORENLP',seg(1,6))),flair, 
            upos(det),fner(o),fn('_')]), 
          w( rhine, [
            pos(nn), root(rhine),loc(2),lnks(3),txt("rhine"), 
            truecase('INIT_UPPER'),link(1,'NP',r('NP',seg(1,2))), 
            link(2,S,r(S,seg(1,6))), link(3,'CORENLP',r('CORENLP',seg(1,6))),flair, 
            upos(noun),fner(o),fn('_')]), 
          w( flows, [
            pos(vbz), root(flow),loc(3),lnks(3),txt("flows"), 
            truecase('LOWER'),link(1,'VP',r('VP',seg(3,5))), 
            link(2,S,r(S,seg(1,6))), link(3,'CORENLP',r('CORENLP',seg(1,6))),allen_srl, 
            srl( flows, [
              o(ARG1,[The,rhine]), 
              o(V,[flows]), 
              o(ARGM-LOC,[in,switzerland])]), flair,upos(verb),fner(o),fn('flow.01')]), 
          w( in, [
            pos(in), root(in),loc(4),lnks(4),txt("in"), 
            truecase('LOWER'),link(1,'PP',r('PP',seg(4,5))), 
            link(2,VP,r(VP,seg(3,5))), 
            link(3,S,r(S,seg(1,6))), link(4,'CORENLP',r('CORENLP',seg(1,6))),flair, 
            upos(adp),fner(o),fn('_')]), 
          w( switzerland, [
            pos(nnp), root(switzerland),loc(5),lnks(5), 
            txt("switzerland"),ner('COUNTRY'), 
            truecase('INIT_UPPER'),entitylink('Switzerland'), 
            corefed,#(2),txt(["switzerland"]), 
            type('PROPER'),numb('SINGULAR'),gender('NEUTRAL'), 
            animacy('INANIMATE'),repm(@(true)), 
            link(1,NP,r(NP,seg(5,5))), 
            link(2,PP,r(PP,seg(4,5))), 
            link(3,VP,r(VP,seg(3,5))), 
            link(4,S,r(S,seg(1,6))), link(5,'CORENLP',r('CORENLP',seg(1,6))),flair, 
            upos(propn),fner('s-loc'),fn('_')]), 
          w( ?, [
            pos('.'), root(?),loc(6),lnks(2),txt("?"), 
            link(1,S,r(S,seg(1,6))), link(2,'CORENLP',r('CORENLP',seg(1,6))),spacy, 
            spos('.'),loc(5),dep_parent(punct,n(bordering,3)), 
            node(n(?,5)),flair,upos(punct),fner(o), 
            fn('_')])]).
tmp : test80_result( "The rhine flows in switzerland ?", 
        sentence80, 
        q( s( np(3+sg,nameOf(rhine,[]),[]), 
              verb(main+tv,flow,active,pres+fin,[],posP(PosP)), 
              [], 
              [ prep_phrase(prep(in),np(3+sg,nameOf(switzerland,[]),[]))]))).
tmp : test80_result( "The rhine flows in switzerland ?", 
        i_sentence, 
        question80( [], 
          pred( 
             quantV( identityQ(IdentityQ), 
               thing&River&river-D, '`'(named(D,rhine)),'`'(true), 
               [], 
               thing&River&river-D), 
             identityQ(IdentityQ18), 
             path_pred_linkage(direct(river_flows),river,D,C,B), 
             [ quantV( identityQ(IdentityQ19), 
                 thing&geo&country-C, '`'(named(C,switzerland)),'`'(true), 
                 [], 
                 thing&geo&country-C), 
               quantV(voidQ(VoidQ),thing&Thing-B,`(true),`(true),[],_81706-B)]))).
tmp : test80_result( "The rhine flows in switzerland ?", 
        qplan, 
        answer80([]) :-  
          ^( Linkage, 
            ( named(Switzerland,switzerland)  ,
              named(River_Rhine,rhine) , 
              path_pred_linkage(direct(river_flows),river,River_Rhine,Switzerland,Linkage)))).
tmp : test80_result( "The rhine flows in west germany ?", 
        into_lexical_segs, 
        [ w( the, [
            pos(dt), root(the),loc(1),lnks(3),txt("The"), 
            truecase('INIT_UPPER'),link(1,'NP',r('NP',seg(1,2))), 
            link(2,S,r(S,seg(1,7))), link(3,'CORENLP',r('CORENLP',seg(1,7))),flair, 
            upos(det),fner(o),fn('_')]), 
          w( rhine, [
            pos(nn), root(rhine),loc(2),lnks(3),txt("rhine"), 
            truecase('INIT_UPPER'),link(1,'NP',r('NP',seg(1,2))), 
            link(2,S,r(S,seg(1,7))), link(3,'CORENLP',r('CORENLP',seg(1,7))),flair, 
            upos(noun),fner('s-loc'),fn('_')]), 
          w( flows, [
            pos(vbz), root(flow),loc(3),lnks(3),txt("flows"), 
            truecase('LOWER'),link(1,'VP',r('VP',seg(3,6))), 
            link(2,S,r(S,seg(1,7))), link(3,'CORENLP',r('CORENLP',seg(1,7))),allen_srl, 
            srl( flows, [
              o(ARG1,[The,rhine]), 
              o(V,[flows]), 
              o(ARGM-LOC,[in,west,germany])]), flair,upos(verb),fner(o),fn('flow.01')]), 
          w( in, [
            pos(in), root(in),loc(4),lnks(4),txt("in"), 
            truecase('LOWER'),link(1,'PP',r('PP',seg(4,6))), 
            link(2,VP,r(VP,seg(3,6))), 
            link(3,S,r(S,seg(1,7))), link(4,'CORENLP',r('CORENLP',seg(1,7))),flair, 
            upos(adp),fner(o),fn('_')]), 
          w( west, [
            pos(nn), root(west),loc(5),lnks(5),txt("west"), 
            truecase('INIT_UPPER'),link(1,'NP',r('NP',seg(5,6))), 
            link(2,PP,r(PP,seg(4,6))), 
            link(3,VP,r(VP,seg(3,6))), 
            link(4,S,r(S,seg(1,7))), link(5,'CORENLP',r('CORENLP',seg(1,7))),flair, 
            upos(noun),fner(o),fn('_')]), 
          w( germany, [
            root(germany), loc(6),lnks(5),txt("germany"), 
            ner('COUNTRY'),truecase('INIT_UPPER'), 
            entitylink('Germany'),link(1,'NP',r('NP',seg(5,6))), 
            link(2,PP,r(PP,seg(4,6))), 
            link(3,VP,r(VP,seg(3,6))), 
            link(4,S,r(S,seg(1,7))), link(5,'CORENLP',r('CORENLP',seg(1,7))),old_pos(nn), 
            pos(nnp),flair,upos(propn),fner('s-loc'), 
            fn('_')]), 
          w( ?, [
            pos('.'), root(?),loc(7),lnks(2),txt("?"), 
            link(1,S,r(S,seg(1,7))), link(2,'CORENLP',r('CORENLP',seg(1,7))),flair, 
            upos(punct),fner(o),fn('_')])]).
tmp : test80_result( "The rhine flows in west germany ?", 
        sentence80, 
        q( s( np(3+sg,nameOf(rhine,[]),[]), 
              verb(main+tv,flow,active,pres+fin,[],posP(PosP)), 
              [], 
              [ prep_phrase(prep(in),np(3+sg,nameOf(west_germany,[]),[]))]))).
tmp : test80_result( "The rhine flows in west germany ?", 
        i_sentence, 
        question80( [], 
          pred( 
             quantV( identityQ(IdentityQ), 
               thing&River&river-D, '`'(named(D,rhine)),'`'(true), 
               [], 
               thing&River&river-D), 
             identityQ(IdentityQ18), 
             path_pred_linkage(direct(river_flows),river,D,C,B), 
             [ quantV( identityQ(IdentityQ19), 
                 thing&geo&country-C, '`'(named(C,west_germany)),'`'(true), 
                 [], 
                 thing&geo&country-C), 
               quantV(voidQ(VoidQ),thing&Thing-B,`(true),`(true),[],_38092-B)]))).
tmp : test80_result( "The rhine flows in west germany ?", 
        qplan, 
        answer80([]) :-  
          ^( Linkage, 
            ( named(West_germany,west_germany)  ,
              named(River_Rhine,rhine) , 
              path_pred_linkage(direct(river_flows),river,River_Rhine,West_germany,Linkage)))).
tmp : test80_result( "The rhine flows into switzerland ?", 
        into_lexical_segs, 
        [ w( the, [
            pos(dt), root(the),loc(1),lnks(3),txt("The"), 
            truecase('INIT_UPPER'),link(1,'NP',r('NP',seg(1,2))), 
            link(2,S,r(S,seg(1,6))), link(3,'CORENLP',r('CORENLP',seg(1,6))),flair, 
            upos(det),fner(o),fn('_')]), 
          w( rhine, [
            pos(nn), root(rhine),loc(2),lnks(3),txt("rhine"), 
            truecase('INIT_UPPER'),link(1,'NP',r('NP',seg(1,2))), 
            link(2,S,r(S,seg(1,6))), link(3,'CORENLP',r('CORENLP',seg(1,6))),flair, 
            upos(noun),fner(o),fn('_')]), 
          w( flows, [
            pos(vbz), root(flow),loc(3),lnks(3),txt("flows"), 
            truecase('LOWER'),link(1,'VP',r('VP',seg(3,5))), 
            link(2,S,r(S,seg(1,6))), link(3,'CORENLP',r('CORENLP',seg(1,6))),allen_srl, 
            srl( flows, [
              o(ARG1,[The,rhine]), 
              o(V,[flows]), 
              o(ARGM-DIR,[into,switzerland])]), flair,upos(verb),fner(o),fn('flow.01')]), 
          w( into, [
            pos(in), root(into),loc(4),lnks(4),txt("into"), 
            truecase('LOWER'),link(1,'PP',r('PP',seg(4,5))), 
            link(2,VP,r(VP,seg(3,5))), 
            link(3,S,r(S,seg(1,6))), link(4,'CORENLP',r('CORENLP',seg(1,6))),flair, 
            upos(adp),fner(o),fn('_')]), 
          w( switzerland, [
            pos(nnp), root(switzerland),loc(5),lnks(5), 
            txt("switzerland"),ner('COUNTRY'), 
            truecase('INIT_UPPER'),entitylink('Switzerland'), 
            corefed,#(2),txt(["switzerland"]), 
            type('PROPER'),numb('SINGULAR'),gender('NEUTRAL'), 
            animacy('INANIMATE'),repm(@(true)), 
            link(1,NP,r(NP,seg(5,5))), 
            link(2,PP,r(PP,seg(4,5))), 
            link(3,VP,r(VP,seg(3,5))), 
            link(4,S,r(S,seg(1,6))), link(5,'CORENLP',r('CORENLP',seg(1,6))),flair, 
            upos(propn),fner('s-loc'),fn('_')]), 
          w( ?, [
            pos('.'), root(?),loc(6),lnks(2),txt("?"), 
            link(1,S,r(S,seg(1,6))), link(2,'CORENLP',r('CORENLP',seg(1,6))),spacy, 
            spos('.'),loc(5),dep_parent(punct,n(bordering,3)), 
            node(n(?,5)),flair,upos(punct),fner(o), 
            fn('_')])]).
tmp : test80_result( "The rhine flows into switzerland ?", 
        sentence80, 
        q( s( np(3+sg,nameOf(rhine,[]),[]), 
              verb(main+tv,flow,active,pres+fin,[],posP(PosP)), 
              [], 
              [ prep_phrase(prep(into),np(3+sg,nameOf(switzerland,[]),[]))]))).
tmp : test80_result( "The rhine flows into switzerland ?", 
        i_sentence, 
        question80( [], 
          pred( 
             quantV( identityQ(IdentityQ), 
               thing&River&river-D, '`'(named(D,rhine)),'`'(true), 
               [], 
               thing&River&river-D), 
             identityQ(IdentityQ18), 
             path_pred_linkage(direct(river_flows),river,D,B,C), 
             [ quantV( identityQ(IdentityQ19), 
                 thing&geo&country-C, '`'(named(C,switzerland)),'`'(true), 
                 [], 
                 thing&geo&country-C), 
               quantV(voidQ(VoidQ),thing&Thing-B,`(true),`(true),[],_246518-B)]))).
tmp : test80_result( "The rhine flows into switzerland ?", 
        qplan, 
        answer80([]) :-  
          ^( Path_pred_linkageDirect, 
            ( named(Linkage_Switzerland,switzerland)  ,
              named(River_Rhine,rhine) , 
              path_pred_linkage( direct(river_flows), 
                river, River_Rhine,Path_pred_linkageDirect, 
                Linkage_Switzerland)))).
tmp : test80_result( "The rhine flows into west germany ?", 
        into_lexical_segs, 
        [ w( the, [
            pos(dt), root(the),loc(1),lnks(3),txt("The"), 
            truecase('INIT_UPPER'),link(1,'NP',r('NP',seg(1,2))), 
            link(2,S,r(S,seg(1,7))), link(3,'CORENLP',r('CORENLP',seg(1,7))),flair, 
            upos(det),fner(o),fn('_')]), 
          w( rhine, [
            pos(nn), root(rhine),loc(2),lnks(3),txt("rhine"), 
            truecase('INIT_UPPER'),link(1,'NP',r('NP',seg(1,2))), 
            link(2,S,r(S,seg(1,7))), link(3,'CORENLP',r('CORENLP',seg(1,7))),flair, 
            upos(noun),fner('s-loc'),fn('_')]), 
          w( flows, [
            pos(vbz), root(flow),loc(3),lnks(3),txt("flows"), 
            truecase('LOWER'),link(1,'VP',r('VP',seg(3,6))), 
            link(2,S,r(S,seg(1,7))), link(3,'CORENLP',r('CORENLP',seg(1,7))),allen_srl, 
            srl( flows, [
              o(ARG1,[The,rhine]), 
              o(V,[flows]), 
              o(ARGM-DIR,[into,west,germany])]), flair,upos(verb),fner(o),fn('flow.01')]), 
          w( into, [
            pos(in), root(into),loc(4),lnks(4),txt("into"), 
            truecase('LOWER'),link(1,'PP',r('PP',seg(4,6))), 
            link(2,VP,r(VP,seg(3,6))), 
            link(3,S,r(S,seg(1,7))), link(4,'CORENLP',r('CORENLP',seg(1,7))),flair, 
            upos(adp),fner(o),fn('_')]), 
          w( west, [
            pos(nn), root(west),loc(5),lnks(5),txt("west"), 
            ner('LOCATION'),truecase('INIT_UPPER'), 
            entitylink(west),link(1,'NP',r('NP',seg(5,6))), 
            link(2,PP,r(PP,seg(4,6))), 
            link(3,VP,r(VP,seg(3,6))), 
            link(4,S,r(S,seg(1,7))), link(5,'CORENLP',r('CORENLP',seg(1,7))),flair, 
            upos(noun),fner(o),fn('_')]), 
          w( germany, [
            root(germany), loc(6),lnks(5),txt("germany"), 
            ner('COUNTRY'),truecase('INIT_UPPER'), 
            entitylink('Germany'),link(1,'NP',r('NP',seg(5,6))), 
            link(2,PP,r(PP,seg(4,6))), 
            link(3,VP,r(VP,seg(3,6))), 
            link(4,S,r(S,seg(1,7))), link(5,'CORENLP',r('CORENLP',seg(1,7))),old_pos(nn), 
            pos(nnp),flair,upos(propn),fner('s-loc'), 
            fn('_')]), 
          w( ?, [
            pos('.'), root(?),loc(7),lnks(2),txt("?"), 
            link(1,S,r(S,seg(1,7))), link(2,'CORENLP',r('CORENLP',seg(1,7))),flair, 
            upos(punct),fner(o),fn('_')])]).
tmp : test80_result( "The rhine flows into west germany ?", 
        sentence80, 
        q( s( np(3+sg,nameOf(rhine,[]),[]), 
              verb(main+tv,flow,active,pres+fin,[],posP(PosP)), 
              [], 
              [ prep_phrase(prep(into),np(3+sg,nameOf(west_germany,[]),[]))]))).
tmp : test80_result( "The rhine flows into west germany ?", 
        i_sentence, 
        question80( [], 
          pred( 
             quantV( identityQ(IdentityQ), 
               thing&River&river-D, '`'(named(D,rhine)),'`'(true), 
               [], 
               thing&River&river-D), 
             identityQ(IdentityQ18), 
             path_pred_linkage(direct(river_flows),river,D,B,C), 
             [ quantV( identityQ(IdentityQ19), 
                 thing&geo&country-C, '`'(named(C,west_germany)),'`'(true), 
                 [], 
                 thing&geo&country-C), 
               quantV(voidQ(VoidQ),thing&Thing-B,`(true),`(true),[],_215618-B)]))).
tmp : test80_result( "The rhine flows into west germany ?", 
        qplan, 
        answer80([]) :-  
          ^( Path_pred_linkageDirect, 
            ( named(Linkage_West_germany,west_germany)  ,
              named(River_Rhine,rhine) , 
              path_pred_linkage( direct(river_flows), 
                river, River_Rhine,Path_pred_linkageDirect, 
                Linkage_West_germany)))).
tmp : test80_result( "The rhine flows through switzerland ?", 
        into_lexical_segs, 
        [ w( the, [
            pos(dt), root(the),loc(1),lnks(3),txt("The"), 
            truecase('INIT_UPPER'),link(1,'NP',r('NP',seg(1,2))), 
            link(2,S,r(S,seg(1,6))), link(3,'CORENLP',r('CORENLP',seg(1,6))),flair, 
            upos(det),fner(o),fn('_')]), 
          w( rhine, [
            pos(nn), root(rhine),loc(2),lnks(3),txt("rhine"), 
            truecase('INIT_UPPER'),link(1,'NP',r('NP',seg(1,2))), 
            link(2,S,r(S,seg(1,6))), link(3,'CORENLP',r('CORENLP',seg(1,6))),flair, 
            upos(noun),fner(o),fn('_')]), 
          w( flows, [
            pos(vbz), root(flow),loc(3),lnks(3),txt("flows"), 
            truecase('LOWER'),link(1,'VP',r('VP',seg(3,5))), 
            link(2,S,r(S,seg(1,6))), link(3,'CORENLP',r('CORENLP',seg(1,6))),allen_srl, 
            srl( flows, [
              o(ARG1,[The,rhine]), 
              o(V,[flows]), 
              o(ARGM-DIR,[through,switzerland])]), flair,upos(verb),fner(o),fn('flow.01')]), 
          w( through, [
            pos(in), root(through),loc(4),lnks(4), 
            txt("through"),truecase('LOWER'), 
            link(1,PP,r(PP,seg(4,5))), 
            link(2,VP,r(VP,seg(3,5))), 
            link(3,S,r(S,seg(1,6))), link(4,'CORENLP',r('CORENLP',seg(1,6))),flair, 
            upos(adp),fner(o),fn('_')]), 
          w( switzerland, [
            pos(nnp), root(switzerland),loc(5),lnks(5), 
            txt("switzerland"),ner('COUNTRY'), 
            truecase('INIT_UPPER'),entitylink('Switzerland'), 
            corefed,#(2),txt(["switzerland"]), 
            type('PROPER'),numb('SINGULAR'),gender('NEUTRAL'), 
            animacy('INANIMATE'),repm(@(true)), 
            link(1,NP,r(NP,seg(5,5))), 
            link(2,PP,r(PP,seg(4,5))), 
            link(3,VP,r(VP,seg(3,5))), 
            link(4,S,r(S,seg(1,6))), link(5,'CORENLP',r('CORENLP',seg(1,6))),flair, 
            upos(propn),fner('s-loc'),fn('_')]), 
          w( ?, [
            pos('.'), root(?),loc(6),lnks(2),txt("?"), 
            link(1,S,r(S,seg(1,6))), link(2,'CORENLP',r('CORENLP',seg(1,6))),spacy, 
            spos('.'),loc(5),dep_parent(punct,n(border,3)), 
            node(n(?,5)),flair,upos(punct),fner(o), 
            fn('_')])]).
tmp : test80_result( "The rhine flows through switzerland ?", 
        sentence80, 
        q( s( np(3+sg,nameOf(rhine,[]),[]), 
              verb(main+tv,flow,active,pres+fin,[],posP(PosP)), 
              [], 
              [ prep_phrase(prep(through),np(3+sg,nameOf(switzerland,[]),[]))]))).
tmp : test80_result( "The rhine flows through switzerland ?", 
        i_sentence, 
        question80( [], 
          pred( 
             quantV( identityQ(IdentityQ), 
               thing&River&river-D, '`'(named(D,rhine)),'`'(true), 
               [], 
               thing&River&river-D), 
             identityQ(IdentityQ18), 
             path_pred_linkage(direct(river_flows),river,D,C,B), 
             [ quantV( identityQ(IdentityQ19), 
                 thing&geo&country-C, '`'(named(C,switzerland)),'`'(true), 
                 [], 
                 thing&geo&country-C), 
               quantV(voidQ(VoidQ),thing&Thing-B,`(true),`(true),[],_180856-B)]))).
tmp : test80_result( "The rhine flows through switzerland ?", 
        qplan, 
        answer80([]) :-  
          ^( Linkage, 
            ( named(Switzerland,switzerland)  ,
              named(River_Rhine,rhine) , 
              path_pred_linkage(direct(river_flows),river,River_Rhine,Switzerland,Linkage)))).
tmp : test80_result( "The rhine flows through west germany ?", 
        into_lexical_segs, 
        [ w( the, [
            pos(dt), root(the),loc(1),lnks(3),txt("The"), 
            truecase('INIT_UPPER'),link(1,'NP',r('NP',seg(1,2))), 
            link(2,S,r(S,seg(1,7))), link(3,'CORENLP',r('CORENLP',seg(1,7))),flair, 
            upos(det),fner(o),fn('_')]), 
          w( rhine, [
            pos(nn), root(rhine),loc(2),lnks(3),txt("rhine"), 
            truecase('INIT_UPPER'),link(1,'NP',r('NP',seg(1,2))), 
            link(2,S,r(S,seg(1,7))), link(3,'CORENLP',r('CORENLP',seg(1,7))),flair, 
            upos(noun),fner('s-loc'),fn('_')]), 
          w( flows, [
            pos(vbz), root(flow),loc(3),lnks(3),txt("flows"), 
            truecase('LOWER'),link(1,'VP',r('VP',seg(3,6))), 
            link(2,S,r(S,seg(1,7))), link(3,'CORENLP',r('CORENLP',seg(1,7))),allen_srl, 
            srl( flows, [
              o(ARG1,[The,rhine]), 
              o(V,[flows]), 
              o(ARGM-DIR,[through,west,germany])]), flair,upos(verb),fner(o),fn('flow.01')]), 
          w( through, [
            pos(in), root(through),loc(4),lnks(4), 
            txt("through"),truecase('LOWER'), 
            link(1,PP,r(PP,seg(4,6))), 
            link(2,VP,r(VP,seg(3,6))), 
            link(3,S,r(S,seg(1,7))), link(4,'CORENLP',r('CORENLP',seg(1,7))),flair, 
            upos(adp),fner(o),fn('_')]), 
          w( west, [
            pos(nn), root(west),loc(5),lnks(5),txt("west"), 
            truecase('INIT_UPPER'),link(1,'NP',r('NP',seg(5,6))), 
            link(2,PP,r(PP,seg(4,6))), 
            link(3,VP,r(VP,seg(3,6))), 
            link(4,S,r(S,seg(1,7))), link(5,'CORENLP',r('CORENLP',seg(1,7))),flair, 
            upos(noun),fner(o),fn('_')]), 
          w( germany, [
            root(germany), loc(6),lnks(5),txt("germany"), 
            ner('COUNTRY'),truecase('INIT_UPPER'), 
            entitylink('Germany'),link(1,'NP',r('NP',seg(5,6))), 
            link(2,PP,r(PP,seg(4,6))), 
            link(3,VP,r(VP,seg(3,6))), 
            link(4,S,r(S,seg(1,7))), link(5,'CORENLP',r('CORENLP',seg(1,7))),old_pos(nn), 
            pos(nnp),flair,upos(propn),fner('s-loc'), 
            fn('_')]), 
          w( ?, [
            pos('.'), root(?),loc(7),lnks(2),txt("?"), 
            link(1,S,r(S,seg(1,7))), link(2,'CORENLP',r('CORENLP',seg(1,7))),flair, 
            upos(punct),fner(o),fn('_')])]).
tmp : test80_result( "The rhine flows through west germany ?", 
        sentence80, 
        q( s( np(3+sg,nameOf(rhine,[]),[]), 
              verb(main+tv,flow,active,pres+fin,[],posP(PosP)), 
              [], 
              [ prep_phrase(prep(through),np(3+sg,nameOf(west_germany,[]),[]))]))).
tmp : test80_result( "The rhine flows through west germany ?", 
        i_sentence, 
        question80( [], 
          pred( 
             quantV( identityQ(IdentityQ), 
               thing&River&river-D, '`'(named(D,rhine)),'`'(true), 
               [], 
               thing&River&river-D), 
             identityQ(IdentityQ18), 
             path_pred_linkage(direct(river_flows),river,D,C,B), 
             [ quantV( identityQ(IdentityQ19), 
                 thing&geo&country-C, '`'(named(C,west_germany)),'`'(true), 
                 [], 
                 thing&geo&country-C), 
               quantV(voidQ(VoidQ),thing&Thing-B,`(true),`(true),[],_141202-B)]))).
tmp : test80_result( "The rhine flows through west germany ?", 
        qplan, 
        answer80([]) :-  
          ^( Linkage, 
            ( named(West_germany,west_germany)  ,
              named(River_Rhine,rhine) , 
              path_pred_linkage(direct(river_flows),river,River_Rhine,West_germany,Linkage)))).
tmp : test80_result( "The rhine flows to switzerland ?", 
        into_lexical_segs, 
        [ w( the, [
            pos(dt), root(the),loc(1),lnks(3),txt("The"), 
            truecase('INIT_UPPER'),link(1,'NP',r('NP',seg(1,2))), 
            link(2,S,r(S,seg(1,6))), link(3,'CORENLP',r('CORENLP',seg(1,6))),flair, 
            upos(det),fner(o),fn('_')]), 
          w( rhine, [
            pos(nn), root(rhine),loc(2),lnks(3),txt("rhine"), 
            truecase('INIT_UPPER'),link(1,'NP',r('NP',seg(1,2))), 
            link(2,S,r(S,seg(1,6))), link(3,'CORENLP',r('CORENLP',seg(1,6))),flair, 
            upos(noun),fner(o),fn('_')]), 
          w( flows, [
            pos(vbz), root(flow),loc(3),lnks(3),txt("flows"), 
            truecase('LOWER'),link(1,'VP',r('VP',seg(3,5))), 
            link(2,S,r(S,seg(1,6))), link(3,'CORENLP',r('CORENLP',seg(1,6))),allen_srl, 
            srl( flows, [
              o(ARG1,[The,rhine]), 
              o(V,[flows]), 
              o(ARGM-DIR,[to,switzerland])]), flair,upos(verb),fner(o),fn('flow.01')]), 
          w( to, [
            pos(in), root(to),loc(4),lnks(4),txt("to"), 
            truecase('LOWER'),link(1,'PP',r('PP',seg(4,5))), 
            link(2,VP,r(VP,seg(3,5))), 
            link(3,S,r(S,seg(1,6))), link(4,'CORENLP',r('CORENLP',seg(1,6))),flair, 
            upos(adp),fner(o),fn('_')]), 
          w( switzerland, [
            pos(nnp), root(switzerland),loc(5),lnks(5), 
            txt("switzerland"),ner('COUNTRY'), 
            truecase('INIT_UPPER'),entitylink('Switzerland'), 
            corefed,#(2),txt(["switzerland"]), 
            type('PROPER'),numb('SINGULAR'),gender('NEUTRAL'), 
            animacy('INANIMATE'),repm(@(true)), 
            link(1,NP,r(NP,seg(5,5))), 
            link(2,PP,r(PP,seg(4,5))), 
            link(3,VP,r(VP,seg(3,5))), 
            link(4,S,r(S,seg(1,6))), link(5,'CORENLP',r('CORENLP',seg(1,6))),flair, 
            upos(propn),fner('s-loc'),fn('_')]), 
          w( ?, [
            pos('.'), root(?),loc(6),lnks(2),txt("?"), 
            link(1,S,r(S,seg(1,6))), link(2,'CORENLP',r('CORENLP',seg(1,6))),spacy, 
            spos('.'),dep_parent(punct,n(is,1)),node(n(?,6)), 
            flair,upos(punct),fner(o),fn('_')])]).
tmp : test80_result( "The rhine flows to switzerland ?", 
        sentence80, 
        q( s( np(3+sg,nameOf(rhine,[]),[]), 
              verb(main+tv,flow,active,pres+fin,[],posP(PosP)), 
              [], 
              [ prep_phrase(prep(to),np(3+sg,nameOf(switzerland,[]),[]))]))).
tmp : test80_result( "The rhine flows to switzerland ?", 
        i_sentence, 
        question80( [], 
          pred( 
             quantV( identityQ(IdentityQ), 
               thing&River&river-D, '`'(named(D,rhine)),'`'(true), 
               [], 
               thing&River&river-D), 
             identityQ(IdentityQ18), 
             path_pred_linkage(direct(river_flows),river,D,B,C), 
             [ quantV( identityQ(IdentityQ19), 
                 thing&geo&country-C, '`'(named(C,switzerland)),'`'(true), 
                 [], 
                 thing&geo&country-C), 
               quantV(voidQ(VoidQ),thing&Thing-B,`(true),`(true),[],_93752-B)]))).
tmp : test80_result( "The rhine flows to switzerland ?", 
        qplan, 
        answer80([]) :-  
          ^( Path_pred_linkageDirect, 
            ( named(Linkage_Switzerland,switzerland)  ,
              named(River_Rhine,rhine) , 
              path_pred_linkage( direct(river_flows), 
                river, River_Rhine,Path_pred_linkageDirect, 
                Linkage_Switzerland)))).
tmp : test80_result( "The rhine flows to west germany ?", 
        into_lexical_segs, 
        [ w( the, [
            pos(dt), root(the),loc(1),lnks(3),txt("The"), 
            truecase('INIT_UPPER'),link(1,'NP',r('NP',seg(1,2))), 
            link(2,S,r(S,seg(1,7))), link(3,'CORENLP',r('CORENLP',seg(1,7))),flair, 
            upos(det),fner(o),fn('_')]), 
          w( rhine, [
            pos(nn), root(rhine),loc(2),lnks(3),txt("rhine"), 
            truecase('INIT_UPPER'),link(1,'NP',r('NP',seg(1,2))), 
            link(2,S,r(S,seg(1,7))), link(3,'CORENLP',r('CORENLP',seg(1,7))),flair, 
            upos(noun),fner('s-loc'),fn('_')]), 
          w( flows, [
            pos(vbz), root(flow),loc(3),lnks(3),txt("flows"), 
            truecase('LOWER'),link(1,'VP',r('VP',seg(3,6))), 
            link(2,S,r(S,seg(1,7))), link(3,'CORENLP',r('CORENLP',seg(1,7))),allen_srl, 
            srl( flows, [
              o(ARG1,[The,rhine]), 
              o(V,[flows]), 
              o(ARGM-DIR,[to,west,germany])]), flair,upos(verb),fner(o),fn('flow.01')]), 
          w( to, [
            pos(in), root(to),loc(4),lnks(4),txt("to"), 
            truecase('LOWER'),link(1,'PP',r('PP',seg(4,6))), 
            link(2,VP,r(VP,seg(3,6))), 
            link(3,S,r(S,seg(1,7))), link(4,'CORENLP',r('CORENLP',seg(1,7))),flair, 
            upos(adp),fner(o),fn('_')]), 
          w( west, [
            pos(nn), root(west),loc(5),lnks(5),txt("west"), 
            truecase('INIT_UPPER'),link(1,'NP',r('NP',seg(5,6))), 
            link(2,PP,r(PP,seg(4,6))), 
            link(3,VP,r(VP,seg(3,6))), 
            link(4,S,r(S,seg(1,7))), link(5,'CORENLP',r('CORENLP',seg(1,7))),flair, 
            upos(noun),fner(o),fn('_')]), 
          w( germany, [
            root(germany), loc(6),lnks(5),txt("germany"), 
            ner('COUNTRY'),truecase('INIT_UPPER'), 
            entitylink('Germany'),link(1,'NP',r('NP',seg(5,6))), 
            link(2,PP,r(PP,seg(4,6))), 
            link(3,VP,r(VP,seg(3,6))), 
            link(4,S,r(S,seg(1,7))), link(5,'CORENLP',r('CORENLP',seg(1,7))),old_pos(nn), 
            pos(nnp),flair,upos(propn),fner('s-loc'), 
            fn('_')]), 
          w( ?, [
            pos('.'), root(?),loc(7),lnks(2),txt("?"), 
            link(1,S,r(S,seg(1,7))), link(2,'CORENLP',r('CORENLP',seg(1,7))),flair, 
            upos(punct),fner(o),fn('_')])]).
tmp : test80_result( "The rhine flows to west germany ?", 
        sentence80, 
        q( s( np(3+sg,nameOf(rhine,[]),[]), 
              verb(main+tv,flow,active,pres+fin,[],posP(PosP)), 
              [], 
              [ prep_phrase(prep(to),np(3+sg,nameOf(west_germany,[]),[]))]))).
tmp : test80_result( "The rhine flows to west germany ?", 
        i_sentence, 
        question80( [], 
          pred( 
             quantV( identityQ(IdentityQ), 
               thing&River&river-D, '`'(named(D,rhine)),'`'(true), 
               [], 
               thing&River&river-D), 
             identityQ(IdentityQ18), 
             path_pred_linkage(direct(river_flows),river,D,B,C), 
             [ quantV( identityQ(IdentityQ19), 
                 thing&geo&country-C, '`'(named(C,west_germany)),'`'(true), 
                 [], 
                 thing&geo&country-C), 
               quantV(voidQ(VoidQ),thing&Thing-B,`(true),`(true),[],_61446-B)]))).
tmp : test80_result( "The rhine flows to west germany ?", 
        qplan, 
        answer80([]) :-  
          ^( Path_pred_linkageDirect, 
            ( named(Linkage_West_germany,west_germany)  ,
              named(River_Rhine,rhine) , 
              path_pred_linkage( direct(river_flows), 
                river, River_Rhine,Path_pred_linkageDirect, 
                Linkage_West_germany)))).
tmp : test80_result( "What are the areas of the countries bordering the baltic ?", 
        into_lexical_segs, 
        [ w( what, [
            pos(wp), root(what),loc(1),lnks(2),txt("What"), 
            truecase('INIT_UPPER'),link(1,'NP',r('NP',seg(1,1))), 
            link(2,'SBAR',r('SBAR',seg(1,11))),flair,upos(pron), 
            fner(o),fn('_')]), 
          w( are, [
            alt(pos(vbp)), root(be),loc(2),lnks(2),txt("are"), 
            truecase('LOWER'),link(1,'S',r('S',seg(2,10))), 
            link(2,'SBAR',r('SBAR',seg(1,11))),old_pos(aux), 
            pos(vb),allen_srl, 
            srl( are, [
              o(ARG2,[What]), 
              o(V,[are]), 
              o( 'ARG1', [
                the, areas,of,the,countries, 
                bordering,the,baltic])]), flair,upos(verb),fner(o),fn('be.01')]), 
          w( the, [
            pos(dt), root(the),loc(3),lnks(4),txt("the"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(3,4))), 
            link(2,NP,r(NP,seg(3,7))), 
            link(3,S,r(S,seg(2,10))), link(4,'SBAR',r('SBAR',seg(1,11))),spacy,spos(dt), 
            loc(5),dep_parent(det,n(pacific,6)), 
            node(n(the,5)),flair,upos(det),fner(o), 
            fn('_')]), 
          w( areas, [
            pos(nns), root(area),loc(4),lnks(4),txt("areas"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(3,4))), 
            link(2,NP,r(NP,seg(3,7))), 
            link(3,S,r(S,seg(2,10))), link(4,'SBAR',r('SBAR',seg(1,11))),flair, 
            upos(noun),fner(o),fn('_')]), 
          w( of, [
            pos(in), root(of),loc(5),lnks(4),txt("of"), 
            truecase('LOWER'),link(1,'PP',r('PP',seg(5,7))), 
            link(2,NP,r(NP,seg(3,7))), 
            link(3,S,r(S,seg(2,10))), link(4,'SBAR',r('SBAR',seg(1,11))),flair, 
            upos(adp),fner(o),fn('_')]), 
          w( the, [
            pos(dt), root(the),loc(6),lnks(5),txt("the"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(6,7))), 
            link(2,PP,r(PP,seg(5,7))), 
            link(3,NP,r(NP,seg(3,7))), 
            link(4,S,r(S,seg(2,10))), link(5,'SBAR',r('SBAR',seg(1,11))),flair, 
            upos(det),fner(o),fn('_')]), 
          w( countries, [
            pos(nns), root(country),loc(7),lnks(5), 
            txt("countries"),truecase('LOWER'), 
            link(1,NP,r(NP,seg(6,7))), 
            link(2,PP,r(PP,seg(5,7))), 
            link(3,NP,r(NP,seg(3,7))), 
            link(4,S,r(S,seg(2,10))), link(5,'SBAR',r('SBAR',seg(1,11))),flair, 
            upos(noun),fner(o),fn('_')]), 
          w( bordering, [
            pos(vbg), root(border),loc(8),lnks(3), 
            txt("bordering"),truecase('LOWER'), 
            link(1,VP,r(VP,seg(8,10))), 
            link(2,S,r(S,seg(2,10))), link(3,'SBAR',r('SBAR',seg(1,11))),allen_srl, 
            srl( bordering, [
              o(ARG2,[the,countries]), 
              o(V,[bordering]), 
              o(ARG1,[the,baltic])]), flair,upos(verb),fner(o),fn('border.01')]), 
          w( the, [
            pos(dt), root(the),loc(9),lnks(4),txt("the"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(9,10))), 
            link(2,VP,r(VP,seg(8,10))), 
            link(3,S,r(S,seg(2,10))), link(4,'SBAR',r('SBAR',seg(1,11))),flair, 
            upos(det),fner(o),fn('_')]), 
          w( baltic, [
            pos(jj), root(baltic),loc(10),lnks(4),txt("baltic"), 
            truecase('INIT_UPPER'),link(1,'NP',r('NP',seg(9,10))), 
            link(2,VP,r(VP,seg(8,10))), 
            link(3,S,r(S,seg(2,10))), link(4,'SBAR',r('SBAR',seg(1,11))),flair, 
            upos(noun),fner(o),fn('_')]), 
          w( ?, [
            pos('.'), root(?),loc(11),lnks(1),txt("?"), 
            link(1,'SBAR',r('SBAR',seg(1,11))),spacy, 
            spos('.'),loc(7),dep_parent(punct,n(bordered,3)), 
            node(n(?,7)),flair,upos(punct),fner(o), 
            fn('_')])]).
tmp : test80_result( "What are the areas of the countries bordering the baltic ?", 
        sentence80, 
        whq( value&size&area-B, 
          s( np(3+_139306,wh(value&size&area-B),[]), 
             verb(aux+be(Be),be(Be),active,pres+fin,[],posP(PosP)), 
             [ arg( dirO(DirO), 
                 np( 3+pl, 
                   np_head(det(the(pl)),[],area), 
                   [ prep_phrase( prep(of), 
                       np( 3+pl, 
                         np_head(det(the(pl)),[],country), 
                         [ reduced_rel( thing&geo&Geo-D, 
                             s( np(3+pl,wh(thing&geo&Geo-D),[]), 
                                verb(main+tv,border,active,inf,[prog],posP(PosP26)), 
                                [ arg(dirO(DirO27),np(3+sg,nameOf(baltic,[]),[]))], 
                                []))]))]))], 
             []))).
tmp : test80_result( "What are the areas of the countries bordering the baltic ?", 
        i_sentence, 
        question80( [value&size&area-B], 
          pred( 
             quantV( identityQ(IdentityQ), 
               value&size&area-B, '`'(true),'`'(true), 
               [], 
               value&size&area-B), 
             identityQ(IdentityQ17), 
             subsumed_by(B,C), 
             [ quantV( set(- + (- 0)), 
                 value&size&area-G, '`'(measure_pred(thing,area,D,G)),'`'(true), 
                 [ quantV( index(- + (- 0)), 
                     thing&geo&Geo-D, '`'(ti(country,D)),'`'(true), 
                     [ pred( 
                          quantV( identityQ(IdentityQ18), 
                            thing&geo&Geo-D, '`'(true),'`'(true), 
                            [], 
                            thing&geo&Geo-D), 
                          identityQ(IdentityQ19), 
                          generic_pred(thing,border,D,F), 
                          [ quantV( identityQ(IdentityQ20), 
                              thing&geo&seamass-F, '`'(named(F,baltic)),'`'(true), 
                              [], 
                              thing&geo&seamass-F)])], 
                     thing&geo&Geo-D)], 
                 value&size&area-C)]))).
tmp : test80_result( "What are the areas of the countries bordering the baltic ?", 
        qplan, 
        answer80([Subsumed_by]) :-  
          ^( By_SetOf24, 
            ( setOf( [Area_Border_Country]:SetOf, 
                ( named(Generic_Baltic,baltic)  ,
                  ti(country,Area_Border_Country) , 
                  generic_pred(thing,border,Area_Border_Country,Generic_Baltic) , 
                  setOf(Measure,measure_pred(thing,area,Area_Border_Country,Measure),SetOf)), 
                By_SetOf24) , 
              subsumed_by(Subsumed_by,By_SetOf24)))).
tmp : test80_result( "What are the capitals of the countries bordering the baltic ?", 
        into_lexical_segs, 
        [ w( what, [
            pos(wp), root(what),loc(1),lnks(2),txt("What"), 
            truecase('INIT_UPPER'),link(1,'NP',r('NP',seg(1,1))), 
            link(2,'SBAR',r('SBAR',seg(1,11))),flair,upos(pron), 
            fner(o),fn('_')]), 
          w( are, [
            alt(pos(vbp)), root(be),loc(2),lnks(2),txt("are"), 
            truecase('LOWER'),link(1,'S',r('S',seg(2,10))), 
            link(2,'SBAR',r('SBAR',seg(1,11))),old_pos(aux), 
            pos(vb),allen_srl, 
            srl( are, [
              o(V,[are]), 
              o(ARG1,[the,areas,of,the,countries]), 
              o(ARG2,[bordering,the,baltic])]), flair,upos(verb),fner(o),fn('be.01')]), 
          w( the, [
            pos(dt), root(the),loc(3),lnks(4),txt("the"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(3,4))), 
            link(2,NP,r(NP,seg(3,7))), 
            link(3,S,r(S,seg(2,10))), link(4,'SBAR',r('SBAR',seg(1,11))),flair, 
            upos(det),fner(o),fn('_')]), 
          w( capitals, [
            pos(nns), root(capital),loc(4),lnks(4), 
            txt("capitals"),truecase('LOWER'), 
            link(1,NP,r(NP,seg(3,4))), 
            link(2,NP,r(NP,seg(3,7))), 
            link(3,S,r(S,seg(2,10))), link(4,'SBAR',r('SBAR',seg(1,11))),flair, 
            upos(noun),fner(o),fn('_')]), 
          w( of, [
            pos(in), root(of),loc(5),lnks(4),txt("of"), 
            truecase('LOWER'),link(1,'PP',r('PP',seg(5,7))), 
            link(2,NP,r(NP,seg(3,7))), 
            link(3,S,r(S,seg(2,10))), link(4,'SBAR',r('SBAR',seg(1,11))),flair, 
            upos(adp),fner(o),fn('_')]), 
          w( the, [
            pos(dt), root(the),loc(6),lnks(5),txt("the"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(6,7))), 
            link(2,PP,r(PP,seg(5,7))), 
            link(3,NP,r(NP,seg(3,7))), 
            link(4,S,r(S,seg(2,10))), link(5,'SBAR',r('SBAR',seg(1,11))),flair, 
            upos(det),fner(o),fn('_')]), 
          w( countries, [
            pos(nns), root(country),loc(7),lnks(5), 
            txt("countries"),truecase('LOWER'), 
            link(1,NP,r(NP,seg(6,7))), 
            link(2,PP,r(PP,seg(5,7))), 
            link(3,NP,r(NP,seg(3,7))), 
            link(4,S,r(S,seg(2,10))), link(5,'SBAR',r('SBAR',seg(1,11))),flair, 
            upos(noun),fner(o),fn('_')]), 
          w( bordering, [
            pos(vbg), root(border),loc(8),lnks(3), 
            txt("bordering"),truecase('LOWER'), 
            link(1,VP,r(VP,seg(8,10))), 
            link(2,S,r(S,seg(2,10))), link(3,'SBAR',r('SBAR',seg(1,11))),allen_srl, 
            srl( bordering, [
              o(ARG2,[the,countries]), 
              o(V,[bordering]), 
              o(ARG1,[the,baltic])]), flair,upos(verb),fner(o),fn('border.01')]), 
          w( the, [
            pos(dt), root(the),loc(9),lnks(4),txt("the"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(9,10))), 
            link(2,VP,r(VP,seg(8,10))), 
            link(3,S,r(S,seg(2,10))), link(4,'SBAR',r('SBAR',seg(1,11))),flair, 
            upos(det),fner(o),fn('_')]), 
          w( baltic, [
            pos(jj), root(baltic),loc(10),lnks(4),txt("baltic"), 
            truecase('INIT_UPPER'),link(1,'NP',r('NP',seg(9,10))), 
            link(2,VP,r(VP,seg(8,10))), 
            link(3,S,r(S,seg(2,10))), link(4,'SBAR',r('SBAR',seg(1,11))),flair, 
            upos(noun),fner(o),fn('_')]), 
          w( ?, [
            pos('.'), root(?),loc(11),lnks(1),txt("?"), 
            link(1,'SBAR',r('SBAR',seg(1,11))),flair, 
            upos(punct),fner(o),fn('_')])]).
tmp : test80_result( "What are the capitals of the countries bordering the baltic ?", 
        sentence80, 
        whq( thing&City&city-B, 
          s( np(3+_85598,wh(thing&City&city-B),[]), 
             verb(aux+be(Be),be(Be),active,pres+fin,[],posP(PosP)), 
             [ arg( dirO(DirO), 
                 np( 3+pl, 
                   np_head(det(the(pl)),[],capital), 
                   [ prep_phrase( prep(of), 
                       np( 3+pl, 
                         np_head(det(the(pl)),[],country), 
                         [ reduced_rel( thing&geo&country-D, 
                             s( np(3+pl,wh(thing&geo&country-D),[]), 
                                verb(main+tv,border,active,inf,[prog],posP(PosP25)), 
                                [ arg(dirO(DirO26),np(3+sg,nameOf(baltic,[]),[]))], 
                                []))]))]))], 
             []))).
tmp : test80_result( "What are the capitals of the countries bordering the baltic ?", 
        i_sentence, 
        question80( [thing&City&city-B], 
          pred( 
             quantV( identityQ(IdentityQ), 
               thing&City&city-B, '`'(true),'`'(true), 
               [], 
               thing&City&city-B), 
             identityQ(IdentityQ18), 
             subsumed_by(B,C), 
             [ quantV( set(- + (- 0)), 
                 thing&City&city-G, 
                 '`'(specific_pred(thing,nation_capital,D,G)), 
                 '`'(true), 
                 [ quantV( index(- + (- 0)), 
                     thing&geo&country-D, '`'(ti(country,D)),'`'(true), 
                     [ pred( 
                          quantV( identityQ(IdentityQ19), 
                            thing&geo&country-D, '`'(true),'`'(true), 
                            [], 
                            thing&geo&country-D), 
                          identityQ(IdentityQ20), 
                          generic_pred(thing,border,D,F), 
                          [ quantV( identityQ(IdentityQ21), 
                              thing&geo&seamass-F, '`'(named(F,baltic)),'`'(true), 
                              [], 
                              thing&geo&seamass-F)])], 
                     thing&geo&country-D)], 
                 thing&City&city-C)]))).
tmp : test80_result( "What are the capitals of the countries bordering the baltic ?", 
        qplan, 
        answer80([Subsumed_by]) :-  
          ^( By_SetOf24, 
            ( setOf( [Nation_capital_Border_Country]:SetOf, 
                ( named(Generic_Baltic,baltic)  ,
                  ti(country,Nation_capital_Border_Country) , 
                  generic_pred(thing,border,Nation_capital_Border_Country,Generic_Baltic) , 
                  setOf( Specific, 
                    specific_pred(thing,nation_capital,Nation_capital_Border_Country,Specific), 
                    SetOf)), 
                By_SetOf24) , 
              subsumed_by(Subsumed_by,By_SetOf24)))).
tmp : test80_result( "What are the continents containing a country in which contains more than two cities whose population exceeds 1 million ?", 
        into_lexical_segs, 
        [ w( what, [
            pos(wp), root(what),loc(1),lnks(2),txt("What"), 
            truecase('INIT_UPPER'),link(1,'NP',r('NP',seg(1,1))), 
            link(2,SBAR,r(SBAR,seg(1,20)))]), 
          w( are, [
            alt(pos(vbp)), root(be),loc(2),lnks(2),txt("are"), 
            truecase('LOWER'),link(1,'S',r('S',seg(2,19))), 
            link(2,'SBAR',r('SBAR',seg(1,20))),old_pos(aux), 
            pos(vb),allen_srl, 
            srl( are, [
              o(ARG2,[What]), 
              o(V,[are]), 
              o( 'ARG1', [
                the, capitals,of,the,countries, 
                bordering,the,baltic])])]), 
          w( the, [
            pos(dt), root(the),loc(3),lnks(3),txt("the"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(3,4))), 
            link(2,S,r(S,seg(2,19))), link(3,'SBAR',r('SBAR',seg(1,20))),spacy,spos(dt), 
            loc(2),dep_parent(det,n(population,3)), 
            node(n(the,2))]), 
          w( continents, [
            pos(nns), root(continent),loc(4),lnks(3), 
            txt("continents"),truecase('LOWER'), 
            link(1,NP,r(NP,seg(3,4))), 
            link(2,S,r(S,seg(2,19))), 
            link(3,SBAR,r(SBAR,seg(1,20)))]), 
          w( containing, [
            pos(vbg), root(contain),loc(5),lnks(3), 
            txt("containing"),truecase('LOWER'), 
            link(1,VP,r(VP,seg(5,19))), 
            link(2,S,r(S,seg(2,19))), 
            link(3,SBAR,r(SBAR,seg(1,20)))]), 
          w( a, [
            pos(dt), root(a),loc(6),lnks(5),txt("a"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(6,7))), 
            link(2,NP,r(NP,seg(6,19))), 
            link(3,VP,r(VP,seg(5,19))), 
            link(4,S,r(S,seg(2,19))), 
            link(5,SBAR,r(SBAR,seg(1,20)))]), 
          w( country, [
            pos(nn), root(country),loc(7),lnks(5), 
            txt("country"),truecase('LOWER'), 
            link(1,NP,r(NP,seg(6,7))), 
            link(2,NP,r(NP,seg(6,19))), 
            link(3,VP,r(VP,seg(5,19))), 
            link(4,S,r(S,seg(2,19))), 
            link(5,SBAR,r(SBAR,seg(1,20)))]), 
          w( in, [
            pos(in), root(in),loc(8),lnks(6),txt("in"), 
            truecase('LOWER'),link(1,'WHPP',r('WHPP',seg(8,9))), 
            link(2,SBAR,r(SBAR,seg(8,19))), 
            link(3,NP,r(NP,seg(6,19))), 
            link(4,VP,r(VP,seg(5,19))), 
            link(5,S,r(S,seg(2,19))), 
            link(6,SBAR,r(SBAR,seg(1,20)))]), 
          w( which, [
            pos(wdt), root(which),loc(9),lnks(7),txt("which"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(9,9))), 
            link(2,WHPP,r(WHPP,seg(8,9))), 
            link(3,SBAR,r(SBAR,seg(8,19))), 
            link(4,NP,r(NP,seg(6,19))), 
            link(5,VP,r(VP,seg(5,19))), 
            link(6,S,r(S,seg(2,19))), 
            link(7,SBAR,r(SBAR,seg(1,20)))]), 
          w( contains, [
            pos(vbz), root(contain),loc(10),lnks(7), 
            txt("contains"),truecase('LOWER'), 
            link(1,VP,r(VP,seg(10,19))), 
            link(2,S,r(S,seg(10,19))), 
            link(3,SBAR,r(SBAR,seg(8,19))), 
            link(4,NP,r(NP,seg(6,19))), 
            link(5,VP,r(VP,seg(5,19))), 
            link(6,S,r(S,seg(2,19))), 
            link(7,SBAR,r(SBAR,seg(1,20)))]), 
          w( more, [
            pos(jjr), root(more),loc(11),lnks(10),txt("more"), 
            truecase('LOWER'),link(1,'QP',r('QP',seg(11,13))), 
            link(2,NP,r(NP,seg(11,14))), 
            link(3,NP,r(NP,seg(11,19))), 
            link(4,VP,r(VP,seg(10,19))), 
            link(5,S,r(S,seg(10,19))), 
            link(6,SBAR,r(SBAR,seg(8,19))), 
            link(7,NP,r(NP,seg(6,19))), 
            link(8,VP,r(VP,seg(5,19))), 
            link(9,S,r(S,seg(2,19))), 
            link(10,SBAR,r(SBAR,seg(1,20)))]), 
          w( than, [
            pos(in), root(than),loc(12),lnks(10),txt("than"), 
            truecase('LOWER'),link(1,'QP',r('QP',seg(11,13))), 
            link(2,NP,r(NP,seg(11,14))), 
            link(3,NP,r(NP,seg(11,19))), 
            link(4,VP,r(VP,seg(10,19))), 
            link(5,S,r(S,seg(10,19))), 
            link(6,SBAR,r(SBAR,seg(8,19))), 
            link(7,NP,r(NP,seg(6,19))), 
            link(8,VP,r(VP,seg(5,19))), 
            link(9,S,r(S,seg(2,19))), 
            link(10,SBAR,r(SBAR,seg(1,20)))]), 
          w( two, [
            pos(cd), root(two),loc(13),lnks(10),txt("two"), 
            ner('NUMBER'),normalizedNER('>2.0'), 
            truecase('LOWER'),corefed,#(1), 
            txt(["two"]),type('PROPER'), 
            numb('SINGULAR'),gender('UNKNOWN'), 
            animacy('INANIMATE'),repm(@(true)), 
            link(1,QP,r(QP,seg(11,13))), 
            link(2,NP,r(NP,seg(11,14))), 
            link(3,NP,r(NP,seg(11,19))), 
            link(4,VP,r(VP,seg(10,19))), 
            link(5,S,r(S,seg(10,19))), 
            link(6,SBAR,r(SBAR,seg(8,19))), 
            link(7,NP,r(NP,seg(6,19))), 
            link(8,VP,r(VP,seg(5,19))), 
            link(9,S,r(S,seg(2,19))), 
            link(10,SBAR,r(SBAR,seg(1,20)))]), 
          w( cities, [
            pos(nns), root(city),loc(14),lnks(9),txt("cities"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(11,14))), 
            link(2,NP,r(NP,seg(11,19))), 
            link(3,VP,r(VP,seg(10,19))), 
            link(4,S,r(S,seg(10,19))), 
            link(5,SBAR,r(SBAR,seg(8,19))), 
            link(6,NP,r(NP,seg(6,19))), 
            link(7,VP,r(VP,seg(5,19))), 
            link(8,S,r(S,seg(2,19))), 
            link(9,SBAR,r(SBAR,seg(1,20)))]), 
          w( whose, [
            pos('wp$'), root(whose),loc(15),lnks(10),txt("whose"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(15,16))), 
            link(2,SBAR,r(SBAR,seg(15,19))), 
            link(3,NP,r(NP,seg(11,19))), 
            link(4,VP,r(VP,seg(10,19))), 
            link(5,S,r(S,seg(10,19))), 
            link(6,SBAR,r(SBAR,seg(8,19))), 
            link(7,NP,r(NP,seg(6,19))), 
            link(8,VP,r(VP,seg(5,19))), 
            link(9,S,r(S,seg(2,19))), 
            link(10,SBAR,r(SBAR,seg(1,20)))]), 
          w( population, [
            pos(nn), root(population),loc(16),lnks(10), 
            txt("population"),truecase('LOWER'), 
            link(1,NP,r(NP,seg(15,16))), 
            link(2,SBAR,r(SBAR,seg(15,19))), 
            link(3,NP,r(NP,seg(11,19))), 
            link(4,VP,r(VP,seg(10,19))), 
            link(5,S,r(S,seg(10,19))), 
            link(6,SBAR,r(SBAR,seg(8,19))), 
            link(7,NP,r(NP,seg(6,19))), 
            link(8,VP,r(VP,seg(5,19))), 
            link(9,S,r(S,seg(2,19))), link(10,'SBAR',r('SBAR',seg(1,20))),spacy, 
            spos(nn),loc(3),form(sg), 
            dep_child(det,n(the,2)),dep_child(prep,n(of,4)), 
            dep_parent(nsubj,n(is,1)),node(n(population,3))]), 
          w( exceeds, [
            pos(vbz), root(exceed),loc(17),lnks(11), 
            txt("exceeds"),truecase('LOWER'), 
            link(1,VP,r(VP,seg(17,19))), 
            link(2,S,r(S,seg(17,19))), 
            link(3,SBAR,r(SBAR,seg(15,19))), 
            link(4,NP,r(NP,seg(11,19))), 
            link(5,VP,r(VP,seg(10,19))), 
            link(6,S,r(S,seg(10,19))), 
            link(7,SBAR,r(SBAR,seg(8,19))), 
            link(8,NP,r(NP,seg(6,19))), 
            link(9,VP,r(VP,seg(5,19))), 
            link(10,S,r(S,seg(2,19))), 
            link(11,SBAR,r(SBAR,seg(1,20)))]), 
          w( '1', [
            pos(cd), root('1'),loc(18),lnks(13),txt("1"), 
            ner('NUMBER'),normalizedNER(1000000.0), 
            entitylink('Million'),link(1,'QP',r('QP',seg(18,19))), 
            link(2,NP,r(NP,seg(18,19))), 
            link(3,VP,r(VP,seg(17,19))), 
            link(4,S,r(S,seg(17,19))), 
            link(5,SBAR,r(SBAR,seg(15,19))), 
            link(6,NP,r(NP,seg(11,19))), 
            link(7,VP,r(VP,seg(10,19))), 
            link(8,S,r(S,seg(10,19))), 
            link(9,SBAR,r(SBAR,seg(8,19))), 
            link(10,NP,r(NP,seg(6,19))), 
            link(11,VP,r(VP,seg(5,19))), 
            link(12,S,r(S,seg(2,19))), 
            link(13,SBAR,r(SBAR,seg(1,20)))]), 
          w( million, [
            pos(cd), root(million),loc(19),lnks(13), 
            txt("million"),ner('NUMBER'), 
            normalizedNER(1000000.0),truecase('LOWER'), 
            entitylink('Million'),link(1,'QP',r('QP',seg(18,19))), 
            link(2,NP,r(NP,seg(18,19))), 
            link(3,VP,r(VP,seg(17,19))), 
            link(4,S,r(S,seg(17,19))), 
            link(5,SBAR,r(SBAR,seg(15,19))), 
            link(6,NP,r(NP,seg(11,19))), 
            link(7,VP,r(VP,seg(10,19))), 
            link(8,S,r(S,seg(10,19))), 
            link(9,SBAR,r(SBAR,seg(8,19))), 
            link(10,NP,r(NP,seg(6,19))), 
            link(11,VP,r(VP,seg(5,19))), 
            link(12,S,r(S,seg(2,19))), link(13,'SBAR',r('SBAR',seg(1,20))),spacy, 
            spos(cd),loc(7),dep_child(compound,n('840',6)), 
            dep_parent(pobj,n(of,4)),node(n(million,7))]), 
          w( ?, [
            pos('.'), root(?),loc(20),lnks(1),txt("?"), 
            link(1,'SBAR',r('SBAR',seg(1,20))),spacy, 
            spos('.'),loc(8),dep_parent(punct,n(is,1)), 
            node(n(?,8))])]).
tmp : test80_result( "What are the continents containing a country in which contains more than two cities whose population exceeds 1 million ?", 
        sentence80, 
        whq( thing&geo&continent-B, 
          s( np(3+_215058,wh(thing&geo&continent-B),[]), 
             verb(aux+be(Be),be(Be),active,pres+fin,[],posP(PosP)), 
             [ arg( dirO(DirO), 
                 np( 3+pl, 
                   np_head(det(the(pl)),[],continent), 
                   [ reduced_rel( thing&geo&continent-D, 
                       s( np(3+pl,wh(thing&geo&continent-D),[]), 
                          verb(main+tv,contain,active,inf,[prog],posP(PosP29)), [],[])), 
                     rel( thing&geo&continent-D, 
                       s( np( 3+sg, 
                            np_head(det(a),[],country), 
                            [ prep_phrase(prep(in),np(3+pl,wh(thing&geo&continent-D),[]))]), 
                          verb(main+tv,contain,active,pres+fin,[],posP(PosP30)), 
                          [ arg( dirO(DirO31), 
                              np( 3+pl, 
                                np_head(quantV(more,2),[],city), 
                                [ rel( thing&Thing-H, 
                                    s( np( 3+sg, 
                                         np_head(det(the(sg)),[],population), 
                                         [ prep_phrase(poss(Poss),np(3+pl,wh(thing&Thing-H),[]))]), 
                                       verb(main+tv,exceed,active,pres+fin,[],posP(PosP33)), 
                                       [ arg(dirO(DirO34),np(3+sg,np_head(quantV(same,1),[],million),[]))], 
                                       []))]))], 
                          []))]))], 
             []))).
tmp : test80_result( "What are the continents containing a country in which contains more than two cities whose population exceeds 1 million ?", 
        i_sentence, 
        question80( [thing&geo&continent-B], 
          pred( 
             quantV( identityQ(IdentityQ), 
               thing&geo&continent-B, '`'(true),'`'(true), 
               [], 
               thing&geo&continent-B), 
             identityQ(IdentityQ17), 
             subsumed_by(B,C), 
             [ quantV( set(- + (- 0)), 
                 thing&geo&continent-D, 
                 '`'(ti(continent,D)), 
                 ( pred( 
                      quantV( det(a), 
                        thing&Thing-F, '`'(ti(country,F)),'`'(true), 
                        [ ( quantV( identityQ(IdentityQ18), 
                              thing&geo&continent-D, '`'(true),'`'(true), 
                              [], 
                              thing&geo&continent-D) & 
                            '`'(trans_pred(thing,contain,D,F)))], 
                        thing&Thing-F), 
                      identityQ(IdentityQ19), 
                      trans_pred(thing,contain,F,H), 
                      [ quantV( quantV(more,2), 
                          thing&Thing-H, 
                          '`'(ti(city,H)), 
                          ( pred( 
                               quantV( det(the(sg)), 
                                 value&units&population-I, 
                                 '`'(count_pred(thing,population,H,I)), 
                                 '`'(true), 
                                 [ quantV( identityQ(IdentityQ20), 
                                     thing&Thing-H, '`'(true),'`'(true), 
                                     [], 
                                     thing&Thing-H)], 
                                 value&units&population-I), 
                               identityQ(IdentityQ21), 
                               exceeds(I,J), 
                               [ quantV( voidQ(VoidQ), 
                                   value&units&population-J, '`'(J= --(1,million)),'`'(true), 
                                   [], 
                                   value&units&population-J)]) & 
                            '`'(true)), 
                          [], 
                          thing&Thing-H)]) & 
                   '`'(true)), 
                 [ pred( 
                      quantV( identityQ(IdentityQ23), 
                        thing&geo&continent-D, '`'(true),'`'(true), 
                        [], 
                        thing&geo&continent-D), 
                      identityQ(IdentityQ24), 
                      trans_pred(thing,contain,D,E), 
                      [ quantV(voidQ(VoidQ25),thing&Thing-E,`(true),`(true),[],_225734-E)])], 
                 thing&geo&continent-C)]))).
tmp : test80_result( "What are the continents containing a country in which contains more than two cities whose population exceeds 1 million ?", 
        qplan, 
        answer80([Subsumed_by]) :-  
          ^( By_SetOf, 
            ( setOf( Contain_Continent, 
                ( ^( Trans, 
                    ti(continent,Contain_Continent),trans_pred(thing,contain,Contain_Continent,Trans)) , 
                  ^( Contain_Country, 
                    ( ti(country,Contain_Country)  ,
                      trans_pred(thing,contain,Contain_Continent,Contain_Country) , 
                      ^( Numberof, 
                        ( numberof( Population_City, 
                            ( ti(city,Population_City)  ,
                              ^( Count, 
                                count_pred(thing,population,Population_City,Count),exceeds(Count,--(1,million))) , 
                              trans_pred(thing,contain,Contain_Country,Population_City)), 
                            Numberof) , 
                          Numberof>2))))), 
                By_SetOf) , 
              subsumed_by(Subsumed_by,By_SetOf)))).
tmp : test80_result( "What are the continents no country in which contains more than two cities whose population exceeds 1 million ?", 
        into_lexical_segs, 
        [ w( what, [
            pos(wp), root(what),loc(1),lnks(2),txt("What"), 
            truecase('INIT_UPPER'),link(1,'NP',r('NP',seg(1,1))), 
            link(2,'SBAR',r('SBAR',seg(1,19))),flair,upos(pron), 
            fner(o),fn('_')]), 
          w( are, [
            alt(pos(vbp)), root(be),loc(2),lnks(3),txt("are"), 
            truecase('LOWER'),link(1,'VP',r('VP',seg(2,18))), 
            link(2,S,r(S,seg(2,18))), link(3,'SBAR',r('SBAR',seg(1,19))),old_pos(aux), 
            pos(vb),allen_srl, 
            srl(are,[o('V',[are])]),flair, 
            upos(verb),fner(o),fn('be.01')]), 
          w( the, [
            pos(dt), root(the),loc(3),lnks(5),txt("the"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(3,4))), 
            link(2,NP,r(NP,seg(3,18))), 
            link(3,VP,r(VP,seg(2,18))), 
            link(4,S,r(S,seg(2,18))), link(5,'SBAR',r('SBAR',seg(1,19))),flair, 
            upos(det),fner(o),fn('_')]), 
          w( continents, [
            pos(nns), root(continent),loc(4),lnks(5), 
            txt("continents"),truecase('LOWER'), 
            link(1,NP,r(NP,seg(3,4))), 
            link(2,NP,r(NP,seg(3,18))), 
            link(3,VP,r(VP,seg(2,18))), 
            link(4,S,r(S,seg(2,18))), link(5,'SBAR',r('SBAR',seg(1,19))),flair, 
            upos(noun),fner(o),fn('_')]), 
          w( no, [
            pos(dt), root(no),loc(5),lnks(6),txt("no"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(5,8))), 
            link(2,SBAR,r(SBAR,seg(5,18))), 
            link(3,NP,r(NP,seg(3,18))), 
            link(4,VP,r(VP,seg(2,18))), 
            link(5,S,r(S,seg(2,18))), 
            link(6,SBAR,r(SBAR,seg(1,19)))]), 
          w( country, [
            pos(nn), root(country),loc(6),lnks(6), 
            txt("country"),truecase('LOWER'), 
            link(1,NP,r(NP,seg(5,8))), 
            link(2,SBAR,r(SBAR,seg(5,18))), 
            link(3,NP,r(NP,seg(3,18))), 
            link(4,VP,r(VP,seg(2,18))), 
            link(5,S,r(S,seg(2,18))), link(6,'SBAR',r('SBAR',seg(1,19))),flair, 
            upos(noun),fner(o),fn('_')]), 
          w( in, [
            pos(in), root(in),loc(7),lnks(7),txt("in"), 
            truecase('LOWER'),link(1,'WHPP',r('WHPP',seg(7,8))), 
            link(2,NP,r(NP,seg(5,8))), 
            link(3,SBAR,r(SBAR,seg(5,18))), 
            link(4,NP,r(NP,seg(3,18))), 
            link(5,VP,r(VP,seg(2,18))), 
            link(6,S,r(S,seg(2,18))), link(7,'SBAR',r('SBAR',seg(1,19))),flair, 
            upos(adp),fner(o),fn('_')]), 
          w( which, [
            pos(wdt), root(which),loc(8),lnks(8),txt("which"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(8,8))), 
            link(2,WHPP,r(WHPP,seg(7,8))), 
            link(3,NP,r(NP,seg(5,8))), 
            link(4,SBAR,r(SBAR,seg(5,18))), 
            link(5,NP,r(NP,seg(3,18))), 
            link(6,VP,r(VP,seg(2,18))), 
            link(7,S,r(S,seg(2,18))), link(8,'SBAR',r('SBAR',seg(1,19))),flair, 
            upos(pron),fner(o),fn('_')]), 
          w( contains, [
            pos(vbz), root(contain),loc(9),lnks(7), 
            txt("contains"),truecase('LOWER'), 
            link(1,VP,r(VP,seg(9,18))), 
            link(2,S,r(S,seg(9,18))), 
            link(3,SBAR,r(SBAR,seg(5,18))), 
            link(4,NP,r(NP,seg(3,18))), 
            link(5,VP,r(VP,seg(2,18))), 
            link(6,S,r(S,seg(2,18))), link(7,'SBAR',r('SBAR',seg(1,19))),allen_srl, 
            srl( contains, [
              o(ARG0,[a,country]), 
              o(R-ARGM-LOC,[in,which]), 
              o(V,[contains]), 
              o( 'ARG1', [
                more, than,two,cities,whose, 
                population,exceeds,'1',million])]), flair,upos(verb),fner(o),fn('contain.01')]), 
          w( more, [
            pos(jjr), root(more),loc(10),lnks(10),txt("more"), 
            truecase('LOWER'),link(1,'QP',r('QP',seg(10,12))), 
            link(2,NP,r(NP,seg(10,13))), 
            link(3,NP,r(NP,seg(10,18))), 
            link(4,VP,r(VP,seg(9,18))), 
            link(5,S,r(S,seg(9,18))), 
            link(6,SBAR,r(SBAR,seg(5,18))), 
            link(7,NP,r(NP,seg(3,18))), 
            link(8,VP,r(VP,seg(2,18))), 
            link(9,S,r(S,seg(2,18))), link(10,'SBAR',r('SBAR',seg(1,19))),flair, 
            upos(adj),fner(o),fn('_')]), 
          w( than, [
            pos(in), root(than),loc(11),lnks(10),txt("than"), 
            truecase('LOWER'),link(1,'QP',r('QP',seg(10,12))), 
            link(2,NP,r(NP,seg(10,13))), 
            link(3,NP,r(NP,seg(10,18))), 
            link(4,VP,r(VP,seg(9,18))), 
            link(5,S,r(S,seg(9,18))), 
            link(6,SBAR,r(SBAR,seg(5,18))), 
            link(7,NP,r(NP,seg(3,18))), 
            link(8,VP,r(VP,seg(2,18))), 
            link(9,S,r(S,seg(2,18))), link(10,'SBAR',r('SBAR',seg(1,19))),flair, 
            upos(adp),fner(o),fn('_')]), 
          w( two, [
            pos(cd), root(two),loc(12),lnks(10),txt("two"), 
            ner('NUMBER'),normalizedNER('>2.0'), 
            truecase('LOWER'),corefed,#(1), 
            txt(["two"]),type('PROPER'), 
            numb('SINGULAR'),gender('UNKNOWN'), 
            animacy('INANIMATE'),repm(@(true)), 
            link(1,QP,r(QP,seg(10,12))), 
            link(2,NP,r(NP,seg(10,13))), 
            link(3,NP,r(NP,seg(10,18))), 
            link(4,VP,r(VP,seg(9,18))), 
            link(5,S,r(S,seg(9,18))), 
            link(6,SBAR,r(SBAR,seg(5,18))), 
            link(7,NP,r(NP,seg(3,18))), 
            link(8,VP,r(VP,seg(2,18))), 
            link(9,S,r(S,seg(2,18))), link(10,'SBAR',r('SBAR',seg(1,19))),flair, 
            upos(num),fner(o),fn('_')]), 
          w( cities, [
            pos(nns), root(city),loc(13),lnks(9),txt("cities"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(10,13))), 
            link(2,NP,r(NP,seg(10,18))), 
            link(3,VP,r(VP,seg(9,18))), 
            link(4,S,r(S,seg(9,18))), 
            link(5,SBAR,r(SBAR,seg(5,18))), 
            link(6,NP,r(NP,seg(3,18))), 
            link(7,VP,r(VP,seg(2,18))), 
            link(8,S,r(S,seg(2,18))), link(9,'SBAR',r('SBAR',seg(1,19))),flair, 
            upos(noun),fner(o),fn('_')]), 
          w( whose, [
            pos('wp$'), root(whose),loc(14),lnks(10),txt("whose"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(14,15))), 
            link(2,SBAR,r(SBAR,seg(14,18))), 
            link(3,NP,r(NP,seg(10,18))), 
            link(4,VP,r(VP,seg(9,18))), 
            link(5,S,r(S,seg(9,18))), 
            link(6,SBAR,r(SBAR,seg(5,18))), 
            link(7,NP,r(NP,seg(3,18))), 
            link(8,VP,r(VP,seg(2,18))), 
            link(9,S,r(S,seg(2,18))), link(10,'SBAR',r('SBAR',seg(1,19))),flair, 
            upos(pron),fner(o),fn('_')]), 
          w( population, [
            pos(nn), root(population),loc(15),lnks(10), 
            txt("population"),truecase('LOWER'), 
            link(1,NP,r(NP,seg(14,15))), 
            link(2,SBAR,r(SBAR,seg(14,18))), 
            link(3,NP,r(NP,seg(10,18))), 
            link(4,VP,r(VP,seg(9,18))), 
            link(5,S,r(S,seg(9,18))), 
            link(6,SBAR,r(SBAR,seg(5,18))), 
            link(7,NP,r(NP,seg(3,18))), 
            link(8,VP,r(VP,seg(2,18))), 
            link(9,S,r(S,seg(2,18))), link(10,'SBAR',r('SBAR',seg(1,19))),flair, 
            upos(noun),fner(o),fn('_')]), 
          w( exceeds, [
            pos(vbz), root(exceed),loc(16),lnks(11), 
            txt("exceeds"),truecase('LOWER'), 
            link(1,VP,r(VP,seg(16,18))), 
            link(2,S,r(S,seg(16,18))), 
            link(3,SBAR,r(SBAR,seg(14,18))), 
            link(4,NP,r(NP,seg(10,18))), 
            link(5,VP,r(VP,seg(9,18))), 
            link(6,S,r(S,seg(9,18))), 
            link(7,SBAR,r(SBAR,seg(5,18))), 
            link(8,NP,r(NP,seg(3,18))), 
            link(9,VP,r(VP,seg(2,18))), 
            link(10,S,r(S,seg(2,18))), link(11,'SBAR',r('SBAR',seg(1,19))),allen_srl, 
            srl( exceeds, [
              o(ARG0,[more,than,two,cities]), 
              o(R-ARG0,[whose,population]), 
              o(V,[exceeds]), 
              o(ARG1,[1,million])]), flair,upos(verb),fner(o),fn('exceed.01')]), 
          w( '1', [
            pos(cd), root('1'),loc(17),lnks(13),txt("1"), 
            ner('NUMBER'),normalizedNER(1000000.0), 
            entitylink('Million'),link(1,'QP',r('QP',seg(17,18))), 
            link(2,NP,r(NP,seg(17,18))), 
            link(3,VP,r(VP,seg(16,18))), 
            link(4,S,r(S,seg(16,18))), 
            link(5,SBAR,r(SBAR,seg(14,18))), 
            link(6,NP,r(NP,seg(10,18))), 
            link(7,VP,r(VP,seg(9,18))), 
            link(8,S,r(S,seg(9,18))), 
            link(9,SBAR,r(SBAR,seg(5,18))), 
            link(10,NP,r(NP,seg(3,18))), 
            link(11,VP,r(VP,seg(2,18))), 
            link(12,S,r(S,seg(2,18))), link(13,'SBAR',r('SBAR',seg(1,19))),flair, 
            upos(num),fner(o),fn('_')]), 
          w( million, [
            pos(cd), root(million),loc(18),lnks(13), 
            txt("million"),ner('NUMBER'), 
            normalizedNER(1000000.0),truecase('LOWER'), 
            entitylink('Million'),link(1,'QP',r('QP',seg(17,18))), 
            link(2,NP,r(NP,seg(17,18))), 
            link(3,VP,r(VP,seg(16,18))), 
            link(4,S,r(S,seg(16,18))), 
            link(5,SBAR,r(SBAR,seg(14,18))), 
            link(6,NP,r(NP,seg(10,18))), 
            link(7,VP,r(VP,seg(9,18))), 
            link(8,S,r(S,seg(9,18))), 
            link(9,SBAR,r(SBAR,seg(5,18))), 
            link(10,NP,r(NP,seg(3,18))), 
            link(11,VP,r(VP,seg(2,18))), 
            link(12,S,r(S,seg(2,18))), link(13,'SBAR',r('SBAR',seg(1,19))),flair, 
            upos(num),fner(o),fn('_')]), 
          w( ?, [
            pos('.'), root(?),loc(19),lnks(1),txt("?"), 
            link(1,'SBAR',r('SBAR',seg(1,19))),flair, 
            upos(punct),fner(o),fn('_')])]).
tmp : test80_result( "What are the continents no country in which contains more than two cities whose population exceeds 1 million ?", 
        sentence80, 
        whq( thing&geo&continent-B, 
          s( np(3+_16874,wh(thing&geo&continent-B),[]), 
             verb(aux+be(Be),be(Be),active,pres+fin,[],posP(PosP)), 
             [ arg( dirO(DirO), 
                 np( 3+pl, 
                   np_head(det(the(pl)),[],continent), 
                   [ rel( thing&geo&continent-D, 
                       s( np( 3+sg, 
                            np_head(det(no),[],country), 
                            [ prep_phrase(prep(in),np(3+pl,wh(thing&geo&continent-D),[]))]), 
                          verb(main+tv,contain,active,pres+fin,[],posP(PosP28)), 
                          [ arg( dirO(DirO29), 
                              np( 3+pl, 
                                np_head(quantV(more,2),[],city), 
                                [ rel( thing&Thing-G, 
                                    s( np( 3+sg, 
                                         np_head(det(the(sg)),[],population), 
                                         [ prep_phrase(poss(Poss),np(3+pl,wh(thing&Thing-G),[]))]), 
                                       verb(main+tv,exceed,active,pres+fin,[],posP(PosP31)), 
                                       [ arg(dirO(DirO32),np(3+sg,np_head(quantV(same,1),[],million),[]))], 
                                       []))]))], 
                          []))]))], 
             []))).
tmp : test80_result( "What are the continents no country in which contains more than two cities whose population exceeds 1 million ?", 
        i_sentence, 
        question80( [thing&geo&continent-B], 
          pred( 
             quantV( identityQ(IdentityQ), 
               thing&geo&continent-B, '`'(true),'`'(true), 
               [], 
               thing&geo&continent-B), 
             identityQ(IdentityQ17), 
             subsumed_by(B,C), 
             [ quantV( set(- + (- 0)), 
                 thing&geo&continent-D, 
                 '`'(ti(continent,D)), 
                 ( pred( 
                      quantV( det(no), 
                        thing&Thing-E, '`'(ti(country,E)),'`'(true), 
                        [ ( quantV( identityQ(IdentityQ18), 
                              thing&geo&continent-D, '`'(true),'`'(true), 
                              [], 
                              thing&geo&continent-D) & 
                            '`'(trans_pred(thing,contain,D,E)))], 
                        thing&Thing-E), 
                      identityQ(IdentityQ19), 
                      trans_pred(thing,contain,E,G), 
                      [ quantV( quantV(more,2), 
                          thing&Thing-G, 
                          '`'(ti(city,G)), 
                          ( pred( 
                               quantV( det(the(sg)), 
                                 value&units&population-H, 
                                 '`'(count_pred(thing,population,G,H)), 
                                 '`'(true), 
                                 [ quantV( identityQ(IdentityQ20), 
                                     thing&Thing-G, '`'(true),'`'(true), 
                                     [], 
                                     thing&Thing-G)], 
                                 value&units&population-H), 
                               identityQ(IdentityQ21), 
                               exceeds(H,I), 
                               [ quantV( voidQ(VoidQ), 
                                   value&units&population-I, '`'(I= --(1,million)),'`'(true), 
                                   [], 
                                   value&units&population-I)]) & 
                            '`'(true)), 
                          [], 
                          thing&Thing-G)]) & 
                   '`'(true)), 
                 [], 
                 thing&geo&continent-C)]))).
tmp : test80_result( "What are the continents no country in which contains more than two cities whose population exceeds 1 million ?", 
        qplan, 
        answer80([Subsumed_by]) :-  
          ^( By_SetOf, 
            ( setOf( Contain_Continent, 
                ( ti(continent,Contain_Continent) , 
                  \+( ^( Contain_Country, 
                        ( ti(country,Contain_Country)  ,
                          trans_pred(thing,contain,Contain_Continent,Contain_Country) , 
                          ^( Numberof, 
                            ( numberof( Population_City, 
                                ( ti(city,Population_City)  ,
                                  ^( Count, 
                                    count_pred(thing,population,Population_City,Count),exceeds(Count,--(1,million))) , 
                                  trans_pred(thing,contain,Contain_Country,Population_City)), 
                                Numberof) , 
                              Numberof>2)))))), 
                By_SetOf) , 
              subsumed_by(Subsumed_by,By_SetOf)))).
tmp : test80_result( "What are the continents not containing a country ?", 
        into_lexical_segs, 
        [ w( what, [
            pos(wp), root(what),loc(1),lnks(2),txt("What"), 
            truecase('INIT_UPPER'),link(1,'NP',r('NP',seg(1,1))), 
            link(2,'SBAR',r('SBAR',seg(1,9))),flair,upos(pron), 
            fner(o),fn('_')]), 
          w( are, [
            alt(pos(vbp)), root(be),loc(2),lnks(2),txt("are"), 
            truecase('LOWER'),link(1,'S',r('S',seg(2,8))), 
            link(2,'SBAR',r('SBAR',seg(1,9))),old_pos(aux), 
            pos(vb),allen_srl, 
            srl( are, [
              o(ARG2,[What]), 
              o(V,[are]), 
              o( 'ARG1', [
                the, continents,no,country,in,which, 
                contains,more,than,two,cities, 
                whose,population,exceeds,'1', 
                million])]), flair,upos(verb),fner(o),fn('be.01')]), 
          w( the, [
            pos(dt), root(the),loc(3),lnks(3),txt("the"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(3,4))), 
            link(2,S,r(S,seg(2,8))), link(3,'SBAR',r('SBAR',seg(1,9))),spacy,spos(dt), 
            loc(2),dep_parent(det,n(population,3)), 
            node(n(the,2)),flair,upos(det),fner(o), 
            fn('_')]), 
          w( continents, [
            pos(nns), root(continent),loc(4),lnks(3), 
            txt("continents"),truecase('LOWER'), 
            link(1,NP,r(NP,seg(3,4))), 
            link(2,S,r(S,seg(2,8))), link(3,'SBAR',r('SBAR',seg(1,9))),flair, 
            upos(noun),fner(o),fn('_')]), 
          w( not, [
            pos(rb), root(not),loc(5),lnks(3),txt("not"), 
            truecase('LOWER'),link(1,'VP',r('VP',seg(5,8))), 
            link(2,S,r(S,seg(2,8))), 
            link(3,SBAR,r(SBAR,seg(1,9)))]), 
          w( containing, [
            pos(vbg), root(contain),loc(6),lnks(3), 
            txt("containing"),truecase('LOWER'), 
            link(1,VP,r(VP,seg(5,8))), 
            link(2,S,r(S,seg(2,8))), 
            link(3,SBAR,r(SBAR,seg(1,9)))]), 
          w( a, [
            pos(dt), root(a),loc(7),lnks(4),txt("a"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(7,8))), 
            link(2,VP,r(VP,seg(5,8))), 
            link(3,S,r(S,seg(2,8))), 
            link(4,SBAR,r(SBAR,seg(1,9)))]), 
          w( country, [
            pos(nn), root(country),loc(8),lnks(4), 
            txt("country"),truecase('LOWER'), 
            link(1,NP,r(NP,seg(7,8))), 
            link(2,VP,r(VP,seg(5,8))), 
            link(3,S,r(S,seg(2,8))), link(4,'SBAR',r('SBAR',seg(1,9))),flair, 
            upos(noun),fner(o),fn('_')]), 
          w( ?, [
            pos('.'), root(?),loc(9),lnks(1),txt("?"), 
            link(1,'SBAR',r('SBAR',seg(1,9))),spacy,spos('.'), 
            loc(10),dep_parent(punct,n(is,1)),node(n(?,10)), 
            flair,upos(punct),fner(o),fn('_')])]).
tmp : test80_result( "What are the continents not containing a country ?", 
        sentence80, 
        whq( thing&geo&continent-B, 
          s( np(3+_56918,wh(thing&geo&continent-B),[]), 
             verb(aux+be(Be),be(Be),active,pres+fin,[],posP(PosP)), 
             [ arg( dirO(DirO), 
                 np( 3+pl, 
                   np_head(det(the(pl)),[],continent), 
                   [ reduced_rel( thing&geo&continent-D, 
                       s( np(3+pl,wh(thing&geo&continent-D),[]), 
                          verb(main+tv,contain,active,inf,[prog],negP(NegP)), 
                          [ arg(dirO(DirO24),np(3+sg,np_head(det(a),[],country),[]))], 
                          []))]))], 
             []))).
tmp : test80_result( "What are the continents not containing a country ?", 
        i_sentence, 
        question80( [thing&geo&continent-B], 
          pred( 
             quantV( identityQ(IdentityQ), 
               thing&geo&continent-B, '`'(true),'`'(true), 
               [], 
               thing&geo&continent-B), 
             identityQ(IdentityQ17), 
             subsumed_by(B,C), 
             [ quantV( set(- + (- 0)), 
                 thing&geo&continent-D, '`'(ti(continent,D)),'`'(true), 
                 [ pred( 
                      quantV( identityQ(IdentityQ18), 
                        thing&geo&continent-D, '`'(true),'`'(true), 
                        [], 
                        thing&geo&continent-D), notP,trans_pred(thing,contain,D,E), 
                      [ quantV( det(a), 
                          thing&Thing-E, '`'(ti(country,E)),'`'(true), 
                          [], 
                          thing&Thing-E)])], 
                 thing&geo&continent-C)]))).
tmp : test80_result( "What are the continents not containing a country ?", 
        qplan, 
        answer80([Subsumed_by]) :-  
          ^( By_SetOf, 
            ( setOf( Contain_Continent, 
                ( ti(continent,Contain_Continent) , 
                  \+( ^( Country, 
                        ti(country,Country),trans_pred(thing,contain,Contain_Continent,Country)))), 
                By_SetOf) , 
              subsumed_by(Subsumed_by,By_SetOf)))).
tmp : test80_result( "What are the countries from which a river flows into the black sea ?", 
        into_lexical_segs, 
        [ w( what, [
            pos(wp), root(what),loc(1),lnks(2),txt("What"), 
            truecase('INIT_UPPER'),link(1,'NP',r('NP',seg(1,1))), 
            link(2,'SBAR',r('SBAR',seg(1,14))),flair,upos(pron), 
            fner(o),fn('_')]), 
          w( are, [
            alt(pos(vbp)), root(be),loc(2),lnks(2),txt("are"), 
            truecase('LOWER'),link(1,'S',r('S',seg(2,13))), 
            link(2,'SBAR',r('SBAR',seg(1,14))),old_pos(aux), 
            pos(vb),allen_srl, 
            srl(are,[o('V',[are])]),flair, 
            upos(verb),fner(o),fn('be.03')]), 
          w( the, [
            pos(dt), root(the),loc(3),lnks(4),txt("the"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(3,4))), 
            link(2,NP,r(NP,seg(3,13))), 
            link(3,S,r(S,seg(2,13))), link(4,'SBAR',r('SBAR',seg(1,14))),flair, 
            upos(det),fner(o),fn('_')]), 
          w( countries, [
            pos(nns), root(country),loc(4),lnks(4), 
            txt("countries"),truecase('LOWER'), 
            link(1,NP,r(NP,seg(3,4))), 
            link(2,NP,r(NP,seg(3,13))), 
            link(3,S,r(S,seg(2,13))), 
            link(4,SBAR,r(SBAR,seg(1,14)))]), 
          w( from, [
            pos(in), root(from),loc(5),lnks(5),txt("from"), 
            truecase('LOWER'),link(1,'WHPP',r('WHPP',seg(5,6))), 
            link(2,SBAR,r(SBAR,seg(5,13))), 
            link(3,NP,r(NP,seg(3,13))), 
            link(4,S,r(S,seg(2,13))), 
            link(5,SBAR,r(SBAR,seg(1,14)))]), 
          w( which, [
            pos(wdt), root(which),loc(6),lnks(6),txt("which"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(6,6))), 
            link(2,WHPP,r(WHPP,seg(5,6))), 
            link(3,SBAR,r(SBAR,seg(5,13))), 
            link(4,NP,r(NP,seg(3,13))), 
            link(5,S,r(S,seg(2,13))), 
            link(6,SBAR,r(SBAR,seg(1,14)))]), 
          w( a, [
            pos(dt), root(a),loc(7),lnks(6),txt("a"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(7,8))), 
            link(2,S,r(S,seg(7,13))), 
            link(3,SBAR,r(SBAR,seg(5,13))), 
            link(4,NP,r(NP,seg(3,13))), 
            link(5,S,r(S,seg(2,13))), link(6,'SBAR',r('SBAR',seg(1,14))),flair, 
            upos(det),fner(o),fn('_')]), 
          w( river, [
            pos(nn), root(river),loc(8),lnks(6),txt("river"), 
            ner('TITLE'),truecase('LOWER'), 
            entitylink('River'),link(1,'NP',r('NP',seg(7,8))), 
            link(2,S,r(S,seg(7,13))), 
            link(3,SBAR,r(SBAR,seg(5,13))), 
            link(4,NP,r(NP,seg(3,13))), 
            link(5,S,r(S,seg(2,13))), 
            link(6,SBAR,r(SBAR,seg(1,14)))]), 
          w( flows, [
            pos(vbz), root(flow),loc(9),lnks(6),txt("flows"), 
            truecase('LOWER'),link(1,'VP',r('VP',seg(9,13))), 
            link(2,S,r(S,seg(7,13))), 
            link(3,SBAR,r(SBAR,seg(5,13))), 
            link(4,NP,r(NP,seg(3,13))), 
            link(5,S,r(S,seg(2,13))), 
            link(6,SBAR,r(SBAR,seg(1,14)))]), 
          w( into, [
            pos(in), root(into),loc(10),lnks(7),txt("into"), 
            truecase('LOWER'),link(1,'PP',r('PP',seg(10,13))), 
            link(2,VP,r(VP,seg(9,13))), 
            link(3,S,r(S,seg(7,13))), 
            link(4,SBAR,r(SBAR,seg(5,13))), 
            link(5,NP,r(NP,seg(3,13))), 
            link(6,S,r(S,seg(2,13))), 
            link(7,SBAR,r(SBAR,seg(1,14)))]), 
          w( the, [
            pos(dt), root(the),loc(11),lnks(8),txt("the"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(11,13))), 
            link(2,PP,r(PP,seg(10,13))), 
            link(3,VP,r(VP,seg(9,13))), 
            link(4,S,r(S,seg(7,13))), 
            link(5,SBAR,r(SBAR,seg(5,13))), 
            link(6,NP,r(NP,seg(3,13))), 
            link(7,S,r(S,seg(2,13))), 
            link(8,SBAR,r(SBAR,seg(1,14)))]), 
          w( black, [
            pos(jj), root(black),loc(12),lnks(8),txt("black"), 
            truecase('INIT_UPPER'),link(1,'NP',r('NP',seg(11,13))), 
            link(2,PP,r(PP,seg(10,13))), 
            link(3,VP,r(VP,seg(9,13))), 
            link(4,S,r(S,seg(7,13))), 
            link(5,SBAR,r(SBAR,seg(5,13))), 
            link(6,NP,r(NP,seg(3,13))), 
            link(7,S,r(S,seg(2,13))), 
            link(8,SBAR,r(SBAR,seg(1,14)))]), 
          w( sea, [
            pos(nn), root(sea),loc(13),lnks(8),txt("sea"), 
            truecase('INIT_UPPER'),link(1,'NP',r('NP',seg(11,13))), 
            link(2,PP,r(PP,seg(10,13))), 
            link(3,VP,r(VP,seg(9,13))), 
            link(4,S,r(S,seg(7,13))), 
            link(5,SBAR,r(SBAR,seg(5,13))), 
            link(6,NP,r(NP,seg(3,13))), 
            link(7,S,r(S,seg(2,13))), 
            link(8,SBAR,r(SBAR,seg(1,14)))]), 
          w( ?, [
            pos('.'), root(?),loc(14),lnks(1),txt("?"), 
            link(1,'SBAR',r('SBAR',seg(1,14))),flair, 
            upos(punct),fner(o),fn('_')])]).
tmp : test80_result( "What are the countries from which a river flows into the black sea ?", 
        sentence80, 
        whq( thing&Thing-B, 
          s( np(3+_250134,wh(thing&Thing-B),[]), 
             verb(aux+be(Be),be(Be),active,pres+fin,[],posP(PosP)), 
             [ arg( dirO(DirO), 
                 np( 3+pl, 
                   np_head(det(the(pl)),[],country), 
                   [ rel( thing&Thing-D, 
                       s( np(3+sg,np_head(det(a),[],river),[]), 
                          verb(main+tv,flow,active,pres+fin,[],posP(PosP25)), 
                          [], 
                          [ prep_phrase(prep(from),np(3+pl,wh(thing&Thing-D),[])), 
                            prep_phrase(prep(into),np(3+sg,nameOf(black_sea,[]),[]))]))]))], 
             []))).
tmp : test80_result( "What are the countries from which a river flows into the black sea ?", 
        i_sentence, 
        question80( [thing&Thing-B], 
          pred( 
             quantV( identityQ(IdentityQ), 
               thing&Thing-B, '`'(true),'`'(true), 
               [], 
               thing&Thing-B), 
             identityQ(IdentityQ18), 
             subsumed_by(B,C), 
             [ quantV( set(- + (- 0)), 
                 thing&Thing-D, 
                 '`'(ti(country,D)), 
                 ( pred( 
                      quantV( det(a), 
                        thing&River&river-E, '`'(ti(river,E)),'`'(true), 
                        [], 
                        thing&River&river-E), 
                      identityQ(IdentityQ19), 
                      path_pred_linkage(direct(river_flows),river,E,D,F), 
                      [ quantV( identityQ(IdentityQ20), 
                          thing&Thing-D, '`'(true),'`'(true), 
                          [], 
                          thing&Thing-D), 
                        quantV( identityQ(IdentityQ21), 
                          thing&geo&seamass-F, '`'(named(F,black_sea)),'`'(true), 
                          [], 
                          thing&geo&seamass-F)]) & 
                   '`'(true)), 
                 [], 
                 thing&Thing-C)]))).
tmp : test80_result( "What are the countries from which a river flows into the black sea ?", 
        qplan, 
        answer80([Subsumed_by]) :-  
          ^( By_SetOf, 
            ( setOf( Country, 
                ( ti(country,Country) , 
                  ^( River, 
                    ( ti(river,River)  ,
                      named(Linkage_Black_sea,black_sea) , 
                      path_pred_linkage(direct(river_flows),river,River,Country,Linkage_Black_sea)))), 
                By_SetOf) , 
              subsumed_by(Subsumed_by,By_SetOf)))).
tmp : test80_result( "What countries are there in europe ?", 
        into_lexical_segs, 
        [ w( what, [
            alt(pos(wdt)), root(what),pos(wp),loc(1),lnks(2), 
            txt("What"),truecase('INIT_UPPER'), 
            link(1,NP,r(NP,seg(1,2))), link(2,'SBAR',r('SBAR',seg(1,7))),flair,upos(pron), 
            fner(o),fn('_')]), 
          w( countries, [
            pos(nns), root(country),loc(2),lnks(2), 
            txt("countries"),truecase('LOWER'), 
            link(1,NP,r(NP,seg(1,2))), link(2,'SBAR',r('SBAR',seg(1,7))),flair, 
            upos(noun),fner(o),fn('_')]), 
          w( are, [
            alt(pos(vbp)), root(be),loc(3),lnks(2),txt("are"), 
            truecase('LOWER'),link(1,'S',r('S',seg(3,6))), 
            link(2,'SBAR',r('SBAR',seg(1,7))),old_pos(aux), 
            pos(vb),allen_srl, 
            srl( are, [
              o(ARG2,[What]), 
              o(V,[are]), 
              o( 'ARG1', [
                the, countries,from,which,a,river, 
                flows,into,the,black,sea])]), flair,upos(verb),fner(o),fn('be.01')]), 
          w( there, [
            pos(ex), root(there),loc(4),lnks(3),txt("there"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(4,4))), 
            link(2,S,r(S,seg(3,6))), 
            link(3,SBAR,r(SBAR,seg(1,7)))]), 
          w( in, [
            pos(in), root(in),loc(5),lnks(3),txt("in"), 
            truecase('LOWER'),link(1,'PP',r('PP',seg(5,6))), 
            link(2,S,r(S,seg(3,6))), link(3,'SBAR',r('SBAR',seg(1,7))),spacy,spos(in), 
            loc(4),dep_child(pobj,n(switzerland,5)), 
            dep_parent(prep,n(rhine,3)),node(n(in,4))]), 
          w( europe, [
            alt(pos(nn)), root(europe),pos(nnp),loc(6),lnks(4), 
            txt("europe"),ner('LOCATION'), 
            truecase('INIT_UPPER'),entitylink('Europe'), 
            link(1,NP,r(NP,seg(6,6))), 
            link(2,PP,r(PP,seg(5,6))), 
            link(3,S,r(S,seg(3,6))), 
            link(4,SBAR,r(SBAR,seg(1,7)))]), 
          w( ?, [
            pos('.'), root(?),loc(7),lnks(1),txt("?"), 
            link(1,'SBAR',r('SBAR',seg(1,7))),spacy,spos('.'), 
            loc(6),dep_parent(punct,n(is,1)),node(n(?,6)), 
            flair,upos(punct),fner(o),fn('_')])]).
tmp : test80_result( "What countries are there in europe ?", 
        sentence80, 
        whq( thing&Thing-B, 
          s( np(3+pl,np_head(wh_det(thing&Thing,thing&Thing-B),[],country),[]), 
             verb(aux+be(Be),be(Be),active,pres+fin,[],posP(PosP)), 
             [voidQ(VoidQ22)], 
             [ prep_phrase(prep(in),np(3+sg,nameOf(europe,[]),[]))]))).
tmp : test80_result( "What countries are there in europe ?", 
        i_sentence, 
        question80( [thing&Thing-B], 
          pred( 
             quantV( 
                wh_det(thing&Thing,thing&Thing-B), 
                thing&Thing-B, '`'(ti(country,B)),'`'(true), 
                [], 
                thing&Thing-B), identityQ(IdentityQ),true, 
             [ ( quantV( identityQ(IdentityQ18), 
                   thing&geo&continent-C, '`'(named(C,europe)),'`'(true), 
                   [], 
                   thing&geo&continent-C) & 
                 '`'(trans_pred(thing,contain,C,B)))]))).
tmp : test80_result( "What countries are there in europe ?", 
        qplan, 
        answer80([Country]) :- 
          ti(country,Country) , 
          named(Contain_Europe,europe) , 
          trans_pred(thing,contain,Contain_Europe,Country)).
tmp : test80_result( "What is a river that is asian ?", 
        into_lexical_segs, 
        [ w( what, [
            pos(wp), root(what),loc(1),lnks(2),txt("What"), 
            truecase('INIT_UPPER'),link(1,'NP',r('NP',seg(1,1))), 
            link(2,'SBAR',r('SBAR',seg(1,8))),flair,upos(pron), 
            fner(o),fn('_')]), 
          w( is, [
            alt(pos(vbz)), root(be),loc(2),lnks(2),txt("is"), 
            truecase('LOWER'),link(1,'S',r('S',seg(2,7))), 
            link(2,'SBAR',r('SBAR',seg(1,8))),old_pos(aux), 
            pos(vb),allen_srl, 
            srl( is, [
              o(ARG2,[What]), 
              o(V,[is]), 
              o(ARG1,[a,river,that,is,asian])])]), 
          w( a, [
            pos(dt), root(a),loc(3),lnks(4),txt("a"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(3,4))), 
            link(2,NP,r(NP,seg(3,7))), 
            link(3,S,r(S,seg(2,7))), 
            link(4,SBAR,r(SBAR,seg(1,8)))]), 
          w( river, [
            pos(nn), root(river),loc(4),lnks(4),txt("river"), 
            ner('TITLE'),truecase('LOWER'), 
            entitylink('River'),link(1,'NP',r('NP',seg(3,4))), 
            link(2,NP,r(NP,seg(3,7))), 
            link(3,S,r(S,seg(2,7))), 
            link(4,SBAR,r(SBAR,seg(1,8)))]), 
          w( that, [
            pos(wdt), root(that),loc(5),lnks(5),txt("that"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(5,5))), 
            link(2,SBAR,r(SBAR,seg(5,7))), 
            link(3,NP,r(NP,seg(3,7))), 
            link(4,S,r(S,seg(2,7))), 
            link(5,SBAR,r(SBAR,seg(1,8)))]), 
          w( is, [
            alt(pos(vbz)), root(be),loc(6),lnks(6),txt("is"), 
            truecase('LOWER'),link(1,'VP',r('VP',seg(6,7))), 
            link(2,S,r(S,seg(6,7))), 
            link(3,SBAR,r(SBAR,seg(5,7))), 
            link(4,NP,r(NP,seg(3,7))), 
            link(5,S,r(S,seg(2,7))), link(6,'SBAR',r('SBAR',seg(1,8))),old_pos(aux), 
            pos(vb),allen_srl, 
            srl( is, [
              o(ARG1,[a,river]), o('R-ARG1',[that]),o('V',[is]), 
              o(ARG2,[asian])])]), 
          w( asian, [
            pos(jj), root(asian),loc(7),lnks(7),txt("asian"), 
            ner('NATIONALITY'),truecase('INIT_UPPER'), 
            entitylink('Asian'),link(1,'ADJP',r('ADJP',seg(7,7))), 
            link(2,VP,r(VP,seg(6,7))), 
            link(3,S,r(S,seg(6,7))), 
            link(4,SBAR,r(SBAR,seg(5,7))), 
            link(5,NP,r(NP,seg(3,7))), 
            link(6,S,r(S,seg(2,7))), 
            link(7,SBAR,r(SBAR,seg(1,8)))]), 
          w( ?, [
            pos('.'), root(?),loc(8),lnks(1),txt("?"), 
            link(1,'SBAR',r('SBAR',seg(1,8))),flair, 
            upos(punct),fner(o),fn('_')])]).
tmp : test80_result( "What is a river that is asian ?", 
        sentence80, 
        whq( thing&F&river-B, 
          s( np(3+_241290,wh(thing&F&river-B),[]), 
             verb(aux+be(Be),be(Be),active,pres+fin,[],posP(PosP)), 
             [ arg( dirO(DirO), 
                 np( 3+sg, 
                   np_head(det(a),[],river), 
                   [ reduced_rel( thing&F&river-C, 
                       s( np(3+sg,pronoun(neut,3+sg),[]), 
                          verb(aux+be(Be24),be(Be24),active,pres+fin,[],posP(PosP25)), 
                          [ arg(dirO(DirO26),np(3+sg,wh(thing&F&river-C),[]))], 
                          [])), 
                     reduced_rel( thing&F&river-C, 
                       s( np(3+sg,wh(thing&F&river-C),[]), 
                          verb(aux+be(PosP_Be27),be(PosP_Be27),active,pres+fin,[],posP(PosP_Be27)), 
                          [ arg(arg_pred(Arg29),adj(asian))], 
                          []))]))], 
             []))).
tmp : test80_result( "What is a river that is asian ?", 
        i_sentence, 
        question80( [thing&F&river-B], 
          pred( 
             quantV( identityQ(IdentityQ), 
               thing&F&river-B, '`'(true),'`'(true), 
               [], 
               thing&F&river-B), 
             identityQ(IdentityQ17), 
             subsumed_by(B,C), 
             [ quantV( det(a), 
                 thing&F&river-C, 
                 '`'((generic_pred(thing,any,D,C),ti(river,C))), 
                 '`'(true), 
                 [ pred( 
                      quantV( identityQ(IdentityQ18), 
                        thing&F&river-E, 
                        `(qualifiedBy(E,thing&F&river,pronoun(neut,3+sg))), 
                        '`'(true), 
                        [], 
                        thing&F&river-E), 
                      identityQ(IdentityQ19), 
                      subsumed_by(E,C), 
                      [ quantV( identityQ(IdentityQ20), 
                          thing&F&river-C, '`'(true),'`'(true), 
                          [], 
                          thing&F&river-C)]), 
                   pred( 
                      quantV( identityQ(IdentityQ21), 
                        thing&F&river-C, '`'(true),'`'(true), 
                        [], 
                        thing&F&river-C), identityQ(IdentityQ22),true, 
                      ['`'(true)&'`'(ti(asian,C))&'`'(true)]), 
                   quantV(voidQ(VoidQ),thing&geo&dog-D,`(true),`(true),[],_112216-D)], 
                 thing&F&river-C)]))).
tmp : test80_result( "What is a river that is asian ?", 
        qplan, 
        answer80([Subsumed_by21]) :-  
          ^( By_Generic_Asian_River18, 
            ( ^( Any, 
                ( qualifiedBy(Subsumed_by,thing&River&river,pronoun(neut,3+sg))  ,
                  generic_pred(thing,any,Any,By_Generic_Asian_River18) , 
                  ti(river,By_Generic_Asian_River18) , 
                  subsumed_by(Subsumed_by,By_Generic_Asian_River18) , 
                  ti(asian,By_Generic_Asian_River18))) , 
              subsumed_by(Subsumed_by21,By_Generic_Asian_River18)))).
tmp : test80_result( "What is a river that is in asia ?", 
        into_lexical_segs, 
        [ w( what, [
            pos(wp), root(what),loc(1),lnks(2),txt("What"), 
            truecase('INIT_UPPER'),link(1,'NP',r('NP',seg(1,1))), 
            link(2,'SBAR',r('SBAR',seg(1,9))),flair,upos(pron), 
            fner(o),fn('_')]), 
          w( is, [
            alt(pos(vbz)), root(be),loc(2),lnks(3),txt("is"), 
            truecase('LOWER'),link(1,'VP',r('VP',seg(2,8))), 
            link(2,S,r(S,seg(2,8))), link(3,'SBAR',r('SBAR',seg(1,9))),old_pos(aux), 
            pos(vbz),spacy,spos(vbz),loc(1), 
            tense(present),txt("Is"),dep_child(root,n(is,1)), 
            dep_child(nsubj,n(kingdom,4)),dep_child(punct,n(?,7)), 
            dep_parent(root,n(is,1)),node(n(is,1)),allen_srl, 
            srl( is, [
              o(V,[is]), 
              o(ARG1,[a,river]), 
              o(ARG2,[that,is,asian])]), flair,upos(verb),fner(o),fn('be.01')]), 
          w( a, [
            pos(dt), root(a),loc(3),lnks(5),txt("a"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(3,4))), 
            link(2,NP,r(NP,seg(3,8))), 
            link(3,VP,r(VP,seg(2,8))), 
            link(4,S,r(S,seg(2,8))), link(5,'SBAR',r('SBAR',seg(1,9))),flair,upos(det), 
            fner(o),fn('_')]), 
          w( river, [
            pos(nn), root(river),loc(4),lnks(5),txt("river"), 
            ner('TITLE'),truecase('LOWER'), 
            entitylink('River'),link(1,'NP',r('NP',seg(3,4))), 
            link(2,NP,r(NP,seg(3,8))), 
            link(3,VP,r(VP,seg(2,8))), 
            link(4,S,r(S,seg(2,8))), link(5,'SBAR',r('SBAR',seg(1,9))),flair, 
            upos(noun),fner(o),fn('_')]), 
          w( that, [
            pos(wdt), root(that),loc(5),lnks(6),txt("that"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(5,5))), 
            link(2,SBAR,r(SBAR,seg(5,8))), 
            link(3,NP,r(NP,seg(3,8))), 
            link(4,VP,r(VP,seg(2,8))), 
            link(5,S,r(S,seg(2,8))), link(6,'SBAR',r('SBAR',seg(1,9))),flair, 
            upos(pron),fner(o),fn('_')]), 
          w( is, [
            alt(pos(vbz)), root(be),loc(6),lnks(7),txt("is"), 
            truecase('LOWER'),link(1,'VP',r('VP',seg(6,8))), 
            link(2,S,r(S,seg(6,8))), 
            link(3,SBAR,r(SBAR,seg(5,8))), 
            link(4,NP,r(NP,seg(3,8))), 
            link(5,VP,r(VP,seg(2,8))), 
            link(6,S,r(S,seg(2,8))), link(7,'SBAR',r('SBAR',seg(1,9))),old_pos(aux), 
            pos(vb),allen_srl, 
            srl( is, [
              o(ARG1,[a,river]), o('R-ARG1',[that]),o('V',[is]), 
              o(ARG2,[asian])]), flair,upos(verb),fner(o),fn('be.01')]), 
          w( in, [
            pos(in), root(in),loc(7),lnks(8),txt("in"), 
            truecase('LOWER'),link(1,'PP',r('PP',seg(7,8))), 
            link(2,VP,r(VP,seg(6,8))), 
            link(3,S,r(S,seg(6,8))), 
            link(4,SBAR,r(SBAR,seg(5,8))), 
            link(5,NP,r(NP,seg(3,8))), 
            link(6,VP,r(VP,seg(2,8))), 
            link(7,S,r(S,seg(2,8))), link(8,'SBAR',r('SBAR',seg(1,9))),spacy,spos(in), 
            loc(5),dep_child(pobj,n(europe,6)), 
            dep_parent(prep,n(kingdom,4)),node(n(in,5))]), 
          w( asia, [
            alt(pos(nn)), root(asia),pos(nnp),loc(8),lnks(9), 
            txt("asia"),truecase('INIT_UPPER'), 
            link(1,NP,r(NP,seg(8,8))), 
            link(2,PP,r(PP,seg(7,8))), 
            link(3,VP,r(VP,seg(6,8))), 
            link(4,S,r(S,seg(6,8))), 
            link(5,SBAR,r(SBAR,seg(5,8))), 
            link(6,NP,r(NP,seg(3,8))), 
            link(7,VP,r(VP,seg(2,8))), 
            link(8,S,r(S,seg(2,8))), 
            link(9,SBAR,r(SBAR,seg(1,9)))]), 
          w( ?, [
            pos('.'), root(?),loc(9),lnks(1),txt("?"), 
            link(1,'SBAR',r('SBAR',seg(1,9))),spacy,spos('.'), 
            loc(7),dep_parent(punct,n(is,1)),node(n(?,7)), 
            flair,upos(punct),fner(o),fn('_')])]).
tmp : test80_result( "What is a river that is in asia ?", 
        sentence80, 
        whq( thing&Thing-B, 
          s( np(3+_207536,wh(thing&Thing-B),[]), 
             verb(aux+be(Be),be(Be),active,pres+fin,[],posP(PosP)), 
             [ arg( dirO(DirO), 
                 np( 3+sg, 
                   np_head(det(a),[],river), 
                   [ rel( thing&Thing-C, 
                       s( np(3+sg,wh(thing&Thing-C),[]), 
                          verb(aux+be(Be25),be(Be25),active,pres+fin,[],posP(PosP26)), 
                          [ arg(arg_pred(Arg27),prep_phrase(prep(in),np(3+sg,nameOf(asia,[]),[])))], 
                          []))]))], 
             []))).
tmp : test80_result( "What is a river that is in asia ?", 
        i_sentence, 
        question80( [thing&Thing-B], 
          pred( 
             quantV( identityQ(IdentityQ), 
               thing&Thing-B, '`'(true),'`'(true), 
               [], 
               thing&Thing-B), 
             identityQ(IdentityQ18), 
             subsumed_by(B,C), 
             [ quantV( det(a), 
                 thing&Thing-C, 
                 '`'(ti(river,C)), 
                 ( pred( 
                      quantV( identityQ(IdentityQ19), 
                        thing&Thing-C, '`'(true),'`'(true), 
                        [], 
                        thing&Thing-C), identityQ(IdentityQ20),true, 
                      [ '`'(trans_pred(thing,contain,D,C)), 
                        quantV( identityQ(IdentityQ21), 
                          thing&geo&continent-D, '`'(named(D,asia)),'`'(true), 
                          [], 
                          thing&geo&continent-D)]) & 
                   '`'(true)), 
                 [], 
                 thing&Thing-C)]))).
tmp : test80_result( "What is a river that is in asia ?", 
        qplan, 
        answer80([Subsumed_by]) :-  
          ^( By_River, 
            ( ti(river,By_River)  ,
              named(Contain_Asia,asia) , 
              trans_pred(thing,contain,Contain_Asia,By_River) , 
              subsumed_by(Subsumed_by,By_River)))).
tmp : test80_result( "What is a river ?", 
        into_lexical_segs, 
        [ w( what, [
            pos(wp), root(what),loc(1),lnks(2),txt("What"), 
            truecase('INIT_UPPER'),link(1,'NP',r('NP',seg(1,1))), 
            link(2,'SBAR',r('SBAR',seg(1,5))),flair,upos(pron), 
            fner(o),fn('_')]), 
          w( is, [
            alt(pos(vbz)), root(be),loc(2),lnks(2),txt("is"), 
            truecase('LOWER'),link(1,'S',r('S',seg(2,4))), 
            link(2,'SBAR',r('SBAR',seg(1,5))),old_pos(aux), 
            pos(vb),allen_srl, 
            srl( is, [
              o(ARG2,[What,river,that,is,in,asia]), o('V',[is]),o('ARG2',[a])]), flair,upos(verb),fner(o),fn('be.01')]), 
          w( a, [
            pos(dt), root(a),loc(3),lnks(3),txt("a"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(3,4))), 
            link(2,S,r(S,seg(2,4))), link(3,'SBAR',r('SBAR',seg(1,5))),flair,upos(det), 
            fner(o),fn('_')]), 
          w( river, [
            pos(nn), root(river),loc(4),lnks(3),txt("river"), 
            ner('TITLE'),truecase('LOWER'), 
            entitylink('River'),link(1,'NP',r('NP',seg(3,4))), 
            link(2,S,r(S,seg(2,4))), link(3,'SBAR',r('SBAR',seg(1,5))),flair, 
            upos(noun),fner(o),fn('_')]), 
          w( ?, [
            pos('.'), root(?),loc(5),lnks(1),txt("?"), 
            link(1,'SBAR',r('SBAR',seg(1,5))),flair, 
            upos(punct),fner(o),fn('_')])]).
tmp : test80_result( "What is a river ?", 
        sentence80, 
        whq( _224726-B, 
          s( np(3+_251204,wh(_251212-B),[]), 
             verb(aux+be(Be),be(Be),active,pres+fin,[],posP(PosP)), 
             [ arg(dirO(DirO),np(3+sg,np_head(det(a),[],river),[]))], 
             []))).
tmp : test80_result( "What is a river ?", 
        i_sentence, 
        question80( [_46422-B], 
          pred( 
             quantV(identityQ(IdentityQ),_74484-B,`(true),`(true),[],_74484-B), 
             identityQ(IdentityQ17), 
             subsumed_by(B,C), 
             [ quantV(det(a),_83180-C,`(ti(river,C)),`(true),[],_83180-C)]))).
tmp : test80_result( "What is a river ?", 
        qplan, 
        answer80([Subsumed_by]) :-  
          By_River^(ti(river,By_River),subsumed_by(Subsumed_by,By_River))).
tmp : test80_result( "What is the average area of the countries in each continent ?", 
        into_lexical_segs, 
        [ w( what, [
            pos(wp), root(what),loc(1),lnks(2),txt("What"), 
            truecase('INIT_UPPER'),link(1,'NP',r('NP',seg(1,1))), 
            link(2,'SBAR',r('SBAR',seg(1,12))),flair,upos(pron), 
            fner(o),fn('_')]), 
          w( is, [
            alt(pos(vbz)), root(be),loc(2),lnks(2),txt("is"), 
            truecase('LOWER'),link(1,'S',r('S',seg(2,11))), 
            link(2,'SBAR',r('SBAR',seg(1,12))),old_pos(aux), 
            pos(vbz),spacy,spos(vbz),loc(1), 
            tense(present),txt("Is"),dep_child(root,n(is,1)), 
            dep_child(expl,n(there,2)),dep_child(attr,n(country,6)), 
            dep_child(punct,n(?,10)),dep_parent(root,n(is,1)), 
            node(n(is,1)),allen_srl, 
            srl( is, [
              o(ARG2,[What]), 
              o(V,[is]), 
              o( 'ARG1', [
                the, average,area,of,the,countries, 
                in,each,continent])]), flair,upos(verb),fner(o),fn('be.01')]), 
          w( the, [
            pos(dt), root(the),loc(3),lnks(4),txt("the"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(3,5))), 
            link(2,NP,r(NP,seg(3,11))), 
            link(3,S,r(S,seg(2,11))), 
            link(4,SBAR,r(SBAR,seg(1,12)))]), 
          w( average, [
            pos(jj), root(average),loc(4),lnks(4), 
            txt("average"),truecase('LOWER'), 
            link(1,NP,r(NP,seg(3,5))), 
            link(2,NP,r(NP,seg(3,11))), 
            link(3,S,r(S,seg(2,11))), 
            link(4,SBAR,r(SBAR,seg(1,12)))]), 
          w( area, [
            pos(nn), root(area),loc(5),lnks(4),txt("area"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(3,5))), 
            link(2,NP,r(NP,seg(3,11))), 
            link(3,S,r(S,seg(2,11))), 
            link(4,SBAR,r(SBAR,seg(1,12)))]), 
          w( of, [
            pos(in), root(of),loc(6),lnks(4),txt("of"), 
            truecase('LOWER'),link(1,'PP',r('PP',seg(6,11))), 
            link(2,NP,r(NP,seg(3,11))), 
            link(3,S,r(S,seg(2,11))), 
            link(4,SBAR,r(SBAR,seg(1,12)))]), 
          w( the, [
            pos(dt), root(the),loc(7),lnks(6),txt("the"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(7,8))), 
            link(2,NP,r(NP,seg(7,11))), 
            link(3,PP,r(PP,seg(6,11))), 
            link(4,NP,r(NP,seg(3,11))), 
            link(5,S,r(S,seg(2,11))), 
            link(6,SBAR,r(SBAR,seg(1,12)))]), 
          w( countries, [
            pos(nns), root(country),loc(8),lnks(6), 
            txt("countries"),truecase('LOWER'), 
            link(1,NP,r(NP,seg(7,8))), 
            link(2,NP,r(NP,seg(7,11))), 
            link(3,PP,r(PP,seg(6,11))), 
            link(4,NP,r(NP,seg(3,11))), 
            link(5,S,r(S,seg(2,11))), 
            link(6,SBAR,r(SBAR,seg(1,12)))]), 
          w( in, [
            pos(in), root(in),loc(9),lnks(6),txt("in"), 
            truecase('LOWER'),link(1,'PP',r('PP',seg(9,11))), 
            link(2,NP,r(NP,seg(7,11))), 
            link(3,PP,r(PP,seg(6,11))), 
            link(4,NP,r(NP,seg(3,11))), 
            link(5,S,r(S,seg(2,11))), link(6,'SBAR',r('SBAR',seg(1,12))),spacy,spos(in), 
            loc(7),dep_child(pobj,n(continent,9)), 
            dep_parent(prep,n(country,6)),node(n(in,7))]), 
          w( each, [
            pos(dt), root(each),loc(10),lnks(7),txt("each"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(10,11))), 
            link(2,PP,r(PP,seg(9,11))), 
            link(3,NP,r(NP,seg(7,11))), 
            link(4,PP,r(PP,seg(6,11))), 
            link(5,NP,r(NP,seg(3,11))), 
            link(6,S,r(S,seg(2,11))), link(7,'SBAR',r('SBAR',seg(1,12))),spacy,spos(dt), 
            loc(8),dep_parent(det,n(continent,9)), 
            node(n(each,8))]), 
          w( continent, [
            pos(nn), root(continent),loc(11),lnks(7), 
            txt("continent"),truecase('LOWER'), 
            link(1,NP,r(NP,seg(10,11))), 
            link(2,PP,r(PP,seg(9,11))), 
            link(3,NP,r(NP,seg(7,11))), 
            link(4,PP,r(PP,seg(6,11))), 
            link(5,NP,r(NP,seg(3,11))), 
            link(6,S,r(S,seg(2,11))), link(7,'SBAR',r('SBAR',seg(1,12))),spacy,spos(nn), 
            loc(9),form(sg),dep_child(det,n(each,8)), 
            dep_parent(pobj,n(in,7)),node(n(continent,9))]), 
          w( ?, [
            pos('.'), root(?),loc(12),lnks(1),txt("?"), 
            link(1,'SBAR',r('SBAR',seg(1,12))),spacy, 
            spos('.'),loc(10),dep_parent(punct,n(is,1)), 
            node(n(?,10)),flair,upos(punct),fner(o), 
            fn('_')])]).
tmp : test80_result( "What is the average area of the countries in each continent ?", 
        sentence80, 
        whq( _31616-C, 
          s( np(3+_58196,wh(_58204-C),[]), 
             verb(aux+be(Be),be(Be),active,pres+fin,[],posP(PosP)), 
             [ arg( dirO(DirO), 
                 np( 3+sg, 
                   np_head(det(the(sg)),[adj(average)],area), 
                   [ prep_phrase( prep(of), 
                       np( 3+pl, 
                         np_head(det(the(pl)),[],country), 
                         [ prep_phrase(prep(in),np(3+sg,np_head(det(each),[],continent),[]))]))]))], 
             []))).
tmp : test80_result( "What is the average area of the countries in each continent ?", 
        i_sentence, 
        question80( [_139524-C], 
          pred( 
             quantV(identityQ(IdentityQ),_168954-C,`(true),`(true),[],_168954-C), 
             identityQ(IdentityQ17), 
             subsumed_by(C,D), 
             [ quantV( det(the(sg)), 
                 _183536-D, 
                 aggr(average,D,[F],`(measure_pred(thing,area,G,F)),`(true)), 
                 '`'(true), 
                 [ quantV( set(- (- + (- 0))), 
                     thing&Thing-G, '`'(ti(country,G)),'`'(true), 
                     [ ( quantV( det(each), 
                           thing&geo&continent-B, '`'(ti(continent,B)),'`'(true), 
                           [], 
                           thing&geo&continent-B) & 
                         '`'(trans_pred(thing,contain,B,G)))], 
                     thing&Thing-G)], 
                 _179014-D)]))).
tmp : test80_result( "What is the average area of the countries in each continent ?", 
        qplan, 
        answer80([Contain_Continent,Subsumed_by]) :- 
          ti(continent,Contain_Continent) , 
          ^( By_Aggregate80, 
            ( ^( SetOf_Average, 
                ( setOf( Measure:[Country_Area], 
                    ( measure_pred(thing,area,Country_Area,Measure)  ,
                      ti(country,Country_Area) , 
                      trans_pred(thing,contain,Contain_Continent,Country_Area)), 
                    SetOf_Average) , 
                  aggregate80(average,SetOf_Average,By_Aggregate80))) , 
              subsumed_by(Subsumed_by,By_Aggregate80)))).
tmp : test80_result( "What is the capital of upper volta ?", 
        into_lexical_segs, 
        [ w( what, [
            pos(wp), root(what),loc(1),lnks(2),txt("What"), 
            truecase('INIT_UPPER'),link(1,'NP',r('NP',seg(1,1))), 
            link(2,'SBAR',r('SBAR',seg(1,8))),flair,upos(pron), 
            fner(o),fn('_')]), 
          w( is, [
            alt(pos(vbz)), root(be),loc(2),lnks(2),txt("is"), 
            truecase('LOWER'),link(1,'S',r('S',seg(2,7))), 
            link(2,'SBAR',r('SBAR',seg(1,8))),old_pos(aux), 
            pos(vb),allen_srl, 
            srl( is, [
              o(ARG2,[What]), 
              o(V,[is]), 
              o(ARG1,[the,capital,of,upper,volta])]), flair,upos(verb),fner(o),fn('be.01')]), 
          w( the, [
            pos(dt), root(the),loc(3),lnks(4),txt("the"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(3,4))), 
            link(2,NP,r(NP,seg(3,7))), 
            link(3,S,r(S,seg(2,7))), link(4,'SBAR',r('SBAR',seg(1,8))),flair,upos(det), 
            fner(o),fn('_')]), 
          w( capital, [
            pos(nn), root(capital),loc(4),lnks(4), 
            txt("capital"),truecase('LOWER'), 
            link(1,NP,r(NP,seg(3,4))), 
            link(2,NP,r(NP,seg(3,7))), 
            link(3,S,r(S,seg(2,7))), 
            link(4,SBAR,r(SBAR,seg(1,8)))]), 
          w( of, [
            pos(in), root(of),loc(5),lnks(4),txt("of"), 
            truecase('LOWER'),link(1,'PP',r('PP',seg(5,7))), 
            link(2,NP,r(NP,seg(3,7))), 
            link(3,S,r(S,seg(2,7))), link(4,'SBAR',r('SBAR',seg(1,8))),flair,upos(adp), 
            fner(o),fn('_')]), 
          w( upper, [
            pos(jj), root(upper),loc(6),lnks(5),txt("upper"), 
            ner('COUNTRY'),truecase('INIT_UPPER'), 
            link(1,NP,r(NP,seg(6,7))), 
            link(2,PP,r(PP,seg(5,7))), 
            link(3,NP,r(NP,seg(3,7))), 
            link(4,S,r(S,seg(2,7))), 
            link(5,SBAR,r(SBAR,seg(1,8)))]), 
          w( volta, [
            pos(nn), root(volta),loc(7),lnks(5),txt("volta"), 
            ner('COUNTRY'),truecase('INIT_UPPER'), 
            link(1,NP,r(NP,seg(6,7))), 
            link(2,PP,r(PP,seg(5,7))), 
            link(3,NP,r(NP,seg(3,7))), 
            link(4,S,r(S,seg(2,7))), 
            link(5,SBAR,r(SBAR,seg(1,8)))]), 
          w( ?, [
            pos('.'), root(?),loc(8),lnks(1),txt("?"), 
            link(1,'SBAR',r('SBAR',seg(1,8))),flair, 
            upos(punct),fner(o),fn('_')])]).
tmp : test80_result( "What is the capital of upper volta ?", 
        sentence80, 
        whq( thing&City&city-B, 
          s( np(3+_195438,wh(thing&City&city-B),[]), 
             verb(aux+be(Be),be(Be),active,pres+fin,[],posP(PosP)), 
             [ arg( dirO(DirO), 
                 np(3+sg,np_head(det(the(sg)),[],capital),[prep_phrase(prep(of),np(3+sg,nameOf(upper_volta,[]),[]))]))], 
             []))).
tmp : test80_result( "What is the capital of upper volta ?", 
        i_sentence, 
        question80( [thing&City&city-B], 
          pred( 
             quantV( identityQ(IdentityQ), 
               thing&City&city-B, '`'(true),'`'(true), 
               [], 
               thing&City&city-B), 
             identityQ(IdentityQ18), 
             subsumed_by(B,C), 
             [ quantV( det(the(sg)), 
                 thing&City&city-C, 
                 '`'(specific_pred(thing,nation_capital,D,C)), 
                 '`'(true), 
                 [ quantV( identityQ(IdentityQ19), 
                     thing&geo&country-D, '`'(named(D,upper_volta)),'`'(true), 
                     [], 
                     thing&geo&country-D)], 
                 thing&City&city-C)]))).
tmp : test80_result( "What is the capital of upper volta ?", 
        qplan, 
        answer80([Subsumed_by]) :-  
          ^( By_Specific, 
            ( named(Nation_capital_Upper_volta,upper_volta)  ,
              specific_pred(thing,nation_capital,Nation_capital_Upper_volta,By_Specific) , 
              subsumed_by(Subsumed_by,By_Specific)))).
tmp : test80_result( "What is the ocean that borders african countries and that borders asian countries ?", 
        into_lexical_segs, 
        [ w( what, [
            pos(wp), root(what),loc(1),lnks(2),txt("What"), 
            truecase('INIT_UPPER'),link(1,'NP',r('NP',seg(1,1))), 
            link(2,'SBAR',r('SBAR',seg(1,14))),flair,upos(pron), 
            fner(o),fn('_')]), 
          w( is, [
            alt(pos(vbz)), root(be),loc(2),lnks(2),txt("is"), 
            truecase('LOWER'),link(1,'S',r('S',seg(2,13))), 
            link(2,'SBAR',r('SBAR',seg(1,14))),old_pos(aux), 
            pos(vbz),spacy,spos(vbz),loc(1), 
            tense(present),txt("Is"),dep_child(root,n(is,1)), 
            dep_child(expl,n(there,2)),dep_child(attr,n(ocean,4)), 
            dep_child(punct,n(?,11)),dep_parent(root,n(is,1)), 
            node(n(is,1)),allen_srl, 
            srl( is, [
              o(ARG2,[What]), 
              o(V,[is]), 
              o( 'ARG1', [
                the, ocean,that,borders,african, 
                countries,and,that,borders, 
                asian,countries])]), flair,upos(verb),fner(o),fn('be.01')]), 
          w( the, [
            pos(dt), root(the),loc(3),lnks(3),txt("the"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(3,13))), 
            link(2,S,r(S,seg(2,13))), link(3,'SBAR',r('SBAR',seg(1,14))),flair, 
            upos(det),fner(o),fn('_')]), 
          w( ocean, [
            pos(nn), root(ocean),loc(4),lnks(3),txt("ocean"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(3,13))), 
            link(2,S,r(S,seg(2,13))), link(3,'SBAR',r('SBAR',seg(1,14))),spacy,spos(nn), 
            form(sg),dep_child(det,n(some,3)), 
            dep_child(relcl,n(border,8)),dep_parent(attr,n(is,1)), 
            node(n(ocean,4))]), 
          w( that, [
            alt(pos(wdt)), root(that),loc(5),lnks(5),txt("that"), 
            truecase('LOWER'),link(1,'SBAR',r('SBAR',seg(5,8))), 
            link(2,SBAR,r(SBAR,seg(5,13))), 
            link(3,NP,r(NP,seg(3,13))), 
            link(4,S,r(S,seg(2,13))), link(5,'SBAR',r('SBAR',seg(1,14))),old_pos(in), 
            pos(wdt),spacy,spos(wdt), 
            dep_parent(nsubj,n(border,8)),node(n(that,5))]), 
          w( borders, [
            alt(pos(vbz)), root(border),loc(6),lnks(7),txt("borders"), 
            truecase('LOWER'),link(1,'VP',r('VP',seg(6,8))), 
            link(2,S,r(S,seg(6,8))), 
            link(3,SBAR,r(SBAR,seg(5,8))), 
            link(4,SBAR,r(SBAR,seg(5,13))), 
            link(5,NP,r(NP,seg(3,13))), 
            link(6,S,r(S,seg(2,13))), link(7,'SBAR',r('SBAR',seg(1,14))),old_pos(nns), 
            pos(vb),allen_srl, 
            srl( borders, [
              o(ARG1,[the,ocean]), o('R-ARG1',[that]),o('V',[borders]), 
              o(ARG2,[african,countries])])]), 
          w( african, [
            pos(jj), root(african),loc(7),lnks(8), 
            txt("african"),ner('NATIONALITY'), 
            truecase('INIT_UPPER'),entitylink('Africa'), 
            link(1,NP,r(NP,seg(7,8))), 
            link(2,VP,r(VP,seg(6,8))), 
            link(3,S,r(S,seg(6,8))), 
            link(4,SBAR,r(SBAR,seg(5,8))), 
            link(5,SBAR,r(SBAR,seg(5,13))), 
            link(6,NP,r(NP,seg(3,13))), 
            link(7,S,r(S,seg(2,13))), 
            link(8,SBAR,r(SBAR,seg(1,14)))]), 
          w( countries, [
            pos(nns), root(country),loc(8),lnks(8), 
            txt("countries"),truecase('LOWER'), 
            link(1,NP,r(NP,seg(7,8))), 
            link(2,VP,r(VP,seg(6,8))), 
            link(3,S,r(S,seg(6,8))), 
            link(4,SBAR,r(SBAR,seg(5,8))), 
            link(5,SBAR,r(SBAR,seg(5,13))), 
            link(6,NP,r(NP,seg(3,13))), 
            link(7,S,r(S,seg(2,13))), 
            link(8,SBAR,r(SBAR,seg(1,14)))]), 
          w( and, [
            pos(cc), root(and),loc(9),lnks(4),txt("and"), 
            truecase('LOWER'),link(1,'SBAR',r('SBAR',seg(5,13))), 
            link(2,NP,r(NP,seg(3,13))), 
            link(3,S,r(S,seg(2,13))), 
            link(4,SBAR,r(SBAR,seg(1,14)))]), 
          w( that, [
            pos(in), root(that),loc(10),lnks(5),txt("that"), 
            truecase('LOWER'),link(1,'SBAR',r('SBAR',seg(10,13))), 
            link(2,SBAR,r(SBAR,seg(5,13))), 
            link(3,NP,r(NP,seg(3,13))), 
            link(4,S,r(S,seg(2,13))), 
            link(5,SBAR,r(SBAR,seg(1,14)))]), 
          w( borders, [
            root(border), loc(11),lnks(7),txt("borders"), 
            truecase('LOWER'),corefed,#(5), 
            txt(["borders"]),type('NOMINAL'), 
            numb('PLURAL'),gender('UNKNOWN'), 
            animacy('INANIMATE'),repm(@(true)), 
            link(1,VP,r(VP,seg(11,13))), 
            link(2,S,r(S,seg(11,13))), 
            link(3,SBAR,r(SBAR,seg(10,13))), 
            link(4,SBAR,r(SBAR,seg(5,13))), 
            link(5,NP,r(NP,seg(3,13))), 
            link(6,S,r(S,seg(2,13))), link(7,'SBAR',r('SBAR',seg(1,14))),old_pos(nns), 
            pos(vb),allen_srl, 
            srl( borders, [
              o(ARG0,[the,ocean]), o('R-ARG0',[that]),o('V',[borders]), 
              o(ARG1,[asian,countries])])]), 
          w( asian, [
            pos(jj), root(asian),loc(12),lnks(8),txt("asian"), 
            ner('NATIONALITY'),truecase('INIT_UPPER'), 
            entitylink('Asian'),link(1,'NP',r('NP',seg(12,13))), 
            link(2,VP,r(VP,seg(11,13))), 
            link(3,S,r(S,seg(11,13))), 
            link(4,SBAR,r(SBAR,seg(10,13))), 
            link(5,SBAR,r(SBAR,seg(5,13))), 
            link(6,NP,r(NP,seg(3,13))), 
            link(7,S,r(S,seg(2,13))), 
            link(8,SBAR,r(SBAR,seg(1,14)))]), 
          w( countries, [
            pos(nns), root(country),loc(13),lnks(8), 
            txt("countries"),truecase('LOWER'), 
            link(1,NP,r(NP,seg(12,13))), 
            link(2,VP,r(VP,seg(11,13))), 
            link(3,S,r(S,seg(11,13))), 
            link(4,SBAR,r(SBAR,seg(10,13))), 
            link(5,SBAR,r(SBAR,seg(5,13))), 
            link(6,NP,r(NP,seg(3,13))), 
            link(7,S,r(S,seg(2,13))), 
            link(8,SBAR,r(SBAR,seg(1,14)))]), 
          w( ?, [
            pos('.'), root(?),loc(14),lnks(1),txt("?"), 
            link(1,'SBAR',r('SBAR',seg(1,14))),spacy, 
            spos('.'),loc(11),dep_parent(punct,n(is,1)), 
            node(n(?,11)),flair,upos(punct),fner(o), 
            fn('_')])]).
tmp : test80_result( "What is the ocean that borders african countries and that borders asian countries ?", 
        sentence80, 
        whq( thing&_227614&_227616-B, 
          s( np(3+_64704,wh(thing&_64724&_64726-B),[]), 
             verb(aux+be(Be),be(Be),active,pres+fin,[],posP(PosP)), 
             [ arg( dirO(DirO), 
                 np( 3+sg, 
                   np_head(det(the(sg)),[],ocean), 
                   [ conj( and, 
                       rel( thing&_69296&_69298-C, 
                         s( np(3+sg,wh(thing&_102170&_102172-C),[]), 
                            verb(main+tv,border,active,pres+fin,[],posP(PosP28)), 
                            [ arg(dirO(DirO29),np(3+pl,np_head(generic(Generic),[adj(african)],country),[]))], 
                            [])), 
                       rel( thing&_108742&_108744-C, 
                         s( np(3+sg,wh(thing&_141620&_141622-C),[]), 
                            verb(main+tv,border,active,pres+fin,[],posP(PosP31)), 
                            [ arg(dirO(DirO32),np(3+pl,np_head(generic(Generic33),[adj(asian)],country),[]))], 
                            [])))]))], 
             []))).
tmp : test80_result( "What is the ocean that borders african countries and that borders asian countries ?", 
        i_sentence, 
        question80( [thing&_29188&_29190-B], 
          pred( 
             quantV( identityQ(IdentityQ), 
               thing&_107170&_107172-B, '`'(true),'`'(true), 
               [], 
               thing&_100778&_100780-B), 
             identityQ(IdentityQ17), 
             subsumed_by(B,C), 
             [ quantV( det(the(sg)), 
                 thing&_158482&_158484-C, 
                 '`'(ti(ocean,C)), 
                 ( conj( and, 
                     ( pred( 
                          quantV( identityQ(IdentityQ18), 
                            thing&_194008&_194010-C, '`'(true),'`'(true), 
                            [], 
                            thing&_187616&_187618-C), 
                          identityQ(IdentityQ19), 
                          generic_pred(thing,border,C,D), 
                          [ quantV( generic(Generic), 
                              thing&_217758&_217760-D, 
                              '`'(ti(country,D)), 
                              '`'(ti(african,D))&'`'(true), 
                              [], 
                              thing&_211366&_211368-D)]) & 
                       '`'(true)), 
                     [], 
                     ( pred( 
                          quantV( identityQ(IdentityQ21), 
                            thing&_244154&_244156-C, '`'(true),'`'(true), 
                            [], 
                            thing&_237762&_237764-C), 
                          identityQ(IdentityQ22), 
                          generic_pred(thing,border,C,E), 
                          [ quantV( generic(Generic23), 
                              thing&_16788&_16790-E, 
                              '`'(ti(country,E)), 
                              '`'(ti(asian,E))&'`'(true), 
                              [], 
                              thing&_10396&_10398-E)]) & 
                       '`'(true)), 
                     []) & 
                   '`'(true)), 
                 [], 
                 thing&_8640&_8642-C)]))).
tmp : test80_result( "What is the ocean that borders african countries and that borders asian countries ?", 
        qplan, 
        answer80([Subsumed_by]) :-  
          ^( By_Border_Ocean, 
            ( ti(ocean,By_Border_Ocean)  ,
              ^( Generic_African_Country, 
                ( ti(country,Generic_African_Country)  ,
                  ti(african,Generic_African_Country) , 
                  generic_pred(thing,border,By_Border_Ocean,Generic_African_Country))) , 
              ^( Generic_Asian_Country20, 
                ( ti(country,Generic_Asian_Country20)  ,
                  ti(asian,Generic_Asian_Country20) , 
                  generic_pred(thing,border,By_Border_Ocean,Generic_Asian_Country20))) , 
              subsumed_by(Subsumed_by,By_Border_Ocean)))).
tmp : test80_result( "What is the total area of countries south of the equator and not in australasia ?", 
        into_lexical_segs, 
        [ w( what, [
            pos(wp), root(what),loc(1),lnks(2),txt("What"), 
            truecase('INIT_UPPER'),link(1,'NP',r('NP',seg(1,1))), 
            link(2,'SBAR',r('SBAR',seg(1,16))),flair,upos(pron), 
            fner(o),fn('_')]), 
          w( is, [
            alt(pos(vbz)), root(be),loc(2),lnks(2),txt("is"), 
            truecase('LOWER'),link(1,'S',r('S',seg(2,15))), 
            link(2,'SBAR',r('SBAR',seg(1,16))),old_pos(aux), 
            pos(vb),allen_srl, 
            srl( is, [
              o(V,[is]), 
              o(ARG1,[the,ocean]), 
              o( 'ARG2', [
                that, borders,african,countries,and, 
                that,borders,asian,countries])]), flair,upos(verb),fner(o),fn('be.01')]), 
          w( the, [
            pos(dt), root(the),loc(3),lnks(4),txt("the"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(3,5))), 
            link(2,NP,r(NP,seg(3,15))), 
            link(3,S,r(S,seg(2,15))), link(4,'SBAR',r('SBAR',seg(1,16))),flair, 
            upos(det),fner(o),fn('_')]), 
          w( total, [
            pos(jj), root(total),loc(4),lnks(4),txt("total"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(3,5))), 
            link(2,NP,r(NP,seg(3,15))), 
            link(3,S,r(S,seg(2,15))), 
            link(4,SBAR,r(SBAR,seg(1,16)))]), 
          w( area, [
            pos(nn), root(area),loc(5),lnks(4),txt("area"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(3,5))), 
            link(2,NP,r(NP,seg(3,15))), 
            link(3,S,r(S,seg(2,15))), 
            link(4,SBAR,r(SBAR,seg(1,16)))]), 
          w( of, [
            pos(in), root(of),loc(6),lnks(4),txt("of"), 
            truecase('LOWER'),link(1,'PP',r('PP',seg(6,15))), 
            link(2,NP,r(NP,seg(3,15))), 
            link(3,S,r(S,seg(2,15))), 
            link(4,SBAR,r(SBAR,seg(1,16)))]), 
          w( countries, [
            pos(nns), root(country),loc(7),lnks(6), 
            txt("countries"),truecase('LOWER'), 
            link(1,NP,r(NP,seg(7,7))), 
            link(2,NP,r(NP,seg(7,15))), 
            link(3,PP,r(PP,seg(6,15))), 
            link(4,NP,r(NP,seg(3,15))), 
            link(5,S,r(S,seg(2,15))), link(6,'SBAR',r('SBAR',seg(1,16))),flair, 
            upos(noun),fner(o),fn('_')]), 
          w( south, [
            pos(rb), root(south),loc(8),lnks(7),txt("south"), 
            truecase('LOWER'),link(1,'ADVP',r('ADVP',seg(8,11))), 
            link(2,UCP,r(UCP,seg(8,15))), 
            link(3,NP,r(NP,seg(7,15))), 
            link(4,PP,r(PP,seg(6,15))), 
            link(5,NP,r(NP,seg(3,15))), 
            link(6,S,r(S,seg(2,15))), 
            link(7,SBAR,r(SBAR,seg(1,16)))]), 
          w( of, [
            pos(in), root(of),loc(9),lnks(8),txt("of"), 
            truecase('LOWER'),link(1,'PP',r('PP',seg(9,11))), 
            link(2,ADVP,r(ADVP,seg(8,11))), 
            link(3,UCP,r(UCP,seg(8,15))), 
            link(4,NP,r(NP,seg(7,15))), 
            link(5,PP,r(PP,seg(6,15))), 
            link(6,NP,r(NP,seg(3,15))), 
            link(7,S,r(S,seg(2,15))), 
            link(8,SBAR,r(SBAR,seg(1,16)))]), 
          w( the, [
            pos(dt), root(the),loc(10),lnks(9),txt("the"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(10,11))), 
            link(2,PP,r(PP,seg(9,11))), 
            link(3,ADVP,r(ADVP,seg(8,11))), 
            link(4,UCP,r(UCP,seg(8,15))), 
            link(5,NP,r(NP,seg(7,15))), 
            link(6,PP,r(PP,seg(6,15))), 
            link(7,NP,r(NP,seg(3,15))), 
            link(8,S,r(S,seg(2,15))), 
            link(9,SBAR,r(SBAR,seg(1,16)))]), 
          w( equator, [
            pos(nn), root(equator),loc(11),lnks(9), 
            txt("equator"),truecase('LOWER'), 
            link(1,NP,r(NP,seg(10,11))), 
            link(2,PP,r(PP,seg(9,11))), 
            link(3,ADVP,r(ADVP,seg(8,11))), 
            link(4,UCP,r(UCP,seg(8,15))), 
            link(5,NP,r(NP,seg(7,15))), 
            link(6,PP,r(PP,seg(6,15))), 
            link(7,NP,r(NP,seg(3,15))), 
            link(8,S,r(S,seg(2,15))), 
            link(9,SBAR,r(SBAR,seg(1,16)))]), 
          w( and, [
            pos(cc), root(and),loc(12),lnks(6),txt("and"), 
            truecase('LOWER'),link(1,'UCP',r('UCP',seg(8,15))), 
            link(2,NP,r(NP,seg(7,15))), 
            link(3,PP,r(PP,seg(6,15))), 
            link(4,NP,r(NP,seg(3,15))), 
            link(5,S,r(S,seg(2,15))), link(6,'SBAR',r('SBAR',seg(1,16))),flair, 
            upos(cconj),fner(o),fn('_')]), 
          w( not, [
            pos(rb), root(not),loc(13),lnks(7),txt("not"), 
            truecase('LOWER'),link(1,'PP',r('PP',seg(13,15))), 
            link(2,UCP,r(UCP,seg(8,15))), 
            link(3,NP,r(NP,seg(7,15))), 
            link(4,PP,r(PP,seg(6,15))), 
            link(5,NP,r(NP,seg(3,15))), 
            link(6,S,r(S,seg(2,15))), 
            link(7,SBAR,r(SBAR,seg(1,16)))]), 
          w( in, [
            pos(in), root(in),loc(14),lnks(7),txt("in"), 
            truecase('LOWER'),link(1,'PP',r('PP',seg(13,15))), 
            link(2,UCP,r(UCP,seg(8,15))), 
            link(3,NP,r(NP,seg(7,15))), 
            link(4,PP,r(PP,seg(6,15))), 
            link(5,NP,r(NP,seg(3,15))), 
            link(6,S,r(S,seg(2,15))), 
            link(7,SBAR,r(SBAR,seg(1,16)))]), 
          w( australasia, [
            pos(nn), root(australasia),loc(15),lnks(8), 
            txt("australasia"),ner('LOCATION'), 
            truecase('INIT_UPPER'),link(1,'NP',r('NP',seg(15,15))), 
            link(2,PP,r(PP,seg(13,15))), 
            link(3,UCP,r(UCP,seg(8,15))), 
            link(4,NP,r(NP,seg(7,15))), 
            link(5,PP,r(PP,seg(6,15))), 
            link(6,NP,r(NP,seg(3,15))), 
            link(7,S,r(S,seg(2,15))), 
            link(8,SBAR,r(SBAR,seg(1,16)))]), 
          w( ?, [
            pos('.'), root(?),loc(16),lnks(1),txt("?"), 
            link(1,'SBAR',r('SBAR',seg(1,16))),flair, 
            upos(punct),fner(o),fn('_')])]).
tmp : test80_result( "What is the total area of countries south of the equator and not in australasia ?", 
        sentence80, 
        whq( _227288-B, 
          s( np(3+_254166,wh(_254174-B),[]), 
             verb(aux+be(Be),be(Be),active,pres+fin,[],posP(PosP)), 
             [ arg( dirO(DirO), 
                 np( 3+sg, 
                   np_head(det(the(sg)),[adj(total)],area), 
                   [ prep_phrase( prep(of), 
                       np( 3+pl, 
                         np_head(generic(Generic29),[],country), 
                         [ conj( and, 
                             reduced_rel( thing&Thing-F, 
                               s( np(3+pl,wh(thing&Thing-F),[]), 
                                  verb(aux+be(PosP_Be30),be(PosP_Be30),active,pres+fin,[],posP(PosP_Be30)), 
                                  [ arg(arg_pred(Arg32),prep_phrase(prep(cp(south,of)),np(3+sg,nameOf(equator,[]),[])))], 
                                  [])), 
                             reduced_rel( thing&Thing-F, 
                               s( np(3+pl,wh(thing&Thing-F),[]), 
                                  verb(aux+be(NegP_Be33),be(NegP_Be33),active,pres+fin,[],negP(NegP_Be33)), 
                                  [ arg(arg_pred(Arg35),prep_phrase(prep(in),np(3+sg,nameOf(australasia,[]),[])))], 
                                  [])))]))]))], 
             []))).
tmp : test80_result( "What is the total area of countries south of the equator and not in australasia ?", 
        i_sentence, 
        question80( [_144348-B], 
          pred( 
             quantV(identityQ(IdentityQ),_185772-B,`(true),`(true),[],_185772-B), 
             identityQ(IdentityQ17), 
             subsumed_by(B,C), 
             [ quantV( det(the(sg)), 
                 _220542-C, 
                 aggr(total,C,[E],`(measure_pred(thing,area,F,E)),`(true)), 
                 '`'(true), 
                 [ quantV( generic(Generic), 
                     thing&Thing-F, 
                     '`'(ti(country,F)), 
                     ( conj( and, 
                         '`'(true), 
                         [ pred( 
                              quantV( identityQ(IdentityQ19), 
                                thing&Thing-F, '`'(true),'`'(true), 
                                [], 
                                thing&Thing-F), identityQ(IdentityQ20),true, 
                              [ `(ordering_pred(thing,cp(south,of),F,G)), 
                                quantV( identityQ(IdentityQ21), 
                                  thing&Circle_of_latitude&circle_of_latitude-G, '`'(named(G,equator)),'`'(true), 
                                  [], 
                                  thing&Circle_of_latitude&circle_of_latitude-G)])], 
                         '`'(true), 
                         [ pred( 
                              quantV( identityQ(IdentityQ22), 
                                thing&Thing-F, '`'(true),'`'(true), 
                                [], 
                                thing&Thing-F), notP,true, 
                              [ '`'(trans_pred(thing,contain,H,F)), 
                                quantV( identityQ(IdentityQ23), 
                                  thing&geo&continent-H, '`'(named(H,australasia)),'`'(true), 
                                  [], 
                                  thing&geo&continent-H)])]) & 
                       '`'(true)), 
                     [], 
                     thing&Thing-F)], 
                 _9096-C)]))).
tmp : test80_result( "What is the total area of countries south of the equator and not in australasia ?", 
        qplan, 
        answer80([Subsumed_by]) :-  
          ^( By_Aggregate80, 
            ( ^( SetOf_Total, 
                ( setOf( Measure:[Cp_Country_Area], 
                    ( measure_pred(thing,area,Cp_Country_Area,Measure)  ,
                      ti(country,Cp_Country_Area) , 
                      named(Ordering_Equator,equator) , 
                      ordering_pred(thing,cp(south,of),Cp_Country_Area,Ordering_Equator) , 
                      \+( ( named(Contain_Australasia,australasia) , 
                            trans_pred(thing,contain,Contain_Australasia,Cp_Country_Area)))), 
                    SetOf_Total) , 
                  aggregate80(total,SetOf_Total,By_Aggregate80))) , 
              subsumed_by(Subsumed_by,By_Aggregate80)))).
tmp : test80_result( "What percentage of countries border each ocean ?", 
        into_lexical_segs, 
        [ w( what, [
            pos(wdt), root(what),loc(1),lnks(4),txt("What"), 
            truecase('INIT_UPPER'),link(1,'NP',r('NP',seg(1,2))), 
            link(2,NP,r(NP,seg(1,4))), 
            link(3,SBAR,r(SBAR,seg(1,8))), link(4,'CORENLP',r('CORENLP',seg(1,8))),flair, 
            upos(pron),fner(o),fn('_')]), 
          w( percentage, [
            pos(nn), root(percentage),loc(2),lnks(4), 
            txt("percentage"),truecase('LOWER'), 
            link(1,NP,r(NP,seg(1,2))), 
            link(2,NP,r(NP,seg(1,4))), 
            link(3,SBAR,r(SBAR,seg(1,8))), 
            link(4,CORENLP,r(CORENLP,seg(1,8)))]), 
          w( of, [
            pos(in), root(of),loc(3),lnks(4),txt("of"), 
            truecase('LOWER'),link(1,'PP',r('PP',seg(3,4))), 
            link(2,NP,r(NP,seg(1,4))), 
            link(3,SBAR,r(SBAR,seg(1,8))), link(4,'CORENLP',r('CORENLP',seg(1,8))),flair, 
            upos(adp),fner(o),fn('_')]), 
          w( countries, [
            pos(nns), root(country),loc(4),lnks(5), 
            txt("countries"),truecase('LOWER'),corefed, 
            #(1),txt(["countries"]),type('NOMINAL'), 
            numb('PLURAL'),gender('UNKNOWN'), 
            animacy('INANIMATE'),repm(@(true)), 
            link(1,NP,r(NP,seg(4,4))), 
            link(2,PP,r(PP,seg(3,4))), 
            link(3,NP,r(NP,seg(1,4))), 
            link(4,SBAR,r(SBAR,seg(1,8))), link(5,'CORENLP',r('CORENLP',seg(1,8))),flair, 
            upos(noun),fner(o),fn('_')]), 
          w( border, [
            alt(pos(vbp)), root(border),pos(vb),loc(5),lnks(4), 
            txt("border"),truecase('LOWER'), 
            link(1,VP,r(VP,seg(5,7))), 
            link(2,S,r(S,seg(5,7))), 
            link(3,SBAR,r(SBAR,seg(1,8))), link(4,'CORENLP',r('CORENLP',seg(1,8))),allen_srl, 
            srl( border, [
              o(ARG2,[What,percentage,of,countries]), 
              o(V,[border]), 
              o(ARG1,[each,ocean])])]), 
          w( each, [
            pos(dt), root(each),loc(6),lnks(5),txt("each"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(6,7))), 
            link(2,VP,r(VP,seg(5,7))), 
            link(3,S,r(S,seg(5,7))), 
            link(4,SBAR,r(SBAR,seg(1,8))), 
            link(5,CORENLP,r(CORENLP,seg(1,8)))]), 
          w( ocean, [
            pos(nn), root(ocean),loc(7),lnks(5),txt("ocean"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(6,7))), 
            link(2,VP,r(VP,seg(5,7))), 
            link(3,S,r(S,seg(5,7))), 
            link(4,SBAR,r(SBAR,seg(1,8))), 
            link(5,CORENLP,r(CORENLP,seg(1,8)))]), 
          w( ?, [
            pos('.'), root(?),loc(8),lnks(2),txt("?"), 
            link(1,SBAR,r(SBAR,seg(1,8))), link(2,'CORENLP',r('CORENLP',seg(1,8))),spacy, 
            spos('.'),loc(6),dep_parent(punct,n(flows,3)), 
            node(n(?,6)),flair,upos(punct),fner(o), 
            fn('_')])]).
tmp : test80_result( "What percentage of countries border each ocean ?", 
        sentence80, 
        whq( _59170-C, 
          s( np( 3+pl, 
               np_head(wh_det(_109840,_109846-C),[],percentage), 
               [ prep_phrase(prep(of),np(3+pl,np_head(generic(Generic21),[],country),[]))]), 
             verb(main+tv,border,active,pres+fin,[],posP(PosP)), 
             [ arg(dirO(DirO),np(3+sg,np_head(det(each),[],ocean),[]))], 
             []))).
tmp : test80_result( "What percentage of countries border each ocean ?", 
        i_sentence, 
        question80( [_214124-C], 
          pred( 
             quantV( proportion(_64284-C), 
               thing&_68104&_68106-E, '`'(true),'`'(true), 
               [ quantV( identityQ(IdentityQ), 
                   thing&_90864&_90866-E, '`'(ti(country,E)),'`'(true), 
                   [], 
                   thing&_84472&_84474-E)], 
               thing&_58544&_58546-G), 
             identityQ(IdentityQ17), 
             generic_pred(thing,border,G,B), 
             [ quantV( det(each), 
                 thing&_114294&_114296-B, '`'(ti(ocean,B)),'`'(true), 
                 [], 
                 thing&_107904&_107906-B)]))).
tmp : test80_result( "What percentage of countries border each ocean ?", 
        qplan, 
        answer80([Generic_Ocean,Ratio28]) :- 
          ti(ocean,Generic_Ocean) , 
          ^( SetOf_One_of, 
            ( setOf(Ti_Country,ti(country,Ti_Country),SetOf_One_of) , 
              ^( Numberof_Ratio22, 
                ( numberof( Of_Border, 
                    ( one_of(SetOf_One_of,Of_Border) , 
                      generic_pred(thing,border,Of_Border,Generic_Ocean)), 
                    Numberof_Ratio22) , 
                  ^( Size_Ratio, 
                    ( card(SetOf_One_of,Size_Ratio) , 
                      ratio(Numberof_Ratio22,Size_Ratio,Ratio28)))))))).
tmp : test80_result( "What rivers are there ?", 
        into_lexical_segs, 
        [ w( what, [
            alt(pos(wdt)), root(what),pos(wp),loc(1),lnks(2), 
            txt("What"),truecase('INIT_UPPER'), 
            link(1,NP,r(NP,seg(1,2))), link(2,'SBAR',r('SBAR',seg(1,5))),flair,upos(pron), 
            fner(o),fn('_')]), 
          w( rivers, [
            pos(nns), root(river),loc(2),lnks(2),txt("rivers"), 
            truecase('LOWER'),corefed,#(1), 
            txt(["rivers"]),type('NOMINAL'), 
            numb('PLURAL'),gender('UNKNOWN'), 
            animacy('INANIMATE'),repm(@(true)), 
            link(1,NP,r(NP,seg(1,2))), 
            link(2,SBAR,r(SBAR,seg(1,5)))]), 
          w( are, [
            alt(pos(vbp)), root(be),loc(3),lnks(3),txt("are"), 
            truecase('LOWER'),link(1,'VP',r('VP',seg(3,4))), 
            link(2,S,r(S,seg(3,4))), link(3,'SBAR',r('SBAR',seg(1,5))),old_pos(aux), 
            pos(vb),allen_srl, 
            srl(are,[o(ARG1,[What,rivers]),o(V,[are])])]), 
          w( there, [
            alt(pos(rb)), root(there),pos(ex),loc(4),lnks(4), 
            txt("there"),truecase('LOWER'), 
            link(1,ADVP,r(ADVP,seg(4,4))), 
            link(2,VP,r(VP,seg(3,4))), 
            link(3,S,r(S,seg(3,4))), 
            link(4,SBAR,r(SBAR,seg(1,5)))]), 
          w( ?, [
            pos('.'), root(?),loc(5),lnks(1),txt("?"), 
            link(1,'SBAR',r('SBAR',seg(1,5))),flair, 
            upos(punct),fner(o),fn('_')])]).
tmp : test80_result( "What rivers are there ?", 
        sentence80, 
        whq( _69516-B, 
          s( np(3+pl,np_head(wh_det(_107070,_107070-B),[],river),[]), 
             verb(aux+be(Be),be(Be),active,pres+fin,[],posP(PosP)), 
             [voidQ(VoidQ21)], 
             []))).
tmp : test80_result( "What rivers are there ?", 
        i_sentence, 
        question80( [_154682-B], 
          pred( 
             quantV( 
                wh_det(_194620,_194620-B), _187976-B,'`'(ti(river,B)), 
                '`'(true), 
                [], 
                _187976-B), identityQ(IdentityQ),true, 
             []))).
tmp : test80_result(What rivers are there ?,qplan,(answer80([River]):-ti(river,River))).
tmp : test80_result( "Where is the largest country ?", 
        into_lexical_segs, 
        [ w( where, [
            pos(wrb), root(where),loc(1),lnks(2),txt("Where"), 
            truecase('INIT_UPPER'),link(1,'WHADVP',r('WHADVP',seg(1,1))), 
            link(2,SBAR,r(SBAR,seg(1,6)))]), 
          w( is, [
            alt(pos(vbz)), root(be),loc(2),lnks(2),txt("is"), 
            truecase('LOWER'),link(1,'S',r('S',seg(2,5))), 
            link(2,'SBAR',r('SBAR',seg(1,6))),old_pos(aux), 
            pos(vb),allen_srl, 
            srl( is, [
              o(ARG2,[Where]), 
              o(V,[is]), 
              o(ARG1,[the,largest,country])])]), 
          w( the, [
            pos(dt), root(the),loc(3),lnks(3),txt("the"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(3,5))), 
            link(2,S,r(S,seg(2,5))), link(3,'SBAR',r('SBAR',seg(1,6))),spacy,spos(dt), 
            loc(1),txt("The"),dep_parent(det,n(rhine,2)), 
            node(n(the,1))]), 
          w( largest, [
            pos(jjs), root(largest),loc(4),lnks(3), 
            txt("largest"),truecase('LOWER'), 
            link(1,NP,r(NP,seg(3,5))), 
            link(2,S,r(S,seg(2,5))), 
            link(3,SBAR,r(SBAR,seg(1,6)))]), 
          w( country, [
            pos(nn), root(country),loc(5),lnks(3), 
            txt("country"),truecase('LOWER'), 
            link(1,NP,r(NP,seg(3,5))), 
            link(2,S,r(S,seg(2,5))), 
            link(3,SBAR,r(SBAR,seg(1,6)))]), 
          w( ?, [
            pos('.'), root(?),loc(6),lnks(1),txt("?"), 
            link(1,'SBAR',r('SBAR',seg(1,6))),spacy,spos('.'), 
            loc(7),dep_parent(punct,n(flows,3)),node(n(?,7)), 
            flair,upos(punct),fner(o),fn('_')])]).
tmp : test80_result( "Where is the largest country ?", 
        sentence80, 
        whq( thing&Thing-B, 
          s( np(3+sg,np_head(det(the(sg)),[sup(most,adj(large))],country),[]), 
             verb(aux+be(Be),be(Be),active,pres+fin,[],posP(PosP)), 
             [ arg( arg_pred(Arg22), 
                 prep_phrase( prep(in), 
                   np(Np_head,np_head(wh_det(thing&Thing,thing&Thing-B),[],place),[])))], 
             []))).
tmp : test80_result( "Where is the largest country ?", 
        i_sentence, 
        question80( [thing&Thing-B], 
          pred( 
             quantV( det(the(sg)), 
               thing&Thing18-C, 
               aggr( max, 
                 C, 
                 [E,F], 
                 '`'(ti(country,F)), 
                 '`'(measure_pred(thing,area,F,E))&'`'(true)), 
               '`'(true), 
               [], 
               thing&Thing18-C), identityQ(IdentityQ),true, 
             [ '`'(trans_pred(thing,contain,B,C)), 
               quantV( 
                  wh_det(thing&Thing,thing&Thing-B), 
                  thing&Thing-B, '`'(ti(place,B)),'`'(true), 
                  [], 
                  thing&Thing-B)]))).
tmp : test80_result( "Where is the largest country ?", 
        qplan, 
        answer80([Contain_Place]) :-  
          ^( Aggregate80, 
            ( ^( SetOf_Max, 
                ( setOf( Measure_Kw:Area_Country, 
                    ti(country,Area_Country),measure_pred(thing,area,Area_Country,Measure_Kw), 
                    SetOf_Max) , 
                  aggregate80(max,SetOf_Max,Aggregate80)))  ,
              ti(place,Contain_Place) , 
              trans_pred(thing,contain,Contain_Place,Aggregate80)))).
tmp : test80_result( "Which asian countries have a population exceeding 10 million ?", 
        into_lexical_segs, 
        [ w( which, [
            pos(wdt), root(which),loc(1),lnks(3),txt("Which"), 
            truecase('INIT_UPPER'),link(1,'NP',r('NP',seg(1,1))), 
            link(2,SBAR,r(SBAR,seg(1,10))), 
            link(3,CORENLP,r(CORENLP,seg(1,10)))]), 
          w( asian, [
            pos(jj), root(asian),loc(2),lnks(4),txt("asian"), 
            ner('NATIONALITY'),truecase('INIT_UPPER'), 
            entitylink('Asian'),link(1,'NP',r('NP',seg(2,3))), 
            link(2,S,r(S,seg(2,9))), 
            link(3,SBAR,r(SBAR,seg(1,10))), 
            link(4,CORENLP,r(CORENLP,seg(1,10)))]), 
          w( countries, [
            pos(nns), root(country),loc(3),lnks(4), 
            txt("countries"),truecase('LOWER'), 
            link(1,NP,r(NP,seg(2,3))), 
            link(2,S,r(S,seg(2,9))), 
            link(3,SBAR,r(SBAR,seg(1,10))), 
            link(4,CORENLP,r(CORENLP,seg(1,10)))]), 
          w( have, [
            alt(pos(vbp)), root(have),pos(vb),loc(4),lnks(4), 
            txt("have"),truecase('LOWER'), 
            link(1,VP,r(VP,seg(4,9))), 
            link(2,S,r(S,seg(2,9))), 
            link(3,SBAR,r(SBAR,seg(1,10))), link(4,'CORENLP',r('CORENLP',seg(1,10))),allen_srl, 
            srl( have, [
              o(ARG0,[Which,asian,countries]), 
              o(V,[have]), 
              o(ARG1,[a,population,exceeding,10,million])])]), 
          w( a, [
            pos(dt), root(a),loc(5),lnks(6),txt("a"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(5,6))), 
            link(2,NP,r(NP,seg(5,9))), 
            link(3,VP,r(VP,seg(4,9))), 
            link(4,S,r(S,seg(2,9))), 
            link(5,SBAR,r(SBAR,seg(1,10))), 
            link(6,CORENLP,r(CORENLP,seg(1,10)))]), 
          w( population, [
            pos(nn), root(population),loc(6),lnks(6), 
            txt("population"),truecase('LOWER'), 
            link(1,NP,r(NP,seg(5,6))), 
            link(2,NP,r(NP,seg(5,9))), 
            link(3,VP,r(VP,seg(4,9))), 
            link(4,S,r(S,seg(2,9))), 
            link(5,SBAR,r(SBAR,seg(1,10))), 
            link(6,CORENLP,r(CORENLP,seg(1,10)))]), 
          w( exceeding, [
            pos(vbg), root(exceed),loc(7),lnks(6), 
            txt("exceeding"),truecase('LOWER'), 
            link(1,VP,r(VP,seg(7,9))), 
            link(2,NP,r(NP,seg(5,9))), 
            link(3,VP,r(VP,seg(4,9))), 
            link(4,S,r(S,seg(2,9))), 
            link(5,SBAR,r(SBAR,seg(1,10))), link(6,'CORENLP',r('CORENLP',seg(1,10))),allen_srl, 
            srl( exceeding, [
              o(ARG0,[a,population]), 
              o(V,[exceeding]), 
              o(ARG1,[10,million])])]), 
          w( '10', [
            pos(cd), root('10'),loc(8),lnks(8),txt("10"), 
            ner('NUMBER'),normalizedNER(10000000.0), 
            entitylink('10000000_(number)'), 
            link(1,QP,r(QP,seg(8,9))), 
            link(2,NP,r(NP,seg(8,9))), 
            link(3,VP,r(VP,seg(7,9))), 
            link(4,NP,r(NP,seg(5,9))), 
            link(5,VP,r(VP,seg(4,9))), 
            link(6,S,r(S,seg(2,9))), 
            link(7,SBAR,r(SBAR,seg(1,10))), 
            link(8,CORENLP,r(CORENLP,seg(1,10)))]), 
          w( million, [
            pos(cd), root(million),loc(9),lnks(8), 
            txt("million"),ner('NUMBER'), 
            normalizedNER(10000000.0),truecase('LOWER'), 
            entitylink('10000000_(number)'), 
            link(1,QP,r(QP,seg(8,9))), 
            link(2,NP,r(NP,seg(8,9))), 
            link(3,VP,r(VP,seg(7,9))), 
            link(4,NP,r(NP,seg(5,9))), 
            link(5,VP,r(VP,seg(4,9))), 
            link(6,S,r(S,seg(2,9))), 
            link(7,SBAR,r(SBAR,seg(1,10))), 
            link(8,CORENLP,r(CORENLP,seg(1,10)))]), 
          w( ?, [
            pos('.'), root(?),loc(10),lnks(2),txt("?"), 
            link(1,SBAR,r(SBAR,seg(1,10))), link(2,'CORENLP',r('CORENLP',seg(1,10))),flair, 
            upos(punct),fner(o),fn('_')])]).
tmp : test80_result( "Which asian countries have a population exceeding 10 million ?", 
        sentence80, 
        whq( thing&Thing-B, 
          s( np( 3+pl, 
               np_head(wh_det(thing&Thing,thing&Thing-B),[adj(asian)],country), 
               []), 
             verb(aux+have(Have),have(Have),active,pres+fin,[],posP(PosP)), 
             [ arg( dirO(DirO), 
                 np( 3+sg, 
                   np_head(det(a),[],population), 
                   [ reduced_rel( value&units&population-C, 
                       s( np(3+sg,wh(value&units&population-C),[]), 
                          verb(main+tv,exceed,active,inf,[prog],posP(PosP24)), 
                          [ arg(dirO(DirO25),np(3+pl,np_head(quantV(same,10),[],million),[]))], 
                          []))]))], 
             []))).
tmp : test80_result( "Which asian countries have a population exceeding 10 million ?", 
        i_sentence, 
        question80( [thing&Thing-B], 
          pred( 
             quantV( 
                wh_det(thing&Thing,thing&Thing-B), 
                thing&Thing-B, 
                '`'(ti(country,B)), 
                '`'(ti(asian,B))&'`'(true), 
                [], 
                thing&Thing-B), 
             identityQ(IdentityQ), 
             count_pred(thing,population,B,C),C=E, 
             [ quantV( det(a), 
                 value&units&population-C, '`'(true),'`'(true), 
                 [ pred( 
                      quantV( identityQ(IdentityQ18), 
                        value&units&population-C, '`'(true),'`'(true), 
                        [], 
                        value&units&population-C), 
                      identityQ(IdentityQ19), 
                      exceeds(C,D), 
                      [ quantV( voidQ(VoidQ), 
                          value&units&population-D, '`'(D= --(10,million)),'`'(true), 
                          [], 
                          value&units&population-D)])], 
                 value&units&population-C), 
               quantV( voidQ(VoidQ21), 
                 value&units&population-E, '`'(true),'`'(true), 
                 [], 
                 _97956-E)]))).
tmp : test80_result( "Which asian countries have a population exceeding 10 million ?", 
        qplan, 
        answer80([Population_Asian_Country]) :- 
          ti(country,Population_Asian_Country) , 
          ti(asian,Population_Asian_Country) , 
          ^( Count, 
            ( exceeds(Count,--(10,million)) , 
              count_pred(thing,population,Population_Asian_Country,Count)))).
tmp : test80_result( "Which continents contain more than 4 cities ?", 
        into_lexical_segs, 
        [ w( which, [
            pos(wdt), root(which),loc(1),lnks(3),txt("Which"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(1,2))), 
            link(2,SBAR,r(SBAR,seg(1,8))), link(3,'CORENLP',r('CORENLP',seg(1,8))),flair, 
            upos(pron),fner(o),fn('_')]), 
          w( continents, [
            pos(nns), root(continent),loc(2),lnks(3), 
            txt("continents"),truecase('LOWER'), 
            link(1,NP,r(NP,seg(1,2))), 
            link(2,SBAR,r(SBAR,seg(1,8))), 
            link(3,CORENLP,r(CORENLP,seg(1,8)))]), 
          w( contain, [
            alt(pos(vbp)), root(contain),pos(vb),loc(3),lnks(4), 
            txt("contain"),truecase('LOWER'), 
            link(1,VP,r(VP,seg(3,7))), 
            link(2,S,r(S,seg(3,7))), 
            link(3,SBAR,r(SBAR,seg(1,8))), 
            link(4,CORENLP,r(CORENLP,seg(1,8)))]), 
          w( more, [
            pos(jjr), root(more),loc(4),lnks(6),txt("more"), 
            truecase('LOWER'),link(1,'QP',r('QP',seg(4,6))), 
            link(2,NP,r(NP,seg(4,7))), 
            link(3,VP,r(VP,seg(3,7))), 
            link(4,S,r(S,seg(3,7))), 
            link(5,SBAR,r(SBAR,seg(1,8))), 
            link(6,CORENLP,r(CORENLP,seg(1,8)))]), 
          w( than, [
            pos(in), root(than),loc(5),lnks(6),txt("than"), 
            truecase('LOWER'),link(1,'QP',r('QP',seg(4,6))), 
            link(2,NP,r(NP,seg(4,7))), 
            link(3,VP,r(VP,seg(3,7))), 
            link(4,S,r(S,seg(3,7))), 
            link(5,SBAR,r(SBAR,seg(1,8))), 
            link(6,CORENLP,r(CORENLP,seg(1,8)))]), 
          w( '4', [
            pos(cd), root('4'),loc(6),lnks(6),txt("4"), 
            ner('NUMBER'),normalizedNER('>4.0'),entitylink(4), 
            corefed,#(1),txt(["4"]), 
            type('PROPER'),numb('SINGULAR'),gender('UNKNOWN'), 
            animacy('INANIMATE'),repm(@(true)), 
            link(1,QP,r(QP,seg(4,6))), 
            link(2,NP,r(NP,seg(4,7))), 
            link(3,VP,r(VP,seg(3,7))), 
            link(4,S,r(S,seg(3,7))), 
            link(5,SBAR,r(SBAR,seg(1,8))), 
            link(6,CORENLP,r(CORENLP,seg(1,8)))]), 
          w( cities, [
            pos(nns), root(city),loc(7),lnks(5),txt("cities"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(4,7))), 
            link(2,VP,r(VP,seg(3,7))), 
            link(3,S,r(S,seg(3,7))), 
            link(4,SBAR,r(SBAR,seg(1,8))), 
            link(5,CORENLP,r(CORENLP,seg(1,8)))]), 
          w( ?, [
            pos('.'), root(?),loc(8),lnks(2),txt("?"), 
            link(1,SBAR,r(SBAR,seg(1,8))), link(2,'CORENLP',r('CORENLP',seg(1,8))),spacy, 
            spos('.'),loc(6),dep_parent(punct,n(flows,3)), 
            node(n(?,6)),flair,upos(punct),fner(o), 
            fn('_')])]).
tmp : test80_result( "Which continents contain more than 4 cities ?", 
        sentence80, 
        whq( thing&geo&continent-B, 
          s( np(3+pl,np_head(wh_det(thing&geo&continent,thing&geo&continent-B),[],continent),[]), 
             verb(main+tv,contain,active,pres+fin,[],posP(PosP)), 
             [ arg(dirO(DirO),np(3+pl,np_head(quantV(more,4),[],city),[]))], 
             []))).
tmp : test80_result( "Which continents contain more than 4 cities ?", 
        i_sentence, 
        question80( [thing&geo&continent-B], 
          pred( 
             quantV( 
                wh_det(thing&geo&continent,thing&geo&continent-B), 
                thing&geo&continent-B, '`'(ti(continent,B)),'`'(true), 
                [], 
                thing&geo&continent-B), 
             identityQ(IdentityQ), 
             trans_pred(thing,contain,B,D), 
             [ quantV( quantV(more,4), 
                 thing&Thing-D, '`'(ti(city,D)),'`'(true), 
                 [], 
                 thing&Thing-D)]))).
tmp : test80_result( "Which continents contain more than 4 cities ?", 
        qplan, 
        answer80([Contain_Continent]) :- 
          ti(continent,Contain_Continent) , 
          ^( Numberof, 
            ( numberof( City, 
                ti(city,City),trans_pred(thing,contain,Contain_Continent,City), 
                Numberof) , 
              Numberof>4))).
tmp : test80_result( "Which countries are bordered by two seas ?", 
        into_lexical_segs, 
        [ w( which, [
            pos(wdt), root(which),loc(1),lnks(2),txt("Which"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(1,2))), 
            link(2,'SBAR',r('SBAR',seg(1,8))),flair,upos(pron), 
            fner(o),fn('_')]), 
          w( countries, [
            pos(nns), root(country),loc(2),lnks(2), 
            txt("countries"),truecase('LOWER'), 
            link(1,NP,r(NP,seg(1,2))), 
            link(2,SBAR,r(SBAR,seg(1,8)))]), 
          w( are, [
            alt(pos(vbp)), root(be),loc(3),lnks(3),txt("are"), 
            truecase('LOWER'),link(1,'VP',r('VP',seg(3,7))), 
            link(2,S,r(S,seg(3,7))), link(3,'SBAR',r('SBAR',seg(1,8))),old_pos(aux), 
            pos(vb),allen_srl, 
            srl(are,[o(V,[are])])]), 
          w( bordered, [
            pos(vbn), root(border),loc(4),lnks(4), 
            txt("bordered"),truecase('LOWER'), 
            link(1,VP,r(VP,seg(4,7))), 
            link(2,VP,r(VP,seg(3,7))), 
            link(3,S,r(S,seg(3,7))), link(4,'SBAR',r('SBAR',seg(1,8))),allen_srl, 
            srl( bordered, [
              o(ARG2,[Which,countries]), 
              o(V,[bordered]), 
              o(ARG1,[by,two,seas])])]), 
          w( by, [
            pos(in), root(by),loc(5),lnks(5),txt("by"), 
            truecase('LOWER'),link(1,'PP',r('PP',seg(5,7))), 
            link(2,VP,r(VP,seg(4,7))), 
            link(3,VP,r(VP,seg(3,7))), 
            link(4,S,r(S,seg(3,7))), 
            link(5,SBAR,r(SBAR,seg(1,8)))]), 
          w( two, [
            pos(cd), root(two),loc(6),lnks(6),txt("two"), 
            ner('NUMBER'),normalizedNER(2.0), 
            truecase('LOWER'),corefed,#(1), 
            txt(["two"]),type('PROPER'), 
            numb('SINGULAR'),gender('UNKNOWN'), 
            animacy('INANIMATE'),repm(@(true)), 
            link(1,NP,r(NP,seg(6,7))), 
            link(2,PP,r(PP,seg(5,7))), 
            link(3,VP,r(VP,seg(4,7))), 
            link(4,VP,r(VP,seg(3,7))), 
            link(5,S,r(S,seg(3,7))), 
            link(6,SBAR,r(SBAR,seg(1,8)))]), 
          w( seas, [
            pos(nns), root(sea),loc(7),lnks(6),txt("seas"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(6,7))), 
            link(2,PP,r(PP,seg(5,7))), 
            link(3,VP,r(VP,seg(4,7))), 
            link(4,VP,r(VP,seg(3,7))), 
            link(5,S,r(S,seg(3,7))), 
            link(6,SBAR,r(SBAR,seg(1,8)))]), 
          w( ?, [
            pos('.'), root(?),loc(8),lnks(1),txt("?"), 
            link(1,'SBAR',r('SBAR',seg(1,8))),flair, 
            upos(punct),fner(o),fn('_')])]).
tmp : test80_result( "Which countries are bordered by two seas ?", 
        sentence80, 
        whq( thing&_33508&_33510-B, 
          s( np(3+pl,np_head(wh_det(thing&_103830&_103832,thing&_103830&_103832-B),[],country),[]), 
             verb(main+tv,border,passive,pres+fin,[],posP(PosP)), 
             [], 
             [ prep_phrase(prep(by),np(3+pl,np_head(quantV(same,2),[],sea),[]))]))).
tmp : test80_result( "Which countries are bordered by two seas ?", 
        i_sentence, 
        question80( [thing&_201486&_201488-B], 
          pred( 
             quantV( 
                wh_det(thing&_45582&_45584,thing&_45582&_45584-B), 
                thing&_31040&_31042-B, '`'(ti(country,B)),'`'(true), 
                [], 
                thing&_31040&_31042-B), 
             identityQ(IdentityQ), 
             generic_pred(thing,border,C,B), 
             [ quantV( quantV(same,2), 
                 thing&_69488&_69490-C, '`'(ti(sea,C)),'`'(true), 
                 [], 
                 thing&_63088&_63090-C)]))).
tmp : test80_result( "Which countries are bordered by two seas ?", 
        qplan, 
        answer80([Generic_Country]) :- 
          ti(country,Generic_Country) , 
          numberof( Border_Sea, 
            ti(sea,Border_Sea),generic_pred(thing,border,Border_Sea,Generic_Country), 
            2)).
tmp : test80_result( "Which countries are european ?", 
        into_lexical_segs, 
        [ w( which, [
            pos(wdt), root(which),loc(1),lnks(2),txt("Which"), 
            truecase('INIT_UPPER'),link(1,'NP',r('NP',seg(1,2))), 
            link(2,'SBAR',r('SBAR',seg(1,5))),flair,upos(pron), 
            fner(o),fn('_')]), 
          w( countries, [
            pos(nns), root(country),loc(2),lnks(2), 
            txt("countries"),truecase('LOWER'), 
            link(1,NP,r(NP,seg(1,2))), link(2,'SBAR',r('SBAR',seg(1,5))),flair, 
            upos(noun),fner(o),fn('_')]), 
          w( are, [
            alt(pos(vbp)), root(be),loc(3),lnks(2),txt("are"), 
            truecase('LOWER'),link(1,'S',r('S',seg(3,4))), 
            link(2,'SBAR',r('SBAR',seg(1,5))),old_pos(aux), 
            pos(vb),allen_srl, 
            srl(are,[o('V',[are])]),flair, 
            upos(verb),fner(o),fn('be.03')]), 
          w( european, [
            alt(pos(nnp)), root(european),pos(jj),loc(4),lnks(3), 
            txt("european"),ner('NATIONALITY'), 
            truecase('INIT_UPPER'),entitylink('Europe'), 
            link(1,ADJP,r(ADJP,seg(4,4))), 
            link(2,S,r(S,seg(3,4))), 
            link(3,SBAR,r(SBAR,seg(1,5)))]), 
          w( ?, [
            pos('.'), root(?),loc(5),lnks(1),txt("?"), 
            link(1,'SBAR',r('SBAR',seg(1,5))),spacy,spos('.'), 
            loc(7),dep_parent(punct,n(flows,3)),node(n(?,7)), 
            flair,upos(punct),fner(o),fn('_')])]).
tmp : test80_result( "Which countries are european ?", 
        sentence80, 
        whq( thing&Thing-B, 
          s( np(3+pl,np_head(wh_det(thing&Thing,thing&Thing-B),[],country),[]), 
             verb(aux+be(Be),be(Be),active,pres+fin,[],posP(PosP)), 
             [ arg(arg_pred(Arg22),adj(european))], 
             []))).
tmp : test80_result( "Which countries are european ?", 
        i_sentence, 
        question80( [thing&Thing-B], 
          pred( 
             quantV( 
                wh_det(thing&Thing,thing&Thing-B), 
                thing&Thing-B, '`'(ti(country,B)),'`'(true), 
                [], 
                thing&Thing-B), identityQ(IdentityQ),true, 
             ['`'(true)&'`'(ti(european,B))&'`'(true)]))).
tmp : test80_result( "Which countries are european ?", 
        qplan, 
        answer80([European_Country]) :- 
          ti(country,European_Country) , 
          ti(european,European_Country)).
tmp : test80_result( "Which countries contain 2 cities ?", 
        into_lexical_segs, 
        [ w( which, [
            pos(wdt), root(which),loc(1),lnks(3),txt("Which"), 
            truecase('INIT_UPPER'),link(1,'NP',r('NP',seg(1,2))), 
            link(2,SBAR,r(SBAR,seg(1,6))), link(3,'CORENLP',r('CORENLP',seg(1,6))),flair, 
            upos(pron),fner(o),fn('_')]), 
          w( countries, [
            pos(nns), root(country),loc(2),lnks(3), 
            txt("countries"),truecase('LOWER'), 
            link(1,NP,r(NP,seg(1,2))), 
            link(2,SBAR,r(SBAR,seg(1,6))), link(3,'CORENLP',r('CORENLP',seg(1,6))),flair, 
            upos(noun),fner(o),fn('_')]), 
          w( contain, [
            alt(pos(vbp)), root(contain),pos(vb),loc(3),lnks(4), 
            txt("contain"),truecase('LOWER'), 
            link(1,VP,r(VP,seg(3,5))), 
            link(2,S,r(S,seg(3,5))), 
            link(3,SBAR,r(SBAR,seg(1,6))), link(4,'CORENLP',r('CORENLP',seg(1,6))),allen_srl, 
            srl( contain, [
              o(ARG0,[Which,countries]), 
              o(V,[contain]), 
              o(ARG1,[2,cities])])]), 
          w( '2', [
            pos(cd), root('2'),loc(4),lnks(5),txt("2"), 
            ner('NUMBER'),normalizedNER(2.0),entitylink(2), 
            corefed,#(1),txt(["2"]), 
            type('PROPER'),numb('SINGULAR'),gender('UNKNOWN'), 
            animacy('INANIMATE'),repm(@(true)), 
            link(1,NP,r(NP,seg(4,5))), 
            link(2,VP,r(VP,seg(3,5))), 
            link(3,S,r(S,seg(3,5))), 
            link(4,SBAR,r(SBAR,seg(1,6))), 
            link(5,CORENLP,r(CORENLP,seg(1,6)))]), 
          w( cities, [
            pos(nns), root(city),loc(5),lnks(5),txt("cities"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(4,5))), 
            link(2,VP,r(VP,seg(3,5))), 
            link(3,S,r(S,seg(3,5))), 
            link(4,SBAR,r(SBAR,seg(1,6))), 
            link(5,CORENLP,r(CORENLP,seg(1,6)))]), 
          w( ?, [
            pos('.'), root(?),loc(6),lnks(2),txt("?"), 
            link(1,SBAR,r(SBAR,seg(1,6))), link(2,'CORENLP',r('CORENLP',seg(1,6))),flair, 
            upos(punct),fner(o),fn('_')])]).
tmp : test80_result( "Which countries contain 2 cities ?", 
        sentence80, 
        whq( D&_225092-B, 
          s( np(3+pl,np_head(wh_det(D&_21568,D&_21568-B),[],country),[]), 
             verb(main+tv,contain,active,pres+fin,[],posP(PosP)), 
             [ arg(dirO(DirO),np(3+pl,np_head(quantV(same,2),[],city),[]))], 
             []))).
tmp : test80_result( "Which countries contain 2 cities ?", 
        i_sentence, 
        question80( [D&_92122-B], 
          pred( 
             quantV( 
                wh_det(D&_158360,D&_158360-B), 
                D&_148382-B, '`'(ti(country,B)),'`'(true), 
                [], 
                D&_148382-B), 
             identityQ(IdentityQ), 
             trans_pred(D,contain,B,C), 
             [ quantV( quantV(same,2), 
                 D&_176518-C, '`'(ti(city,C)),'`'(true), 
                 [], 
                 D&_171322-C)]))).
tmp : test80_result( "Which countries contain 2 cities ?", 
        qplan, 
        answer80([Country]) :- 
          ti(country,Country) , 
          numberof( City, 
            ti(city,City),trans_pred(Contain,contain,Country,City), 
            2)).
tmp : test80_result( "Which countries contain 3 cities ?", 
        into_lexical_segs, 
        [ w( which, [
            pos(wdt), root(which),loc(1),lnks(3),txt("Which"), 
            truecase('INIT_UPPER'),link(1,'NP',r('NP',seg(1,2))), 
            link(2,SBAR,r(SBAR,seg(1,6))), link(3,'CORENLP',r('CORENLP',seg(1,6))),flair, 
            upos(pron),fner(o),fn('_')]), 
          w( countries, [
            pos(nns), root(country),loc(2),lnks(3), 
            txt("countries"),truecase('LOWER'), 
            link(1,NP,r(NP,seg(1,2))), 
            link(2,SBAR,r(SBAR,seg(1,6))), link(3,'CORENLP',r('CORENLP',seg(1,6))),flair, 
            upos(noun),fner(o),fn('_')]), 
          w( contain, [
            alt(pos(vbp)), root(contain),pos(vb),loc(3),lnks(4), 
            txt("contain"),truecase('LOWER'), 
            link(1,VP,r(VP,seg(3,5))), 
            link(2,S,r(S,seg(3,5))), 
            link(3,SBAR,r(SBAR,seg(1,6))), link(4,'CORENLP',r('CORENLP',seg(1,6))),allen_srl, 
            srl( contain, [
              o(ARG0,[Which,countries]), 
              o(V,[contain]), 
              o(ARG1,[3,cities])]), flair,upos(verb),fner(o),fn('contain.01')]), 
          w( '3', [
            pos(cd), root('3'),loc(4),lnks(5),txt("3"), 
            ner('NUMBER'),normalizedNER(3.0),entitylink(3), 
            corefed,#(1),txt(["3"]), 
            type('PROPER'),numb('SINGULAR'),gender('UNKNOWN'), 
            animacy('INANIMATE'),repm(@(true)), 
            link(1,NP,r(NP,seg(4,5))), 
            link(2,VP,r(VP,seg(3,5))), 
            link(3,S,r(S,seg(3,5))), 
            link(4,SBAR,r(SBAR,seg(1,6))), 
            link(5,CORENLP,r(CORENLP,seg(1,6)))]), 
          w( cities, [
            pos(nns), root(city),loc(5),lnks(5),txt("cities"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(4,5))), 
            link(2,VP,r(VP,seg(3,5))), 
            link(3,S,r(S,seg(3,5))), 
            link(4,SBAR,r(SBAR,seg(1,6))), link(5,'CORENLP',r('CORENLP',seg(1,6))),flair, 
            upos(noun),fner(o),fn('_')]), 
          w( ?, [
            pos('.'), root(?),loc(6),lnks(2),txt("?"), 
            link(1,SBAR,r(SBAR,seg(1,6))), link(2,'CORENLP',r('CORENLP',seg(1,6))),spacy, 
            spos('.'),dep_parent(punct,n(flows,3)), 
            node(n(?,6)),flair,upos(punct),fner(o), 
            fn('_')])]).
tmp : test80_result( "Which countries contain 3 cities ?", 
        sentence80, 
        whq( D&_104474-B, 
          s( np(3+pl,np_head(wh_det(D&_155572,D&_155572-B),[],country),[]), 
             verb(main+tv,contain,active,pres+fin,[],posP(PosP)), 
             [ arg(dirO(DirO),np(3+pl,np_head(quantV(same,3),[],city),[]))], 
             []))).
tmp : test80_result( "Which countries contain 3 cities ?", 
        i_sentence, 
        question80( [D&_226126-B], 
          pred( 
             quantV( 
                wh_det(D&_37488,D&_37488-B), D&_27510-B,'`'(ti(country,B)), 
                '`'(true), 
                [], 
                D&_27510-B), 
             identityQ(IdentityQ), 
             trans_pred(D,contain,B,C), 
             [ quantV( quantV(same,3), 
                 D&_55652-C, '`'(ti(city,C)),'`'(true), 
                 [], 
                 D&_50456-C)]))).
tmp : test80_result( "Which countries contain 3 cities ?", 
        qplan, 
        answer80([Country]) :- 
          ti(country,Country) , 
          numberof( City, 
            ti(city,City),trans_pred(Contain,contain,Country,City), 
            3)).
tmp : test80_result( "Which countries contain a city ?", 
        into_lexical_segs, 
        [ w( which, [
            pos(wdt), root(which),loc(1),lnks(3),txt("Which"), 
            truecase('INIT_UPPER'),link(1,'NP',r('NP',seg(1,2))), 
            link(2,SBAR,r(SBAR,seg(1,6))), link(3,'CORENLP',r('CORENLP',seg(1,6))),flair, 
            upos(pron),fner(o),fn('_')]), 
          w( countries, [
            pos(nns), root(country),loc(2),lnks(3), 
            txt("countries"),truecase('LOWER'), 
            link(1,NP,r(NP,seg(1,2))), 
            link(2,SBAR,r(SBAR,seg(1,6))), link(3,'CORENLP',r('CORENLP',seg(1,6))),flair, 
            upos(noun),fner(o),fn('_')]), 
          w( contain, [
            alt(pos(vbp)), root(contain),pos(vb),loc(3),lnks(4), 
            txt("contain"),truecase('LOWER'), 
            link(1,VP,r(VP,seg(3,5))), 
            link(2,S,r(S,seg(3,5))), 
            link(3,SBAR,r(SBAR,seg(1,6))), link(4,'CORENLP',r('CORENLP',seg(1,6))),allen_srl, 
            srl( contain, [
              o(ARG0,[Which,countries]), 
              o(V,[contain]), 
              o(ARG1,[a,city])]), flair,upos(verb),fner(o),fn('contain.01')]), 
          w( a, [
            pos(dt), root(a),loc(4),lnks(5),txt("a"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(4,5))), 
            link(2,VP,r(VP,seg(3,5))), 
            link(3,S,r(S,seg(3,5))), 
            link(4,SBAR,r(SBAR,seg(1,6))), 
            link(5,CORENLP,r(CORENLP,seg(1,6)))]), 
          w( city, [
            pos(nn), root(city),loc(5),lnks(5),txt("city"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(4,5))), 
            link(2,VP,r(VP,seg(3,5))), 
            link(3,S,r(S,seg(3,5))), 
            link(4,SBAR,r(SBAR,seg(1,6))), 
            link(5,CORENLP,r(CORENLP,seg(1,6)))]), 
          w( ?, [
            pos('.'), root(?),loc(6),lnks(2),txt("?"), 
            link(1,SBAR,r(SBAR,seg(1,6))), link(2,'CORENLP',r('CORENLP',seg(1,6))),flair, 
            upos(punct),fner(o),fn('_')])]).
tmp : test80_result( "Which countries contain a city ?", 
        sentence80, 
        whq( D&_233008-B, 
          s( np(3+pl,np_head(wh_det(D&_28548,D&_28548-B),[],country),[]), 
             verb(main+tv,contain,active,pres+fin,[],posP(PosP)), 
             [ arg(dirO(DirO),np(3+sg,np_head(det(a),[],city),[]))], 
             []))).
tmp : test80_result( "Which countries contain a city ?", 
        i_sentence, 
        question80( [D&_98558-B], 
          pred( 
             quantV( 
                wh_det(D&_164524,D&_164524-B), 
                D&_154546-B, '`'(ti(country,B)),'`'(true), 
                [], 
                D&_154546-B), 
             identityQ(IdentityQ), 
             trans_pred(D,contain,B,C), 
             [ quantV(det(a),D&_177214-C,`(ti(city,C)),`(true),[],D&_177214-C)]))).
tmp : test80_result( "Which countries contain a city ?", 
        qplan, 
        answer80([Country]) :- 
          ti(country,Country) , 
          ^( City, 
            ti(city,City),trans_pred(Contain,contain,Country,City))).
tmp : test80_result( "Which countries contain more than 2 cities ?", 
        into_lexical_segs, 
        [ w( which, [
            pos(wdt), root(which),loc(1),lnks(3),txt("Which"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(1,2))), 
            link(2,SBAR,r(SBAR,seg(1,8))), link(3,'CORENLP',r('CORENLP',seg(1,8))),flair, 
            upos(pron),fner(o),fn('_')]), 
          w( countries, [
            pos(nns), root(country),loc(2),lnks(3), 
            txt("countries"),truecase('LOWER'), 
            link(1,NP,r(NP,seg(1,2))), 
            link(2,SBAR,r(SBAR,seg(1,8))), link(3,'CORENLP',r('CORENLP',seg(1,8))),flair, 
            upos(noun),fner(o),fn('_')]), 
          w( contain, [
            alt(pos(vbp)), root(contain),pos(vb),loc(3),lnks(4), 
            txt("contain"),truecase('LOWER'), 
            link(1,VP,r(VP,seg(3,7))), 
            link(2,S,r(S,seg(3,7))), 
            link(3,SBAR,r(SBAR,seg(1,8))), link(4,'CORENLP',r('CORENLP',seg(1,8))),allen_srl, 
            srl( contain, [
              o(ARG0,[Which,countries]), 
              o(V,[contain]), 
              o(ARG1,[more,than,2,cities])]), flair,upos(verb),fner(o),fn('contain.01')]), 
          w( more, [
            pos(jjr), root(more),loc(4),lnks(6),txt("more"), 
            truecase('LOWER'),link(1,'QP',r('QP',seg(4,6))), 
            link(2,NP,r(NP,seg(4,7))), 
            link(3,VP,r(VP,seg(3,7))), 
            link(4,S,r(S,seg(3,7))), 
            link(5,SBAR,r(SBAR,seg(1,8))), 
            link(6,CORENLP,r(CORENLP,seg(1,8)))]), 
          w( than, [
            pos(in), root(than),loc(5),lnks(6),txt("than"), 
            truecase('LOWER'),link(1,'QP',r('QP',seg(4,6))), 
            link(2,NP,r(NP,seg(4,7))), 
            link(3,VP,r(VP,seg(3,7))), 
            link(4,S,r(S,seg(3,7))), 
            link(5,SBAR,r(SBAR,seg(1,8))), 
            link(6,CORENLP,r(CORENLP,seg(1,8)))]), 
          w( '2', [
            pos(cd), root('2'),loc(6),lnks(6),txt("2"), 
            ner('NUMBER'),normalizedNER('>2.0'),entitylink(2), 
            corefed,#(1),txt(["2"]), 
            type('PROPER'),numb('SINGULAR'),gender('UNKNOWN'), 
            animacy('INANIMATE'),repm(@(true)), 
            link(1,QP,r(QP,seg(4,6))), 
            link(2,NP,r(NP,seg(4,7))), 
            link(3,VP,r(VP,seg(3,7))), 
            link(4,S,r(S,seg(3,7))), 
            link(5,SBAR,r(SBAR,seg(1,8))), 
            link(6,CORENLP,r(CORENLP,seg(1,8)))]), 
          w( cities, [
            pos(nns), root(city),loc(7),lnks(5),txt("cities"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(4,7))), 
            link(2,VP,r(VP,seg(3,7))), 
            link(3,S,r(S,seg(3,7))), 
            link(4,SBAR,r(SBAR,seg(1,8))), 
            link(5,CORENLP,r(CORENLP,seg(1,8)))]), 
          w( ?, [
            pos('.'), root(?),loc(8),lnks(2),txt("?"), 
            link(1,SBAR,r(SBAR,seg(1,8))), link(2,'CORENLP',r('CORENLP',seg(1,8))),spacy, 
            spos('.'),loc(7),dep_parent(punct,n(flows,3)), 
            node(n(?,7)),flair,upos(punct),fner(o), 
            fn('_')])]).
tmp : test80_result( "Which countries contain more than 2 cities ?", 
        sentence80, 
        whq( E&_116246-B, 
          s( np(3+pl,np_head(wh_det(E&_167344,E&_167344-B),[],country),[]), 
             verb(main+tv,contain,active,pres+fin,[],posP(PosP)), 
             [ arg(dirO(DirO),np(3+pl,np_head(quantV(more,2),[],city),[]))], 
             []))).
tmp : test80_result( "Which countries contain more than 2 cities ?", 
        i_sentence, 
        question80( [E&_239238-B], 
          pred( 
             quantV( 
                wh_det(E&_50582,E&_50582-B), E&_40604-B,'`'(ti(country,B)), 
                '`'(true), 
                [], 
                E&_40604-B), 
             identityQ(IdentityQ), 
             trans_pred(E,contain,B,D), 
             [ quantV( quantV(more,2), 
                 E&_68746-D, '`'(ti(city,D)),'`'(true), 
                 [], 
                 E&_63550-D)]))).
tmp : test80_result( "Which countries contain more than 2 cities ?", 
        qplan, 
        answer80([Country]) :- 
          ti(country,Country) , 
          ^( Numberof, 
            ( numberof( City, 
                ti(city,City),trans_pred(Contain,contain,Country,City), 
                Numberof) , 
              Numberof>2))).
tmp : test80_result( "Which countries contain more than 3 cities ?", 
        into_lexical_segs, 
        [ w( which, [
            pos(wdt), root(which),loc(1),lnks(3),txt("Which"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(1,2))), 
            link(2,SBAR,r(SBAR,seg(1,8))), link(3,'CORENLP',r('CORENLP',seg(1,8))),flair, 
            upos(pron),fner(o),fn('_')]), 
          w( countries, [
            pos(nns), root(country),loc(2),lnks(3), 
            txt("countries"),truecase('LOWER'), 
            link(1,NP,r(NP,seg(1,2))), 
            link(2,SBAR,r(SBAR,seg(1,8))), link(3,'CORENLP',r('CORENLP',seg(1,8))),flair, 
            upos(noun),fner(o),fn('_')]), 
          w( contain, [
            alt(pos(vbp)), root(contain),pos(vb),loc(3),lnks(4), 
            txt("contain"),truecase('LOWER'), 
            link(1,VP,r(VP,seg(3,7))), 
            link(2,S,r(S,seg(3,7))), 
            link(3,SBAR,r(SBAR,seg(1,8))), link(4,'CORENLP',r('CORENLP',seg(1,8))),allen_srl, 
            srl( contain, [
              o(ARG0,[Which,countries]), 
              o(V,[contain]), 
              o(ARG1,[more,than,3,cities])]), flair,upos(verb),fner(o),fn('contain.01')]), 
          w( more, [
            pos(jjr), root(more),loc(4),lnks(6),txt("more"), 
            truecase('LOWER'),link(1,'QP',r('QP',seg(4,6))), 
            link(2,NP,r(NP,seg(4,7))), 
            link(3,VP,r(VP,seg(3,7))), 
            link(4,S,r(S,seg(3,7))), 
            link(5,SBAR,r(SBAR,seg(1,8))), link(6,'CORENLP',r('CORENLP',seg(1,8))),flair, 
            upos(adj),fner(o),fn('_')]), 
          w( than, [
            pos(in), root(than),loc(5),lnks(6),txt("than"), 
            truecase('LOWER'),link(1,'QP',r('QP',seg(4,6))), 
            link(2,NP,r(NP,seg(4,7))), 
            link(3,VP,r(VP,seg(3,7))), 
            link(4,S,r(S,seg(3,7))), 
            link(5,SBAR,r(SBAR,seg(1,8))), link(6,'CORENLP',r('CORENLP',seg(1,8))),flair, 
            upos(adp),fner(o),fn('_')]), 
          w( '3', [
            pos(cd), root('3'),loc(6),lnks(6),txt("3"), 
            ner('NUMBER'),normalizedNER('>3.0'),entitylink(3), 
            corefed,#(1),txt(["3"]), 
            type('PROPER'),numb('SINGULAR'),gender('UNKNOWN'), 
            animacy('INANIMATE'),repm(@(true)), 
            link(1,QP,r(QP,seg(4,6))), 
            link(2,NP,r(NP,seg(4,7))), 
            link(3,VP,r(VP,seg(3,7))), 
            link(4,S,r(S,seg(3,7))), 
            link(5,SBAR,r(SBAR,seg(1,8))), 
            link(6,CORENLP,r(CORENLP,seg(1,8)))]), 
          w( cities, [
            pos(nns), root(city),loc(7),lnks(5),txt("cities"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(4,7))), 
            link(2,VP,r(VP,seg(3,7))), 
            link(3,S,r(S,seg(3,7))), 
            link(4,SBAR,r(SBAR,seg(1,8))), link(5,'CORENLP',r('CORENLP',seg(1,8))),flair, 
            upos(noun),fner(o),fn('_')]), 
          w( ?, [
            pos('.'), root(?),loc(8),lnks(2),txt("?"), 
            link(1,SBAR,r(SBAR,seg(1,8))), link(2,'CORENLP',r('CORENLP',seg(1,8))),flair, 
            upos(punct),fner(o),fn('_')])]).
tmp : test80_result( "Which countries contain more than 3 cities ?", 
        sentence80, 
        whq( E&_25394-B, 
          s( np(3+pl,np_head(wh_det(E&_76492,E&_76492-B),[],country),[]), 
             verb(main+tv,contain,active,pres+fin,[],posP(PosP)), 
             [ arg(dirO(DirO),np(3+pl,np_head(quantV(more,3),[],city),[]))], 
             []))).
tmp : test80_result( "Which countries contain more than 3 cities ?", 
        i_sentence, 
        question80( [E&_148386-B], 
          pred( 
             quantV( 
                wh_det(E&_214624,E&_214624-B), 
                E&_204646-B, '`'(ti(country,B)),'`'(true), 
                [], 
                E&_204646-B), 
             identityQ(IdentityQ), 
             trans_pred(E,contain,B,D), 
             [ quantV( quantV(more,3), 
                 E&_232782-D, '`'(ti(city,D)),'`'(true), 
                 [], 
                 E&_227586-D)]))).
tmp : test80_result( "Which countries contain more than 3 cities ?", 
        qplan, 
        answer80([Country]) :- 
          ti(country,Country) , 
          ^( Numberof, 
            ( numberof( City, 
                ti(city,City),trans_pred(Contain,contain,Country,City), 
                Numberof) , 
              Numberof>3))).
tmp : test80_result( "Which countries have a population exceeding 10 million ?", 
        into_lexical_segs, 
        [ w( which, [
            pos(wdt), root(which),loc(1),lnks(3),txt("Which"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(1,2))), 
            link(2,SBAR,r(SBAR,seg(1,9))), link(3,'CORENLP',r('CORENLP',seg(1,9))),flair, 
            upos(pron),fner(o),fn('_')]), 
          w( countries, [
            pos(nns), root(country),loc(2),lnks(3), 
            txt("countries"),truecase('LOWER'), 
            link(1,NP,r(NP,seg(1,2))), 
            link(2,SBAR,r(SBAR,seg(1,9))), link(3,'CORENLP',r('CORENLP',seg(1,9))),flair, 
            upos(noun),fner(o),fn('_')]), 
          w( have, [
            alt(pos(vbp)), root(have),pos(vb),loc(3),lnks(4), 
            txt("have"),truecase('LOWER'), 
            link(1,VP,r(VP,seg(3,8))), 
            link(2,S,r(S,seg(3,8))), 
            link(3,SBAR,r(SBAR,seg(1,9))), link(4,'CORENLP',r('CORENLP',seg(1,9))),allen_srl, 
            srl( have, [
              o(ARG0,[Which,countries]), 
              o(V,[have]), 
              o(ARG1,[a,population,exceeding,10,million])])]), 
          w( a, [
            pos(dt), root(a),loc(4),lnks(6),txt("a"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(4,5))), 
            link(2,NP,r(NP,seg(4,8))), 
            link(3,VP,r(VP,seg(3,8))), 
            link(4,S,r(S,seg(3,8))), 
            link(5,SBAR,r(SBAR,seg(1,9))), 
            link(6,CORENLP,r(CORENLP,seg(1,9)))]), 
          w( population, [
            pos(nn), root(population),loc(5),lnks(6), 
            txt("population"),truecase('LOWER'), 
            link(1,NP,r(NP,seg(4,5))), 
            link(2,NP,r(NP,seg(4,8))), 
            link(3,VP,r(VP,seg(3,8))), 
            link(4,S,r(S,seg(3,8))), 
            link(5,SBAR,r(SBAR,seg(1,9))), 
            link(6,CORENLP,r(CORENLP,seg(1,9)))]), 
          w( exceeding, [
            pos(vbg), root(exceed),loc(6),lnks(6), 
            txt("exceeding"),truecase('LOWER'), 
            link(1,VP,r(VP,seg(6,8))), 
            link(2,NP,r(NP,seg(4,8))), 
            link(3,VP,r(VP,seg(3,8))), 
            link(4,S,r(S,seg(3,8))), 
            link(5,SBAR,r(SBAR,seg(1,9))), link(6,'CORENLP',r('CORENLP',seg(1,9))),allen_srl, 
            srl( exceeding, [
              o(ARG0,[a,population]), 
              o(V,[exceeding]), 
              o(ARG1,[10,million])])]), 
          w( '10', [
            pos(cd), root('10'),loc(7),lnks(8),txt("10"), 
            ner('NUMBER'),normalizedNER(10000000.0), 
            entitylink('10000000_(number)'), 
            link(1,QP,r(QP,seg(7,8))), 
            link(2,NP,r(NP,seg(7,8))), 
            link(3,VP,r(VP,seg(6,8))), 
            link(4,NP,r(NP,seg(4,8))), 
            link(5,VP,r(VP,seg(3,8))), 
            link(6,S,r(S,seg(3,8))), 
            link(7,SBAR,r(SBAR,seg(1,9))), 
            link(8,CORENLP,r(CORENLP,seg(1,9)))]), 
          w( million, [
            pos(cd), root(million),loc(8),lnks(8), 
            txt("million"),ner('NUMBER'), 
            normalizedNER(10000000.0),truecase('LOWER'), 
            entitylink('10000000_(number)'), 
            link(1,QP,r(QP,seg(7,8))), 
            link(2,NP,r(NP,seg(7,8))), 
            link(3,VP,r(VP,seg(6,8))), 
            link(4,NP,r(NP,seg(4,8))), 
            link(5,VP,r(VP,seg(3,8))), 
            link(6,S,r(S,seg(3,8))), 
            link(7,SBAR,r(SBAR,seg(1,9))), 
            link(8,CORENLP,r(CORENLP,seg(1,9)))]), 
          w( ?, [
            pos('.'), root(?),loc(9),lnks(2),txt("?"), 
            link(1,SBAR,r(SBAR,seg(1,9))), link(2,'CORENLP',r('CORENLP',seg(1,9))),spacy, 
            spos('.'),loc(6),dep_parent(punct,n(flows,3)), 
            node(n(?,6)),flair,upos(punct),fner(o), 
            fn('_')])]).
tmp : test80_result( "Which countries have a population exceeding 10 million ?", 
        sentence80, 
        whq( F&_260018-B, 
          s( np(3+pl,np_head(wh_det(F&_56698,F&_56698-B),[],country),[]), 
             verb(aux+have(Have),have(Have),active,pres+fin,[],posP(PosP)), 
             [ arg( dirO(DirO), 
                 np( 3+sg, 
                   np_head(det(a),[],population), 
                   [ reduced_rel( value&units&population-C, 
                       s( np(3+sg,wh(value&units&population-C),[]), 
                          verb(main+tv,exceed,active,inf,[prog],posP(PosP24)), 
                          [ arg(dirO(DirO25),np(3+pl,np_head(quantV(same,10),[],million),[]))], 
                          []))]))], 
             []))).
tmp : test80_result( "Which countries have a population exceeding 10 million ?", 
        i_sentence, 
        question80( [F&_156828-B], 
          pred( 
             quantV( 
                wh_det(F&_221724,F&_221724-B), 
                F&_211746-B, '`'(ti(country,B)),'`'(true), 
                [], 
                F&_211746-B), 
             identityQ(IdentityQ), 
             count_pred(F,population,B,C),C=E, 
             [ quantV( det(a), 
                 value&units&population-C, '`'(true),'`'(true), 
                 [ pred( 
                      quantV( identityQ(IdentityQ17), 
                        value&units&population-C, '`'(true),'`'(true), 
                        [], 
                        value&units&population-C), 
                      identityQ(IdentityQ18), 
                      exceeds(C,D), 
                      [ quantV( voidQ(VoidQ), 
                          value&units&population-D, '`'(D= --(10,million)),'`'(true), 
                          [], 
                          value&units&population-D)])], 
                 value&units&population-C), 
               quantV( voidQ(VoidQ20), 
                 value&units&population-E, '`'(true),'`'(true), 
                 [], 
                 _188200-E)]))).
tmp : test80_result( "Which countries have a population exceeding 10 million ?", 
        qplan, 
        answer80([Country]) :- 
          ti(country,Country) , 
          ^( Count, 
            ( exceeds(Count,--(10,million)) , 
              count_pred(Population,population,Country,Count)))).
tmp : test80_result( "Which countries with a population exceeding 10 million border the atlantic ?", 
        into_lexical_segs, 
        [ w( which, [
            pos(wdt), root(which),loc(1),lnks(3),txt("Which"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(1,1))), 
            link(2,SBAR,r(SBAR,seg(1,11))), link(3,'FRAG',r('FRAG',seg(1,12))),flair,upos(pron), 
            fner(o),fn('_')]), 
          w( countries, [
            pos(nns), root(country),loc(2),lnks(4), 
            txt("countries"),truecase('LOWER'), 
            link(1,VP,r(VP,seg(2,11))), 
            link(2,S,r(S,seg(2,11))), 
            link(3,SBAR,r(SBAR,seg(1,11))), link(4,'FRAG',r('FRAG',seg(1,12))),flair, 
            upos(noun),fner(o),fn('_')]), 
          w( with, [
            pos(in), root(with),loc(3),lnks(5),txt("with"), 
            truecase('LOWER'),link(1,'PP',r('PP',seg(3,11))), 
            link(2,VP,r(VP,seg(2,11))), 
            link(3,S,r(S,seg(2,11))), 
            link(4,SBAR,r(SBAR,seg(1,11))), 
            link(5,FRAG,r(FRAG,seg(1,12)))]), 
          w( a, [
            pos(dt), root(a),loc(4),lnks(7),txt("a"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(4,5))), 
            link(2,NP,r(NP,seg(4,11))), 
            link(3,PP,r(PP,seg(3,11))), 
            link(4,VP,r(VP,seg(2,11))), 
            link(5,S,r(S,seg(2,11))), 
            link(6,SBAR,r(SBAR,seg(1,11))), link(7,'FRAG',r('FRAG',seg(1,12))),flair, 
            upos(det),fner(o),fn('_')]), 
          w( population, [
            pos(nn), root(population),loc(5),lnks(7), 
            txt("population"),truecase('LOWER'), 
            link(1,NP,r(NP,seg(4,5))), 
            link(2,NP,r(NP,seg(4,11))), 
            link(3,PP,r(PP,seg(3,11))), 
            link(4,VP,r(VP,seg(2,11))), 
            link(5,S,r(S,seg(2,11))), 
            link(6,SBAR,r(SBAR,seg(1,11))), link(7,'FRAG',r('FRAG',seg(1,12))),flair, 
            upos(noun),fner(o),fn('_')]), 
          w( exceeding, [
            pos(vbg), root(exceed),loc(6),lnks(7), 
            txt("exceeding"),truecase('LOWER'), 
            link(1,VP,r(VP,seg(6,11))), 
            link(2,NP,r(NP,seg(4,11))), 
            link(3,PP,r(PP,seg(3,11))), 
            link(4,VP,r(VP,seg(2,11))), 
            link(5,S,r(S,seg(2,11))), 
            link(6,SBAR,r(SBAR,seg(1,11))), link(7,'FRAG',r('FRAG',seg(1,12))),allen_srl, 
            srl( exceeding, [
              o(ARG0,[a,population]), 
              o(V,[exceeding]), 
              o(ARG1,[10,million])]), flair,upos(verb),fner(o),fn('exceed.01')]), 
          w( '10', [
            pos(cd), root('10'),loc(7),lnks(9),txt("10"), 
            ner('NUMBER'),normalizedNER(10000000.0), 
            entitylink('10000000_(number)'), 
            link(1,QP,r(QP,seg(7,8))), 
            link(2,NP,r(NP,seg(7,9))), 
            link(3,VP,r(VP,seg(6,11))), 
            link(4,NP,r(NP,seg(4,11))), 
            link(5,PP,r(PP,seg(3,11))), 
            link(6,VP,r(VP,seg(2,11))), 
            link(7,S,r(S,seg(2,11))), 
            link(8,SBAR,r(SBAR,seg(1,11))), link(9,'FRAG',r('FRAG',seg(1,12))),flair, 
            upos(num),fner(o),fn('_')]), 
          w( million, [
            pos(cd), root(million),loc(8),lnks(9), 
            txt("million"),ner('NUMBER'), 
            normalizedNER(10000000.0),truecase('LOWER'), 
            entitylink('10000000_(number)'), 
            link(1,QP,r(QP,seg(7,8))), 
            link(2,NP,r(NP,seg(7,9))), 
            link(3,VP,r(VP,seg(6,11))), 
            link(4,NP,r(NP,seg(4,11))), 
            link(5,PP,r(PP,seg(3,11))), 
            link(6,VP,r(VP,seg(2,11))), 
            link(7,S,r(S,seg(2,11))), 
            link(8,SBAR,r(SBAR,seg(1,11))), link(9,'FRAG',r('FRAG',seg(1,12))),flair, 
            upos(num),fner(o),fn('_')]), 
          w( border, [
            pos(nn), root(border),loc(9),lnks(8),txt("border"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(7,9))), 
            link(2,VP,r(VP,seg(6,11))), 
            link(3,NP,r(NP,seg(4,11))), 
            link(4,PP,r(PP,seg(3,11))), 
            link(5,VP,r(VP,seg(2,11))), 
            link(6,S,r(S,seg(2,11))), 
            link(7,SBAR,r(SBAR,seg(1,11))), 
            link(8,FRAG,r(FRAG,seg(1,12)))]), 
          w( the, [
            pos(dt), root(the),loc(10),lnks(8),txt("the"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(10,11))), 
            link(2,VP,r(VP,seg(6,11))), 
            link(3,NP,r(NP,seg(4,11))), 
            link(4,PP,r(PP,seg(3,11))), 
            link(5,VP,r(VP,seg(2,11))), 
            link(6,S,r(S,seg(2,11))), 
            link(7,SBAR,r(SBAR,seg(1,11))), 
            link(8,FRAG,r(FRAG,seg(1,12)))]), 
          w( atlantic, [
            alt(pos(nn)), root(atlantic),pos(nnp),loc(11),lnks(8), 
            txt("atlantic"),truecase('INIT_UPPER'), 
            link(1,NP,r(NP,seg(10,11))), 
            link(2,VP,r(VP,seg(6,11))), 
            link(3,NP,r(NP,seg(4,11))), 
            link(4,PP,r(PP,seg(3,11))), 
            link(5,VP,r(VP,seg(2,11))), 
            link(6,S,r(S,seg(2,11))), 
            link(7,SBAR,r(SBAR,seg(1,11))), 
            link(8,FRAG,r(FRAG,seg(1,12)))]), 
          w( ?, [
            pos('.'), root(?),loc(12),lnks(1),txt("?"), 
            link(1,'FRAG',r('FRAG',seg(1,12))),flair, 
            upos(punct),fner(o),fn('_')])]).
tmp : test80_result( "Which countries with a population exceeding 10 million border the atlantic ?", 
        sentence80, 
        whq( thing&geo&Geo-B, 
          s( np( 3+pl, 
               np_head(wh_det(thing&geo&Geo,thing&geo&Geo-B),[],country), 
               [ prep_phrase( prep(with), 
                   np( 3+sg, 
                     np_head(det(a),[],population), 
                     [ reduced_rel( value&units&population-C, 
                         s( np(3+sg,wh(value&units&population-C),[]), 
                            verb(main+tv,exceed,active,inf,[prog],posP(PosP)), 
                            [ arg(dirO(DirO),np(3+pl,np_head(quantV(same,10),[],million),[]))], 
                            []))]))]), 
             verb(main+tv,border,active,pres+fin,[],posP(PosP24)), 
             [ arg(dirO(DirO25),np(3+sg,nameOf(atlantic,[]),[]))], 
             []))).
tmp : test80_result( "Which countries with a population exceeding 10 million border the atlantic ?", 
        i_sentence, 
        question80( [thing&geo&Geo-B], 
          pred( 
             quantV( 
                wh_det(thing&geo&Geo,thing&geo&Geo-B), 
                thing&geo&Geo-B, '`'(ti(country,B)),'`'(true), 
                [ ( quantV( det(a), 
                      value&units&population-C, 
                      '`'(count_pred(thing,population,B,C)), 
                      '`'(true), 
                      [ pred( 
                           quantV( identityQ(IdentityQ), 
                             value&units&population-C, '`'(true),'`'(true), 
                             [], 
                             value&units&population-C), 
                           identityQ(IdentityQ18), 
                           exceeds(C,D), 
                           [ quantV( voidQ(VoidQ), 
                               value&units&population-D, '`'(D= --(10,million)),'`'(true), 
                               [], 
                               value&units&population-D)])], 
                      value&units&population-C) & 
                    '`'(C=E)), 
                  quantV( voidQ(VoidQ20), 
                    value&units&population-E, '`'(true),'`'(true), 
                    [], 
                    _237142-E)], 
                thing&geo&Geo-B), 
             identityQ(IdentityQ21), 
             generic_pred(thing,border,B,F), 
             [ quantV( identityQ(IdentityQ22), 
                 thing&geo&seamass-F, '`'(named(F,atlantic)),'`'(true), 
                 [], 
                 thing&geo&seamass-F)]))).
tmp : test80_result( "Which countries with a population exceeding 10 million border the atlantic ?", 
        qplan, 
        answer80([Border_Country_Population]) :- 
          ^( Count, 
            ( count_pred(thing,population,Border_Country_Population,Count)  ,
              exceeds(Count,--(10,million)) , 
              ti(country,Border_Country_Population))) , 
          named(Generic_Atlantic,atlantic) , 
          generic_pred(thing,border,Border_Country_Population,Generic_Atlantic)).
tmp : test80_result( "Which country bordering the mediterranean borders a country that is bordered by a country whose population exceeds the population of india ?", 
        into_lexical_segs, 
        [ w( which, [
            pos(wdt), root(which),loc(1),lnks(2),txt("Which"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(1,2))), 
            link(2,'S',r('S',seg(1,22))),flair,upos(pron), 
            fner(o),fn('_')]), 
          w( country, [
            pos(nn), root(country),loc(2),lnks(2), 
            txt("country"),truecase('LOWER'), 
            link(1,NP,r(NP,seg(1,2))), 
            link(2,S,r(S,seg(1,22)))]), 
          w( bordering, [
            pos(vbg), root(border),loc(3),lnks(2), 
            txt("bordering"),truecase('LOWER'), 
            link(1,VP,r(VP,seg(3,21))), link(2,'S',r('S',seg(1,22))),allen_srl, 
            srl( bordering, [
              o(ARG0,[Which,country]), 
              o(V,[bordering]), 
              o(ARG1,[the,mediterranean])])]), 
          w( the, [
            pos(dt), root(the),loc(4),lnks(3),txt("the"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(4,6))), 
            link(2,VP,r(VP,seg(3,21))), link(3,'S',r('S',seg(1,22))),spacy,spos(dt), 
            loc(1),txt("The"),dep_parent(det,n(rhine,2)), 
            node(n(the,1)),flair,upos(det),fner(o), 
            fn('_')]), 
          w( mediterranean, [
            alt(pos(jj)), root(mediterranean),pos(nnp),loc(5), 
            lnks(3),txt("mediterranean"), 
            truecase('INIT_UPPER'),link(1,'NP',r('NP',seg(4,6))), 
            link(2,VP,r(VP,seg(3,21))), 
            link(3,S,r(S,seg(1,22)))]), 
          w( borders, [
            root(border), loc(6),lnks(3),txt("borders"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(4,6))), 
            link(2,VP,r(VP,seg(3,21))), link(3,'S',r('S',seg(1,22))),old_pos(nns),pos(vb), 
            allen_srl, 
            srl( borders, [
              o(ARG1,[Which,country,bordering,the,mediterranean]), 
              o(V,[borders]), 
              o( 'ARG2', [
                a, country,that,is,bordered,by, 
                a,country,whose,population, 
                exceeds,the,population,of,india])])]), 
          w( a, [
            pos(dt), root(a),loc(7),lnks(4),txt("a"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(7,8))), 
            link(2,NP,r(NP,seg(7,21))), 
            link(3,VP,r(VP,seg(3,21))), link(4,'S',r('S',seg(1,22))),flair,upos(det), 
            fner(o),fn('_')]), 
          w( country, [
            pos(nn), root(country),loc(8),lnks(4), 
            txt("country"),truecase('LOWER'), 
            link(1,NP,r(NP,seg(7,8))), 
            link(2,NP,r(NP,seg(7,21))), 
            link(3,VP,r(VP,seg(3,21))), 
            link(4,S,r(S,seg(1,22)))]), 
          w( that, [
            pos(wdt), root(that),loc(9),lnks(5),txt("that"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(9,9))), 
            link(2,SBAR,r(SBAR,seg(9,21))), 
            link(3,NP,r(NP,seg(7,21))), 
            link(4,VP,r(VP,seg(3,21))), 
            link(5,S,r(S,seg(1,22)))]), 
          w( is, [
            alt(pos(vbz)), root(be),loc(10),lnks(6),txt("is"), 
            truecase('LOWER'),link(1,'VP',r('VP',seg(10,21))), 
            link(2,S,r(S,seg(10,21))), 
            link(3,SBAR,r(SBAR,seg(9,21))), 
            link(4,NP,r(NP,seg(7,21))), 
            link(5,VP,r(VP,seg(3,21))), link(6,'S',r('S',seg(1,22))),old_pos(aux),pos(vb), 
            allen_srl,srl(is,[o('V',[is])])]), 
          w( bordered, [
            pos(vbn), root(border),loc(11),lnks(7), 
            txt("bordered"),truecase('LOWER'), 
            link(1,VP,r(VP,seg(11,21))), 
            link(2,VP,r(VP,seg(10,21))), 
            link(3,S,r(S,seg(10,21))), 
            link(4,SBAR,r(SBAR,seg(9,21))), 
            link(5,NP,r(NP,seg(7,21))), 
            link(6,VP,r(VP,seg(3,21))), link(7,'S',r('S',seg(1,22))),allen_srl, 
            srl( bordered, [
              o(ARG2,[a,country]), o('R-ARG2',[that]),o('V',[bordered]), 
              o( 'ARG1', [
                by, a,country,whose,population, 
                exceeds,the,population,of,india])])]), 
          w( by, [
            pos(in), root(by),loc(12),lnks(8),txt("by"), 
            truecase('LOWER'),link(1,'PP',r('PP',seg(12,21))), 
            link(2,VP,r(VP,seg(11,21))), 
            link(3,VP,r(VP,seg(10,21))), 
            link(4,S,r(S,seg(10,21))), 
            link(5,SBAR,r(SBAR,seg(9,21))), 
            link(6,NP,r(NP,seg(7,21))), 
            link(7,VP,r(VP,seg(3,21))), 
            link(8,S,r(S,seg(1,22)))]), 
          w( a, [
            pos(dt), root(a),loc(13),lnks(10),txt("a"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(13,14))), 
            link(2,NP,r(NP,seg(13,21))), 
            link(3,PP,r(PP,seg(12,21))), 
            link(4,VP,r(VP,seg(11,21))), 
            link(5,VP,r(VP,seg(10,21))), 
            link(6,S,r(S,seg(10,21))), 
            link(7,SBAR,r(SBAR,seg(9,21))), 
            link(8,NP,r(NP,seg(7,21))), 
            link(9,VP,r(VP,seg(3,21))), 
            link(10,S,r(S,seg(1,22)))]), 
          w( country, [
            pos(nn), root(country),loc(14),lnks(10), 
            txt("country"),truecase('LOWER'), 
            link(1,NP,r(NP,seg(13,14))), 
            link(2,NP,r(NP,seg(13,21))), 
            link(3,PP,r(PP,seg(12,21))), 
            link(4,VP,r(VP,seg(11,21))), 
            link(5,VP,r(VP,seg(10,21))), 
            link(6,S,r(S,seg(10,21))), 
            link(7,SBAR,r(SBAR,seg(9,21))), 
            link(8,NP,r(NP,seg(7,21))), 
            link(9,VP,r(VP,seg(3,21))), 
            link(10,S,r(S,seg(1,22)))]), 
          w( whose, [
            pos('wp$'), root(whose),loc(15),lnks(11),txt("whose"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(15,16))), 
            link(2,SBAR,r(SBAR,seg(15,21))), 
            link(3,NP,r(NP,seg(13,21))), 
            link(4,PP,r(PP,seg(12,21))), 
            link(5,VP,r(VP,seg(11,21))), 
            link(6,VP,r(VP,seg(10,21))), 
            link(7,S,r(S,seg(10,21))), 
            link(8,SBAR,r(SBAR,seg(9,21))), 
            link(9,NP,r(NP,seg(7,21))), 
            link(10,VP,r(VP,seg(3,21))), 
            link(11,S,r(S,seg(1,22)))]), 
          w( population, [
            pos(nn), root(population),loc(16),lnks(11), 
            txt("population"),truecase('LOWER'), 
            link(1,NP,r(NP,seg(15,16))), 
            link(2,SBAR,r(SBAR,seg(15,21))), 
            link(3,NP,r(NP,seg(13,21))), 
            link(4,PP,r(PP,seg(12,21))), 
            link(5,VP,r(VP,seg(11,21))), 
            link(6,VP,r(VP,seg(10,21))), 
            link(7,S,r(S,seg(10,21))), 
            link(8,SBAR,r(SBAR,seg(9,21))), 
            link(9,NP,r(NP,seg(7,21))), 
            link(10,VP,r(VP,seg(3,21))), link(11,'S',r('S',seg(1,22))),flair,upos(noun), 
            fner(o),fn('_')]), 
          w( exceeds, [
            pos(vbz), root(exceed),loc(17),lnks(12), 
            txt("exceeds"),truecase('LOWER'), 
            link(1,VP,r(VP,seg(17,21))), 
            link(2,S,r(S,seg(17,21))), 
            link(3,SBAR,r(SBAR,seg(15,21))), 
            link(4,NP,r(NP,seg(13,21))), 
            link(5,PP,r(PP,seg(12,21))), 
            link(6,VP,r(VP,seg(11,21))), 
            link(7,VP,r(VP,seg(10,21))), 
            link(8,S,r(S,seg(10,21))), 
            link(9,SBAR,r(SBAR,seg(9,21))), 
            link(10,NP,r(NP,seg(7,21))), 
            link(11,VP,r(VP,seg(3,21))), link(12,'S',r('S',seg(1,22))),allen_srl, 
            srl( exceeds, [
              o(ARG0,[a,country]), 
              o(R-ARG0,[whose,population]), 
              o(V,[exceeds]), 
              o(ARG1,[the,population,of,india])])]), 
          w( the, [
            pos(dt), root(the),loc(18),lnks(14),txt("the"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(18,19))), 
            link(2,NP,r(NP,seg(18,21))), 
            link(3,VP,r(VP,seg(17,21))), 
            link(4,S,r(S,seg(17,21))), 
            link(5,SBAR,r(SBAR,seg(15,21))), 
            link(6,NP,r(NP,seg(13,21))), 
            link(7,PP,r(PP,seg(12,21))), 
            link(8,VP,r(VP,seg(11,21))), 
            link(9,VP,r(VP,seg(10,21))), 
            link(10,S,r(S,seg(10,21))), 
            link(11,SBAR,r(SBAR,seg(9,21))), 
            link(12,NP,r(NP,seg(7,21))), 
            link(13,VP,r(VP,seg(3,21))), 
            link(14,S,r(S,seg(1,22)))]), 
          w( population, [
            pos(nn), root(population),loc(19),lnks(14), 
            txt("population"),truecase('LOWER'), 
            link(1,NP,r(NP,seg(18,19))), 
            link(2,NP,r(NP,seg(18,21))), 
            link(3,VP,r(VP,seg(17,21))), 
            link(4,S,r(S,seg(17,21))), 
            link(5,SBAR,r(SBAR,seg(15,21))), 
            link(6,NP,r(NP,seg(13,21))), 
            link(7,PP,r(PP,seg(12,21))), 
            link(8,VP,r(VP,seg(11,21))), 
            link(9,VP,r(VP,seg(10,21))), 
            link(10,S,r(S,seg(10,21))), 
            link(11,SBAR,r(SBAR,seg(9,21))), 
            link(12,NP,r(NP,seg(7,21))), 
            link(13,VP,r(VP,seg(3,21))), 
            link(14,S,r(S,seg(1,22)))]), 
          w( of, [
            pos(in), root(of),loc(20),lnks(14),txt("of"), 
            truecase('LOWER'),link(1,'PP',r('PP',seg(20,21))), 
            link(2,NP,r(NP,seg(18,21))), 
            link(3,VP,r(VP,seg(17,21))), 
            link(4,S,r(S,seg(17,21))), 
            link(5,SBAR,r(SBAR,seg(15,21))), 
            link(6,NP,r(NP,seg(13,21))), 
            link(7,PP,r(PP,seg(12,21))), 
            link(8,VP,r(VP,seg(11,21))), 
            link(9,VP,r(VP,seg(10,21))), 
            link(10,S,r(S,seg(10,21))), 
            link(11,SBAR,r(SBAR,seg(9,21))), 
            link(12,NP,r(NP,seg(7,21))), 
            link(13,VP,r(VP,seg(3,21))), 
            link(14,S,r(S,seg(1,22)))]), 
          w( india, [
            pos(nnp), root(india),loc(21),lnks(15),txt("india"), 
            ner('COUNTRY'),truecase('INIT_UPPER'), 
            entitylink('India'),corefed,#(1), 
            txt(["india"]),type('PROPER'), 
            numb('SINGULAR'),gender('NEUTRAL'), 
            animacy('INANIMATE'),repm(@(true)), 
            link(1,NP,r(NP,seg(21,21))), 
            link(2,PP,r(PP,seg(20,21))), 
            link(3,NP,r(NP,seg(18,21))), 
            link(4,VP,r(VP,seg(17,21))), 
            link(5,S,r(S,seg(17,21))), 
            link(6,SBAR,r(SBAR,seg(15,21))), 
            link(7,NP,r(NP,seg(13,21))), 
            link(8,PP,r(PP,seg(12,21))), 
            link(9,VP,r(VP,seg(11,21))), 
            link(10,VP,r(VP,seg(10,21))), 
            link(11,S,r(S,seg(10,21))), 
            link(12,SBAR,r(SBAR,seg(9,21))), 
            link(13,NP,r(NP,seg(7,21))), 
            link(14,VP,r(VP,seg(3,21))), 
            link(15,S,r(S,seg(1,22)))]), 
          w( ?, [
            pos('.'), root(?),loc(22),lnks(1),txt("?"), 
            link(1,'S',r('S',seg(1,22))),spacy,spos('.'), 
            loc(7),dep_parent(punct,n(flows,3)),node(n(?,7)), 
            flair,upos(punct),fner(o),fn('_')])]).
tmp : test80_result( "Which country bordering the mediterranean borders a country that is bordered by a country whose population exceeds the population of india ?", 
        sentence80, 
        whq( thing&geo&Geo-B, 
          s( np( 3+sg, 
               np_head(wh_det(thing&geo&Geo,thing&geo&Geo-B),[],country), 
               [ reduced_rel( thing&geo&Geo-B, 
                   s( np(3+sg,wh(thing&geo&Geo-B),[]), 
                      verb(main+tv,border,active,inf,[prog],posP(PosP)), 
                      [ arg(dirO(DirO),np(3+sg,nameOf(mediterranean,[]),[]))], 
                      []))]), 
             verb(main+tv,border,active,pres+fin,[],posP(PosP34)), 
             [ arg( dirO(DirO35), 
                 np( 3+sg, 
                   np_head(det(a),[],country), 
                   [ reduced_rel( thing&geo&J-D, 
                       s( np(3+sg,pronoun(neut,3+sg),[]), 
                          verb(aux+be(Be),be(Be),active,pres+fin,[],posP(PosP37)), 
                          [ arg(dirO(DirO38),np(3+sg,wh(thing&geo&J-D),[]))], 
                          [])), 
                     reduced_rel( thing&geo&J-D, 
                       s( np(3+sg,wh(thing&geo&J-D),[]), 
                          verb(main+tv,border,passive,inf,[],posP(PosP39)), 
                          [], 
                          [ prep_phrase( prep(by), 
                              np( 3+sg, 
                                np_head(det(a),[],country), 
                                [ rel( thing&geo&Geo23-E, 
                                    s( np( 3+sg, 
                                         np_head(det(the(sg)),[],population), 
                                         [ prep_phrase(poss(Poss),np(3+sg,wh(thing&geo&Geo23-E),[]))]), 
                                       verb(main+tv,exceed,active,pres+fin,[],posP(PosP41)), 
                                       [ arg( dirO(DirO42), 
                                           np(3+sg,np_head(det(the(sg)),[],population),[prep_phrase(prep(of),np(3+sg,nameOf(india,[]),[]))]))], 
                                       []))]))]))]))], 
             []))).
tmp : test80_result( "Which country bordering the mediterranean borders a country that is bordered by a country whose population exceeds the population of india ?", 
        i_sentence, 
        question80( [thing&geo&Geo-B], 
          pred( 
             quantV( 
                wh_det(thing&geo&Geo,thing&geo&Geo-B), 
                thing&geo&Geo-B, '`'(ti(country,B)),'`'(true), 
                [ pred( 
                     quantV( identityQ(IdentityQ), 
                       thing&geo&Geo-B, '`'(true),'`'(true), 
                       [], 
                       thing&geo&Geo-B), 
                     identityQ(IdentityQ18), 
                     generic_pred(thing,border,B,C), 
                     [ quantV( identityQ(IdentityQ19), 
                         thing&geo&seamass-C, '`'(named(C,mediterranean)),'`'(true), 
                         [], 
                         thing&geo&seamass-C)])], 
                thing&geo&Geo-B), 
             identityQ(IdentityQ20), 
             generic_pred(thing,border,B,D), 
             [ quantV( det(a), 
                 thing&geo&J-D, '`'(ti(country,D)),'`'(true), 
                 [ pred( 
                      quantV( identityQ(IdentityQ21), 
                        thing&geo&J-I, 
                        `(qualifiedBy(I,thing&geo&J,pronoun(neut,3+sg))), 
                        '`'(true), 
                        [], 
                        thing&geo&J-I), 
                      identityQ(IdentityQ22), 
                      subsumed_by(I,D), 
                      [ quantV( identityQ(IdentityQ23), 
                          thing&geo&J-D, '`'(true),'`'(true), 
                          [], 
                          thing&geo&J-D)]), 
                   pred( 
                      quantV( identityQ(IdentityQ24), 
                        thing&geo&J-D, '`'(true),'`'(true), 
                        [], 
                        thing&geo&J-D), 
                      identityQ(IdentityQ25), 
                      generic_pred(thing,border,E,D), 
                      [ quantV( det(a), 
                          thing&geo&Geo37-E, 
                          '`'(ti(country,E)), 
                          ( pred( 
                               quantV( det(the(sg)), 
                                 value&units&population-F, 
                                 '`'(count_pred(thing,population,E,F)), 
                                 '`'(true), 
                                 [ quantV( identityQ(IdentityQ26), 
                                     thing&geo&Geo37-E, '`'(true),'`'(true), 
                                     [], 
                                     thing&geo&Geo37-E)], 
                                 value&units&population-F), 
                               identityQ(IdentityQ27), 
                               exceeds(F,G), 
                               [ quantV( det(the(sg)), 
                                   value&units&population-G, 
                                   '`'(count_pred(thing,population,H,G)), 
                                   '`'(true), 
                                   [ quantV( identityQ(IdentityQ28), 
                                       thing&geo&country-H, '`'(named(H,india)),'`'(true), 
                                       [], 
                                       thing&geo&country-H)], 
                                   value&units&population-G)]) & 
                            '`'(true)), 
                          [], 
                          thing&geo&Geo37-E)])], 
                 thing&geo&J-D)]))).
tmp : test80_result( "Which country bordering the mediterranean borders a country that is bordered by a country whose population exceeds the population of india ?", 
        qplan, 
        answer80([Border_Country]) :- 
          named(Generic_Mediterranean,mediterranean) , 
          ti(country,Border_Country) , 
          generic_pred(thing,border,Border_Country,Generic_Mediterranean) , 
          ^( Generic_By_Country25, 
            ( ^( Border_Population_Country19, 
                ( ti(country,Border_Population_Country19)  ,
                  ^( Count_Exceeds, 
                    ( count_pred(thing,population,Border_Population_Country19,Count_Exceeds) , 
                      ^( Exceeds_Count, 
                        ( named(Population_India,india)  ,
                          count_pred(thing,population,Population_India,Exceeds_Count) , 
                          exceeds(Count_Exceeds,Exceeds_Count))))) , 
                  qualifiedBy(Subsumed_by,thing&geo&Geo,pronoun(neut,3+sg)) , 
                  ti(country,Generic_By_Country25) , 
                  subsumed_by(Subsumed_by,Generic_By_Country25) , 
                  generic_pred(thing,border,Border_Population_Country19,Generic_By_Country25))) , 
              generic_pred(thing,border,Border_Country,Generic_By_Country25)))).
tmp : test80_result( "Which country's capital is london ?", 
        into_lexical_segs, 
        [ w( which, [
            pos(wdt), root(which),loc(1),lnks(3),txt("Which"), 
            truecase('INIT_UPPER'),link(1,'NP',r('NP',seg(1,3))), 
            link(2,'NP',r('NP',seg(1,4))),link(3,'S',r('S',seg(1,7))), 
            flair,upos(pron),fner(o),fn('_')]), 
          w( country, [
            pos(nn), root(country),loc(2),lnks(3), 
            txt("country"),truecase('INIT_UPPER'), 
            link(1,NP,r(NP,seg(1,3))), 
            link(2,NP,r(NP,seg(1,4))), link(3,'S',r('S',seg(1,7))),flair,upos(noun), 
            fner(o),fn('_')]), 
          w( '\'s', [
            pos(pos), root('\'s'),loc(3),lnks(3),txt("'s"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(1,3))), 
            link(2,NP,r(NP,seg(1,4))), 
            link(3,S,r(S,seg(1,7)))]), 
          w( capital, [
            pos(nn), root(capital),loc(4),lnks(2), 
            txt("capital"),truecase('LOWER'), 
            link(1,NP,r(NP,seg(1,4))), 
            link(2,S,r(S,seg(1,7)))]), 
          w( is, [
            alt(pos(vbz)), root(be),loc(5),lnks(2),txt("is"), 
            truecase('LOWER'),link(1,'VP',r('VP',seg(5,6))), 
            link(2,'S',r('S',seg(1,7))),old_pos(aux),pos(vb), 
            allen_srl,srl(is,[o('V',[is])]), 
            flair,upos(verb),fner(o),fn('be.03')]), 
          w( london, [
            alt(pos(nnp)), root(london),pos(jj),loc(6),lnks(3), 
            txt("london"),truecase('INIT_UPPER'),corefed, 
            #(1),txt(["london"]),type('PROPER'), 
            numb('SINGULAR'),gender('UNKNOWN'), 
            animacy('INANIMATE'),repm(@(true)), 
            link(1,ADJP,r(ADJP,seg(6,6))), 
            link(2,VP,r(VP,seg(5,6))), 
            link(3,S,r(S,seg(1,7)))]), 
          w( ?, [
            pos('.'), root(?),loc(7),lnks(1),txt("?"), 
            link(1,'S',r('S',seg(1,7))),flair,upos(punct), 
            fner(o),fn('_')])]).
tmp : test80_result( "Which country's capital is london ?", 
        sentence80, 
        whq( thing&Country&country-B, 
          s( np( 3+sg, 
               np_head(det(the(sg)),[],capital), 
               [ prep_phrase( poss(Poss), 
                   np( 3+sg, 
                     np_head(wh_det(thing&Country&country,thing&Country&country-B),[],country), 
                     []))]), 
             verb(aux+be(Be),be(Be),active,pres+fin,[],posP(PosP)), 
             [ arg(dirO(DirO),np(3+sg,nameOf(london,[]),[]))], 
             []))).
tmp : test80_result( "Which country's capital is london ?", 
        i_sentence, 
        question80( [thing&Country&country-B], 
          pred( 
             quantV( det(the(sg)), 
               thing&City&city-C, 
               '`'(specific_pred(thing,nation_capital,B,C)), 
               '`'(true), 
               [ quantV( 
                    wh_det(thing&Country&country,thing&Country&country-B), 
                    thing&Country&country-B, '`'(ti(country,B)),'`'(true), 
                    [], 
                    thing&Country&country-B)], 
               thing&City&city-C), 
             identityQ(IdentityQ), 
             subsumed_by(C,D), 
             [ quantV( identityQ(IdentityQ18), 
                 thing&City&city-D, '`'(named(D,london)),'`'(true), 
                 [], 
                 thing&City&city-D)]))).
tmp : test80_result( "Which country's capital is london ?", 
        qplan, 
        answer80([Nation_capital_Country]) :-  
          ^( Specific_Subsumed_by, 
            ( ti(country,Nation_capital_Country)  ,
              specific_pred(thing,nation_capital,Nation_capital_Country,Specific_Subsumed_by) , 
              named(By_London,london) , 
              subsumed_by(Specific_Subsumed_by,By_London)))).
tmp : test80_result( "Which is the largest african country ?", 
        into_lexical_segs, 
        [ w( which, [
            pos(wdt), root(which),loc(1),lnks(2),txt("Which"), 
            truecase('INIT_UPPER'),link(1,'NP',r('NP',seg(1,1))), 
            link(2,'SBAR',r('SBAR',seg(1,7))),flair,upos(pron), 
            fner(o),fn('_')]), 
          w( is, [
            alt(pos(vbz)), root(be),loc(2),lnks(3),txt("is"), 
            truecase('LOWER'),link(1,'VP',r('VP',seg(2,6))), 
            link(2,S,r(S,seg(2,6))), link(3,'SBAR',r('SBAR',seg(1,7))),old_pos(aux), 
            pos(vb),allen_srl, 
            srl( is, [
              o(ARG1,[Which]), 
              o(V,[is]), 
              o(ARG2,[the,largest,african,country])]), flair,upos(verb),fner(o),fn('be.01')]), 
          w( the, [
            pos(dt), root(the),loc(3),lnks(4),txt("the"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(3,6))), 
            link(2,VP,r(VP,seg(2,6))), 
            link(3,S,r(S,seg(2,6))), link(4,'SBAR',r('SBAR',seg(1,7))),spacy,spos(dt), 
            loc(1),txt("The"),dep_parent(det,n(rhine,2)), 
            node(n(the,1))]), 
          w( largest, [
            pos(jjs), root(largest),loc(4),lnks(4), 
            txt("largest"),truecase('LOWER'), 
            link(1,NP,r(NP,seg(3,6))), 
            link(2,VP,r(VP,seg(2,6))), 
            link(3,S,r(S,seg(2,6))), 
            link(4,SBAR,r(SBAR,seg(1,7)))]), 
          w( african, [
            pos(jj), root(african),loc(5),lnks(4), 
            txt("african"),ner('NATIONALITY'), 
            truecase('INIT_UPPER'),entitylink('Africa'), 
            link(1,NP,r(NP,seg(3,6))), 
            link(2,VP,r(VP,seg(2,6))), 
            link(3,S,r(S,seg(2,6))), 
            link(4,SBAR,r(SBAR,seg(1,7)))]), 
          w( country, [
            pos(nn), root(country),loc(6),lnks(4), 
            txt("country"),truecase('LOWER'), 
            link(1,NP,r(NP,seg(3,6))), 
            link(2,VP,r(VP,seg(2,6))), 
            link(3,S,r(S,seg(2,6))), link(4,'SBAR',r('SBAR',seg(1,7))),flair, 
            upos(noun),fner(o),fn('_')]), 
          w( ?, [
            pos('.'), root(?),loc(7),lnks(1),txt("?"), 
            link(1,'SBAR',r('SBAR',seg(1,7))),spacy,spos('.'), 
            loc(6),dep_parent(punct,n(flows,3)),node(n(?,6)), 
            flair,upos(punct),fner(o),fn('_')])]).
tmp : test80_result( "Which is the largest african country ?", 
        sentence80, 
        whq( thing&Thing-B, 
          s( np(3+_141856,wh(thing&Thing-B),[]), 
             verb(aux+be(Be),be(Be),active,pres+fin,[],posP(PosP)), 
             [ arg( dirO(DirO), 
                 np(3+sg,np_head(det(the(sg)),[sup(most,adj(large)),adj(african)],country),[]))], 
             []))).
tmp : test80_result( "Which is the largest african country ?", 
        i_sentence, 
        question80( [thing&Thing-B], 
          pred( 
             quantV( identityQ(IdentityQ), 
               thing&Thing-B, '`'(true),'`'(true), 
               [], 
               thing&Thing-B), 
             identityQ(IdentityQ18), 
             subsumed_by(B,C), 
             [ quantV( det(the(sg)), 
                 thing&Thing-C, 
                 aggr( max, 
                   C, 
                   [E,F], 
                   '`'(ti(country,F)), 
                   '`'(measure_pred(thing,area,F,E))&'`'(ti(african,F))&'`'(true)), 
                 '`'(true), 
                 [], 
                 thing&Thing-C)]))).
tmp : test80_result( "Which is the largest african country ?", 
        qplan, 
        answer80([Subsumed_by]) :-  
          ^( By_Aggregate80, 
            ( ^( SetOf_Max, 
                ( setOf( Measure_Kw:African_Area_Country, 
                    ( ti(country,African_Area_Country)  ,
                      measure_pred(thing,area,African_Area_Country,Measure_Kw) , 
                      ti(african,African_Area_Country)), 
                    SetOf_Max) , 
                  aggregate80(max,SetOf_Max,By_Aggregate80))) , 
              subsumed_by(Subsumed_by,By_Aggregate80)))).
tmp : test80_result( "Which rivers are not in asia ?", 
        into_lexical_segs, 
        [ w( which, [
            pos(wdt), root(which),loc(1),lnks(2),txt("Which"), 
            truecase('INIT_UPPER'),link(1,'NP',r('NP',seg(1,2))), 
            link(2,'SBAR',r('SBAR',seg(1,7))),flair,upos(pron), 
            fner(o),fn('_')]), 
          w( rivers, [
            pos(nns), root(river),loc(2),lnks(2),txt("rivers"), 
            truecase('INIT_UPPER'),corefed,#(1), 
            txt(["rivers"]),type('NOMINAL'), 
            numb('PLURAL'),gender('UNKNOWN'), 
            animacy('INANIMATE'),repm(@(true)), 
            link(1,NP,r(NP,seg(1,2))), 
            link(2,SBAR,r(SBAR,seg(1,7)))]), 
          w( are, [
            alt(pos(vbp)), root(be),loc(3),lnks(3),txt("are"), 
            truecase('LOWER'),link(1,'VP',r('VP',seg(3,6))), 
            link(2,S,r(S,seg(3,6))), link(3,'SBAR',r('SBAR',seg(1,7))),old_pos(aux), 
            pos(vb),allen_srl, 
            srl( are, [
              o(ARG1,[Which,rivers]), o('V',[are]),o('ARGM-NEG',[not]), 
              o(ARG2,[in,asia])])]), 
          w( not, [
            pos(rb), root(not),loc(4),lnks(3),txt("not"), 
            truecase('LOWER'),link(1,'VP',r('VP',seg(3,6))), 
            link(2,S,r(S,seg(3,6))), 
            link(3,SBAR,r(SBAR,seg(1,7)))]), 
          w( in, [
            pos(in), root(in),loc(5),lnks(4),txt("in"), 
            truecase('LOWER'),link(1,'PP',r('PP',seg(5,6))), 
            link(2,VP,r(VP,seg(3,6))), 
            link(3,S,r(S,seg(3,6))), 
            link(4,SBAR,r(SBAR,seg(1,7)))]), 
          w( asia, [
            alt(pos(nn)), root(asia),pos(nnp),loc(6),lnks(5), 
            txt("asia"),truecase('INIT_UPPER'), 
            link(1,NP,r(NP,seg(6,6))), 
            link(2,PP,r(PP,seg(5,6))), 
            link(3,VP,r(VP,seg(3,6))), 
            link(4,S,r(S,seg(3,6))), 
            link(5,SBAR,r(SBAR,seg(1,7)))]), 
          w( ?, [
            pos('.'), root(?),loc(7),lnks(1),txt("?"), 
            link(1,'SBAR',r('SBAR',seg(1,7))),flair, 
            upos(punct),fner(o),fn('_')])]).
tmp : test80_result( "Which rivers are not in asia ?", 
        sentence80, 
        whq( thing&Thing-B, 
          s( np(3+pl,np_head(wh_det(thing&Thing,thing&Thing-B),[],river),[]), 
             verb(aux+be(Be),be(Be),active,pres+fin,[],negP(NegP)), 
             [ arg(arg_pred(Arg22),prep_phrase(prep(in),np(3+sg,nameOf(asia,[]),[])))], 
             []))).
tmp : test80_result( "Which rivers are not in asia ?", 
        i_sentence, 
        question80( [thing&Thing-B], 
          pred( 
             quantV( 
                wh_det(thing&Thing,thing&Thing-B), 
                thing&Thing-B, '`'(ti(river,B)),'`'(true), 
                [], 
                thing&Thing-B), notP,true, 
             [ '`'(trans_pred(thing,contain,C,B)), 
               quantV( identityQ(IdentityQ), 
                 thing&geo&continent-C, '`'(named(C,asia)),'`'(true), 
                 [], 
                 thing&geo&continent-C)]))).
tmp : test80_result( "Which rivers are not in asia ?", 
        qplan, 
        answer80([River]) :- 
          ti(river,River) , 
          \+ (named(Contain_Asia,asia),trans_pred(thing,contain,Contain_Asia,River))).
tmp : test80_result( "What rivers are in countries bordering the baltic ?", 
        into_lexical_segs, 
        [ w( what, [
            alt(pos(wdt)), root(what),pos(wp),loc(1),lnks(2), 
            txt("What"),truecase('INIT_UPPER'), 
            link(1,NP,r(NP,seg(1,2))), 
            link(2,SBAR,r(SBAR,seg(1,9)))]), 
          w( rivers, [
            pos(nns), root(river),loc(2),lnks(2),txt("rivers"), 
            truecase('LOWER'),corefed,#(1), 
            txt(["rivers"]),type('NOMINAL'), 
            numb('PLURAL'),gender('UNKNOWN'), 
            animacy('INANIMATE'),repm(@(true)), 
            link(1,NP,r(NP,seg(1,2))), link(2,'SBAR',r('SBAR',seg(1,9))),flair, 
            upos(noun),fner(o),fn('_')]), 
          w( are, [
            alt(pos(vbp)), root(be),loc(3),lnks(3),txt("are"), 
            truecase('LOWER'),link(1,'VP',r('VP',seg(3,8))), 
            link(2,S,r(S,seg(3,8))), link(3,'SBAR',r('SBAR',seg(1,9))),old_pos(aux), 
            pos(vb),allen_srl, 
            srl( are, [
              o(ARG1,[What,rivers]), 
              o(V,[are]), 
              o(ARG2,[in,countries,bordering,the,baltic])]), flair,upos(verb),fner(o),fn('be.01')]), 
          w( in, [
            pos(in), root(in),loc(4),lnks(4),txt("in"), 
            truecase('LOWER'),link(1,'PP',r('PP',seg(4,8))), 
            link(2,VP,r(VP,seg(3,8))), 
            link(3,S,r(S,seg(3,8))), link(4,'SBAR',r('SBAR',seg(1,9))),flair,upos(adp), 
            fner(o),fn('_')]), 
          w( countries, [
            pos(nns), root(country),loc(5),lnks(6), 
            txt("countries"),truecase('LOWER'), 
            link(1,NP,r(NP,seg(5,5))), 
            link(2,NP,r(NP,seg(5,8))), 
            link(3,PP,r(PP,seg(4,8))), 
            link(4,VP,r(VP,seg(3,8))), 
            link(5,S,r(S,seg(3,8))), 
            link(6,SBAR,r(SBAR,seg(1,9)))]), 
          w( bordering, [
            pos(vbg), root(border),loc(6),lnks(6), 
            txt("bordering"),truecase('LOWER'), 
            link(1,VP,r(VP,seg(6,8))), 
            link(2,NP,r(NP,seg(5,8))), 
            link(3,PP,r(PP,seg(4,8))), 
            link(4,VP,r(VP,seg(3,8))), 
            link(5,S,r(S,seg(3,8))), link(6,'SBAR',r('SBAR',seg(1,9))),allen_srl, 
            srl( bordering, [
              o(ARG2,[countries]), 
              o(V,[bordering]), 
              o(ARG1,[the,baltic])])]), 
          w( the, [
            pos(dt), root(the),loc(7),lnks(7),txt("the"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(7,8))), 
            link(2,VP,r(VP,seg(6,8))), 
            link(3,NP,r(NP,seg(5,8))), 
            link(4,PP,r(PP,seg(4,8))), 
            link(5,VP,r(VP,seg(3,8))), 
            link(6,S,r(S,seg(3,8))), link(7,'SBAR',r('SBAR',seg(1,9))),spacy,spos(dt), 
            loc(1),txt("The"),dep_parent(det,n(rhine,2)), 
            node(n(the,1))]), 
          w( baltic, [
            alt(pos(jj)), root(baltic),pos(nnp),loc(8),lnks(7), 
            txt("baltic"),truecase('INIT_UPPER'), 
            link(1,NP,r(NP,seg(7,8))), 
            link(2,VP,r(VP,seg(6,8))), 
            link(3,NP,r(NP,seg(5,8))), 
            link(4,PP,r(PP,seg(4,8))), 
            link(5,VP,r(VP,seg(3,8))), 
            link(6,S,r(S,seg(3,8))), 
            link(7,SBAR,r(SBAR,seg(1,9)))]), 
          w( ?, [
            pos('.'), root(?),loc(9),lnks(1),txt("?"), 
            link(1,'SBAR',r('SBAR',seg(1,9))),spacy,spos('.'), 
            loc(7),dep_parent(punct,n(flows,3)),node(n(?,7)), 
            flair,upos(punct),fner(o),fn('_')])]).
tmp : test80_result( "What rivers are in countries bordering the baltic ?", 
        sentence80, 
        whq( thing&Thing-B, 
          s( np(3+pl,np_head(wh_det(thing&Thing,thing&Thing-B),[],river),[]), 
             verb(aux+be(Be),be(Be),active,pres+fin,[],posP(PosP)), 
             [ arg( arg_pred(Arg27), 
                 prep_phrase( prep(in), 
                   np( 3+pl, 
                     np_head(generic(Generic28),[],country), 
                     [ reduced_rel( thing&geo&Geo-C, 
                         s( np(3+pl,wh(thing&geo&Geo-C),[]), 
                            verb(main+tv,border,active,inf,[prog],posP(PosP29)), 
                            [ arg(dirO(DirO),np(3+sg,nameOf(baltic,[]),[]))], 
                            []))])))], 
             []))).
tmp : test80_result( "What rivers are in countries bordering the baltic ?", 
        i_sentence, 
        question80( [thing&Thing-B], 
          pred( 
             quantV( 
                wh_det(thing&Thing,thing&Thing-B), 
                thing&Thing-B, '`'(ti(river,B)),'`'(true), 
                [], 
                thing&Thing-B), identityQ(IdentityQ),true, 
             [ '`'(trans_pred(thing,contain,C,B)), 
               quantV( generic(Generic), 
                 thing&geo&Geo-C, '`'(ti(country,C)),'`'(true), 
                 [ pred( 
                      quantV( identityQ(IdentityQ19), 
                        thing&geo&Geo-C, '`'(true),'`'(true), 
                        [], 
                        thing&geo&Geo-C), 
                      identityQ(IdentityQ20), 
                      generic_pred(thing,border,C,D), 
                      [ quantV( identityQ(IdentityQ21), 
                          thing&geo&seamass-D, '`'(named(D,baltic)),'`'(true), 
                          [], 
                          thing&geo&seamass-D)])], 
                 thing&geo&Geo-C)]))).
tmp : test80_result( "What rivers are in countries bordering the baltic ?", 
        qplan, 
        answer80([River]) :- 
          ti(river,River) , 
          ^( Contain_Border_Country, 
            ( named(Generic_Baltic,baltic)  ,
              ti(country,Contain_Border_Country) , 
              generic_pred(thing,border,Contain_Border_Country,Generic_Baltic) , 
              trans_pred(thing,contain,Contain_Border_Country,River)))).
tmp : test80_result( "What are the cities of the countries bordering the baltic ?", 
        into_lexical_segs, 
        [ w( what, [
            pos(wp), root(what),loc(1),lnks(2),txt("What"), 
            truecase('INIT_UPPER'),link(1,'NP',r('NP',seg(1,1))), 
            link(2,'SBAR',r('SBAR',seg(1,11))),flair,upos(pron), 
            fner(o),fn('_')]), 
          w( are, [
            alt(pos(vbp)), root(be),loc(2),lnks(2),txt("are"), 
            truecase('LOWER'),link(1,'S',r('S',seg(2,10))), 
            link(2,'SBAR',r('SBAR',seg(1,11))),old_pos(aux), 
            pos(vb),allen_srl, 
            srl( are, [
              o(ARG1,[rivers]), 
              o(V,[are]), 
              o(ARG2,[in,countries,bordering,the,baltic])]), flair,upos(verb),fner(o),fn('be.01')]), 
          w( the, [
            pos(dt), root(the),loc(3),lnks(4),txt("the"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(3,4))), 
            link(2,NP,r(NP,seg(3,7))), 
            link(3,S,r(S,seg(2,10))), link(4,'SBAR',r('SBAR',seg(1,11))),flair, 
            upos(det),fner(o),fn('_')]), 
          w( cities, [
            pos(nns), root(city),loc(4),lnks(4),txt("cities"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(3,4))), 
            link(2,NP,r(NP,seg(3,7))), 
            link(3,S,r(S,seg(2,10))), 
            link(4,SBAR,r(SBAR,seg(1,11)))]), 
          w( of, [
            pos(in), root(of),loc(5),lnks(4),txt("of"), 
            truecase('LOWER'),link(1,'PP',r('PP',seg(5,7))), 
            link(2,NP,r(NP,seg(3,7))), 
            link(3,S,r(S,seg(2,10))), 
            link(4,SBAR,r(SBAR,seg(1,11)))]), 
          w( the, [
            pos(dt), root(the),loc(6),lnks(5),txt("the"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(6,7))), 
            link(2,PP,r(PP,seg(5,7))), 
            link(3,NP,r(NP,seg(3,7))), 
            link(4,S,r(S,seg(2,10))), 
            link(5,SBAR,r(SBAR,seg(1,11)))]), 
          w( countries, [
            pos(nns), root(country),loc(7),lnks(5), 
            txt("countries"),truecase('LOWER'), 
            link(1,NP,r(NP,seg(6,7))), 
            link(2,PP,r(PP,seg(5,7))), 
            link(3,NP,r(NP,seg(3,7))), 
            link(4,S,r(S,seg(2,10))), link(5,'SBAR',r('SBAR',seg(1,11))),flair, 
            upos(noun),fner(o),fn('_')]), 
          w( bordering, [
            pos(vbg), root(border),loc(8),lnks(3), 
            txt("bordering"),truecase('LOWER'), 
            link(1,VP,r(VP,seg(8,10))), 
            link(2,S,r(S,seg(2,10))), link(3,'SBAR',r('SBAR',seg(1,11))),allen_srl, 
            srl( bordering, [
              o(ARG2,[countries]), 
              o(V,[bordering]), 
              o(ARG1,[the,baltic])]), flair,upos(verb),fner(o),fn('border.01')]), 
          w( the, [
            pos(dt), root(the),loc(9),lnks(4),txt("the"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(9,10))), 
            link(2,VP,r(VP,seg(8,10))), 
            link(3,S,r(S,seg(2,10))), 
            link(4,SBAR,r(SBAR,seg(1,11)))]), 
          w( baltic, [
            pos(jj), root(baltic),loc(10),lnks(4),txt("baltic"), 
            truecase('INIT_UPPER'),link(1,'NP',r('NP',seg(9,10))), 
            link(2,VP,r(VP,seg(8,10))), 
            link(3,S,r(S,seg(2,10))), link(4,'SBAR',r('SBAR',seg(1,11))),flair, 
            upos(noun),fner(o),fn('_')]), 
          w( ?, [
            pos('.'), root(?),loc(11),lnks(1),txt("?"), 
            link(1,'SBAR',r('SBAR',seg(1,11))),flair, 
            upos(punct),fner(o),fn('_')])]).
tmp : test80_result( "What are the cities of the countries bordering the baltic ?", 
        sentence80, 
        whq( thing&City&city-B, 
          s( np(3+_261224,wh(thing&City&city-B),[]), 
             verb(aux+be(Be),be(Be),active,pres+fin,[],posP(PosP)), 
             [ arg( dirO(DirO), 
                 np( 3+pl, 
                   np_head(det(the(pl)),[],city), 
                   [ prep_phrase( prep(of), 
                       np( 3+pl, 
                         np_head(det(the(pl)),[],country), 
                         [ reduced_rel( thing&geo&dog-D, 
                             s( np(3+pl,wh(thing&geo&dog-D),[]), 
                                verb(main+tv,border,active,inf,[prog],posP(PosP25)), 
                                [ arg(dirO(DirO26),np(3+sg,nameOf(baltic,[]),[]))], 
                                []))]))]))], 
             []))).
tmp : test80_result( "What are the cities of the countries bordering the baltic ?", 
        i_sentence, 
        question80( [thing&City&city-B], 
          pred( 
             quantV( identityQ(IdentityQ), 
               thing&City&city-B, '`'(true),'`'(true), 
               [], 
               thing&City&city-B), 
             identityQ(IdentityQ18), 
             subsumed_by(B,C), 
             [ quantV( set(- + (- 0)), 
                 thing&City&city-G, 
                 '`'((generic_pred(thing,any,D,G),ti(city,G))), 
                 '`'(true), 
                 [ quantV( index(- + (- 0)), 
                     thing&geo&dog-D, '`'(ti(country,D)),'`'(true), 
                     [ pred( 
                          quantV( identityQ(IdentityQ19), 
                            thing&geo&dog-D, '`'(true),'`'(true), 
                            [], 
                            thing&geo&dog-D), 
                          identityQ(IdentityQ20), 
                          generic_pred(thing,border,D,F), 
                          [ quantV( identityQ(IdentityQ21), 
                              thing&geo&seamass-F, '`'(named(F,baltic)),'`'(true), 
                              [], 
                              thing&geo&seamass-F)])], 
                     thing&geo&dog-D)], 
                 thing&City&city-C)]))).
tmp : test80_result( "What are the cities of the countries bordering the baltic ?", 
        qplan, 
        answer80([Subsumed_by]) :-  
          ^( By_SetOf25, 
            ( setOf( [Any_Border_Country]:SetOf, 
                ( named(Generic_Baltic,baltic)  ,
                  ti(country,Any_Border_Country) , 
                  generic_pred(thing,border,Any_Border_Country,Generic_Baltic) , 
                  setOf( Generic_City, 
                    generic_pred(thing,any,Any_Border_Country,Generic_City),ti(city,Generic_City), 
                    SetOf)), 
                By_SetOf25) , 
              subsumed_by(Subsumed_by,By_SetOf25)))).
tmp : test80_result( "What are the rivers of the countries bordering the baltic ?", 
        into_lexical_segs, 
        [ w( what, [
            pos(wp), root(what),loc(1),lnks(2),txt("What"), 
            truecase('INIT_UPPER'),link(1,'NP',r('NP',seg(1,1))), 
            link(2,'SBAR',r('SBAR',seg(1,11))),flair,upos(pron), 
            fner(o),fn('_')]), 
          w( are, [
            alt(pos(vbp)), root(be),loc(2),lnks(2),txt("are"), 
            truecase('LOWER'),link(1,'S',r('S',seg(2,10))), 
            link(2,'SBAR',r('SBAR',seg(1,11))),old_pos(aux), 
            pos(vb),allen_srl, 
            srl( are, [
              o(ARG2,[What]), 
              o(V,[are]), 
              o( 'ARG1', [
                the, cities,of,the,countries, 
                bordering,the,baltic])]), flair,upos(verb),fner(o),fn('be.01')]), 
          w( the, [
            pos(dt), root(the),loc(3),lnks(4),txt("the"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(3,4))), 
            link(2,NP,r(NP,seg(3,7))), 
            link(3,S,r(S,seg(2,10))), link(4,'SBAR',r('SBAR',seg(1,11))),spacy,spos(dt), 
            loc(1),txt("The"),dep_parent(det,n(rhine,2)), 
            node(n(the,1)),flair,upos(det),fner(o), 
            fn('_')]), 
          w( rivers, [
            pos(nns), root(river),loc(4),lnks(4),txt("rivers"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(3,4))), 
            link(2,NP,r(NP,seg(3,7))), 
            link(3,S,r(S,seg(2,10))), 
            link(4,SBAR,r(SBAR,seg(1,11)))]), 
          w( of, [
            pos(in), root(of),loc(5),lnks(4),txt("of"), 
            truecase('LOWER'),link(1,'PP',r('PP',seg(5,7))), 
            link(2,NP,r(NP,seg(3,7))), 
            link(3,S,r(S,seg(2,10))), link(4,'SBAR',r('SBAR',seg(1,11))),flair, 
            upos(adp),fner(o),fn('_')]), 
          w( the, [
            pos(dt), root(the),loc(6),lnks(5),txt("the"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(6,7))), 
            link(2,PP,r(PP,seg(5,7))), 
            link(3,NP,r(NP,seg(3,7))), 
            link(4,S,r(S,seg(2,10))), link(5,'SBAR',r('SBAR',seg(1,11))),flair, 
            upos(det),fner(o),fn('_')]), 
          w( countries, [
            pos(nns), root(country),loc(7),lnks(5), 
            txt("countries"),truecase('LOWER'), 
            link(1,NP,r(NP,seg(6,7))), 
            link(2,PP,r(PP,seg(5,7))), 
            link(3,NP,r(NP,seg(3,7))), 
            link(4,S,r(S,seg(2,10))), link(5,'SBAR',r('SBAR',seg(1,11))),flair, 
            upos(noun),fner(o),fn('_')]), 
          w( bordering, [
            pos(vbg), root(border),loc(8),lnks(3), 
            txt("bordering"),truecase('LOWER'), 
            link(1,VP,r(VP,seg(8,10))), 
            link(2,S,r(S,seg(2,10))), link(3,'SBAR',r('SBAR',seg(1,11))),allen_srl, 
            srl( bordering, [
              o(ARG2,[the,countries]), 
              o(V,[bordering]), 
              o(ARG1,[the,baltic])]), flair,upos(verb),fner(o),fn('border.01')]), 
          w( the, [
            pos(dt), root(the),loc(9),lnks(4),txt("the"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(9,10))), 
            link(2,VP,r(VP,seg(8,10))), 
            link(3,S,r(S,seg(2,10))), link(4,'SBAR',r('SBAR',seg(1,11))),flair, 
            upos(det),fner(o),fn('_')]), 
          w( baltic, [
            pos(jj), root(baltic),loc(10),lnks(4),txt("baltic"), 
            truecase('INIT_UPPER'),link(1,'NP',r('NP',seg(9,10))), 
            link(2,VP,r(VP,seg(8,10))), 
            link(3,S,r(S,seg(2,10))), link(4,'SBAR',r('SBAR',seg(1,11))),flair, 
            upos(noun),fner(o),fn('_')]), 
          w( ?, [
            pos('.'), root(?),loc(11),lnks(1),txt("?"), 
            link(1,'SBAR',r('SBAR',seg(1,11))),spacy, 
            spos('.'),loc(6),dep_parent(punct,n(flows,3)), 
            node(n(?,6)),flair,upos(punct),fner(o), 
            fn('_')])]).
tmp : test80_result( "What are the rivers of the countries bordering the baltic ?", 
        sentence80, 
        whq( thing&River&river-B, 
          s( np(3+_250298,wh(thing&River&river-B),[]), 
             verb(aux+be(Be),be(Be),active,pres+fin,[],posP(PosP)), 
             [ arg( dirO(DirO), 
                 np( 3+pl, 
                   np_head(det(the(pl)),[],river), 
                   [ prep_phrase( prep(of), 
                       np( 3+pl, 
                         np_head(det(the(pl)),[],country), 
                         [ reduced_rel( thing&geo&dog-D, 
                             s( np(3+pl,wh(thing&geo&dog-D),[]), 
                                verb(main+tv,border,active,inf,[prog],posP(PosP25)), 
                                [ arg(dirO(DirO26),np(3+sg,nameOf(baltic,[]),[]))], 
                                []))]))]))], 
             []))).
tmp : test80_result( "What are the rivers of the countries bordering the baltic ?", 
        i_sentence, 
        question80( [thing&River&river-B], 
          pred( 
             quantV( identityQ(IdentityQ), 
               thing&River&river-B, '`'(true),'`'(true), 
               [], 
               thing&River&river-B), 
             identityQ(IdentityQ18), 
             subsumed_by(B,C), 
             [ quantV( set(- + (- 0)), 
                 thing&River&river-G, 
                 '`'((generic_pred(thing,any,D,G),ti(river,G))), 
                 '`'(true), 
                 [ quantV( index(- + (- 0)), 
                     thing&geo&dog-D, '`'(ti(country,D)),'`'(true), 
                     [ pred( 
                          quantV( identityQ(IdentityQ19), 
                            thing&geo&dog-D, '`'(true),'`'(true), 
                            [], 
                            thing&geo&dog-D), 
                          identityQ(IdentityQ20), 
                          generic_pred(thing,border,D,F), 
                          [ quantV( identityQ(IdentityQ21), 
                              thing&geo&seamass-F, '`'(named(F,baltic)),'`'(true), 
                              [], 
                              thing&geo&seamass-F)])], 
                     thing&geo&dog-D)], 
                 thing&River&river-C)]))).
tmp : test80_result( "What are the rivers of the countries bordering the baltic ?", 
        qplan, 
        answer80([Subsumed_by]) :-  
          ^( By_SetOf25, 
            ( setOf( [Any_Border_Country]:SetOf, 
                ( named(Generic_Baltic,baltic)  ,
                  ti(country,Any_Border_Country) , 
                  generic_pred(thing,border,Any_Border_Country,Generic_Baltic) , 
                  setOf( Generic_River, 
                    generic_pred(thing,any,Any_Border_Country,Generic_River),ti(river,Generic_River), 
                    SetOf)), 
                By_SetOf25) , 
              subsumed_by(Subsumed_by,By_SetOf25)))).
tmp : test80_result( "What are the cities in countries bordering the baltic ?", 
        into_lexical_segs, 
        [ w( what, [
            pos(wp), root(what),loc(1),lnks(2),txt("What"), 
            truecase('INIT_UPPER'),link(1,'NP',r('NP',seg(1,1))), 
            link(2,'SBAR',r('SBAR',seg(1,10))),flair,upos(pron), 
            fner(o),fn('_')]), 
          w( are, [
            alt(pos(vbp)), root(be),loc(2),lnks(2),txt("are"), 
            truecase('LOWER'),link(1,'S',r('S',seg(2,9))), 
            link(2,'SBAR',r('SBAR',seg(1,10))),old_pos(aux), 
            pos(vb),allen_srl, 
            srl( are, [
              o(ARG2,[What]), 
              o(V,[are]), 
              o( 'ARG1', [
                the, rivers,of,the,countries, 
                bordering,the,baltic])]), flair,upos(verb),fner(o),fn('be.01')]), 
          w( the, [
            pos(dt), root(the),loc(3),lnks(4),txt("the"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(3,4))), 
            link(2,NP,r(NP,seg(3,6))), 
            link(3,S,r(S,seg(2,9))), link(4,'SBAR',r('SBAR',seg(1,10))),flair, 
            upos(det),fner(o),fn('_')]), 
          w( cities, [
            pos(nns), root(city),loc(4),lnks(4),txt("cities"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(3,4))), 
            link(2,NP,r(NP,seg(3,6))), 
            link(3,S,r(S,seg(2,9))), 
            link(4,SBAR,r(SBAR,seg(1,10)))]), 
          w( in, [
            pos(in), root(in),loc(5),lnks(4),txt("in"), 
            truecase('LOWER'),link(1,'PP',r('PP',seg(5,6))), 
            link(2,NP,r(NP,seg(3,6))), 
            link(3,S,r(S,seg(2,9))), 
            link(4,SBAR,r(SBAR,seg(1,10)))]), 
          w( countries, [
            pos(nns), root(country),loc(6),lnks(5), 
            txt("countries"),truecase('LOWER'),corefed, 
            #(2),txt(["countries"]),type('NOMINAL'), 
            numb('PLURAL'),gender('UNKNOWN'), 
            animacy('INANIMATE'),repm(@(true)), 
            link(1,NP,r(NP,seg(6,6))), 
            link(2,PP,r(PP,seg(5,6))), 
            link(3,NP,r(NP,seg(3,6))), 
            link(4,S,r(S,seg(2,9))), link(5,'SBAR',r('SBAR',seg(1,10))),flair, 
            upos(noun),fner(o),fn('_')]), 
          w( bordering, [
            pos(vbg), root(border),loc(7),lnks(3), 
            txt("bordering"),truecase('LOWER'), 
            link(1,VP,r(VP,seg(7,9))), 
            link(2,S,r(S,seg(2,9))), link(3,'SBAR',r('SBAR',seg(1,10))),allen_srl, 
            srl( bordering, [
              o(ARG2,[the,countries]), 
              o(V,[bordering]), 
              o(ARG1,[the,baltic])]), flair,upos(verb),fner(o),fn('border.01')]), 
          w( the, [
            pos(dt), root(the),loc(8),lnks(4),txt("the"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(8,9))), 
            link(2,VP,r(VP,seg(7,9))), 
            link(3,S,r(S,seg(2,9))), link(4,'SBAR',r('SBAR',seg(1,10))),flair, 
            upos(det),fner(o),fn('_')]), 
          w( baltic, [
            pos(jj), root(baltic),loc(9),lnks(4),txt("baltic"), 
            truecase('INIT_UPPER'),link(1,'NP',r('NP',seg(8,9))), 
            link(2,VP,r(VP,seg(7,9))), 
            link(3,S,r(S,seg(2,9))), link(4,'SBAR',r('SBAR',seg(1,10))),flair, 
            upos(noun),fner(o),fn('_')]), 
          w( ?, [
            pos('.'), root(?),loc(10),lnks(1),txt("?"), 
            link(1,'SBAR',r('SBAR',seg(1,10))),flair, 
            upos(punct),fner(o),fn('_')])]).
tmp : test80_result( "What are the cities in countries bordering the baltic ?", 
        sentence80, 
        whq( thing&geo&Geo-B, 
          s( np(3+_13196,wh(thing&geo&Geo-B),[]), 
             verb(aux+be(Be),be(Be),active,pres+fin,[],posP(PosP)), 
             [ arg( dirO(DirO), 
                 np( 3+pl, 
                   np_head(det(the(pl)),[],city), 
                   [ prep_phrase( prep(in), 
                       np( 3+pl, 
                         np_head(generic(Generic27),[],country), 
                         [ reduced_rel( thing&geo&Geo-D, 
                             s( np(3+pl,wh(thing&geo&Geo-D),[]), 
                                verb(main+tv,border,active,inf,[prog],posP(PosP28)), 
                                [ arg(dirO(DirO29),np(3+sg,nameOf(baltic,[]),[]))], 
                                []))]))]))], 
             []))).
tmp : test80_result( "What are the cities in countries bordering the baltic ?", 
        i_sentence, 
        question80( [thing&geo&Geo-B], 
          pred( 
             quantV( identityQ(IdentityQ), 
               thing&geo&Geo-B, '`'(true),'`'(true), 
               [], 
               thing&geo&Geo-B), 
             identityQ(IdentityQ18), 
             subsumed_by(B,C), 
             [ quantV( set(- + (- 0)), 
                 thing&geo&Geo-D, '`'(ti(city,D)),'`'(true), 
                 [ ( quantV( generic(Generic), 
                       thing&Thing-E, '`'(ti(country,E)),'`'(true), 
                       [], 
                       thing&Thing-E) & 
                     '`'(trans_pred(thing,contain,E,D))), 
                   pred( 
                      quantV( identityQ(IdentityQ20), 
                        thing&geo&Geo-D, '`'(true),'`'(true), 
                        [], 
                        thing&geo&Geo-D), 
                      identityQ(IdentityQ21), 
                      generic_pred(thing,border,D,F), 
                      [ quantV( identityQ(IdentityQ22), 
                          thing&geo&seamass-F, '`'(named(F,baltic)),'`'(true), 
                          [], 
                          thing&geo&seamass-F)])], 
                 thing&geo&Geo-C)]))).
tmp : test80_result( "What are the cities in countries bordering the baltic ?", 
        qplan, 
        answer80([Subsumed_by]) :-  
          ^( By_SetOf, 
            ( setOf( Border_City, 
                ^( Contain_Country, 
                  ( ti(country,Contain_Country)  ,
                    named(Generic_Baltic,baltic) , 
                    ti(city,Border_City) , 
                    trans_pred(thing,contain,Contain_Country,Border_City) , 
                    generic_pred(thing,border,Border_City,Generic_Baltic))), 
                By_SetOf) , 
              subsumed_by(Subsumed_by,By_SetOf)))).
tmp : test80_result( "What are the rivers in countries bordering the baltic ?", 
        into_lexical_segs, 
        [ w( what, [
            pos(wp), root(what),loc(1),lnks(2),txt("What"), 
            truecase('INIT_UPPER'),link(1,'NP',r('NP',seg(1,1))), 
            link(2,'SBAR',r('SBAR',seg(1,10))),flair,upos(pron), 
            fner(o),fn('_')]), 
          w( are, [
            alt(pos(vbp)), root(be),loc(2),lnks(2),txt("are"), 
            truecase('LOWER'),link(1,'S',r('S',seg(2,9))), 
            link(2,'SBAR',r('SBAR',seg(1,10))),old_pos(aux), 
            pos(vb),allen_srl, 
            srl( are, [
              o(ARG2,[What]), 
              o(V,[are]), 
              o(ARG1,[the,cities,in,countries,bordering,the,baltic])]), flair,upos(verb),fner(o),fn('be.01')]), 
          w( the, [
            pos(dt), root(the),loc(3),lnks(4),txt("the"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(3,4))), 
            link(2,NP,r(NP,seg(3,6))), 
            link(3,S,r(S,seg(2,9))), link(4,'SBAR',r('SBAR',seg(1,10))),spacy,spos(dt), 
            loc(1),txt("The"),dep_parent(det,n(rhine,2)), 
            node(n(the,1)),flair,upos(det),fner(o), 
            fn('_')]), 
          w( rivers, [
            pos(nns), root(river),loc(4),lnks(4),txt("rivers"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(3,4))), 
            link(2,NP,r(NP,seg(3,6))), 
            link(3,S,r(S,seg(2,9))), 
            link(4,SBAR,r(SBAR,seg(1,10)))]), 
          w( in, [
            pos(in), root(in),loc(5),lnks(4),txt("in"), 
            truecase('LOWER'),link(1,'PP',r('PP',seg(5,6))), 
            link(2,NP,r(NP,seg(3,6))), 
            link(3,S,r(S,seg(2,9))), link(4,'SBAR',r('SBAR',seg(1,10))),flair, 
            upos(adp),fner(o),fn('_')]), 
          w( countries, [
            pos(nns), root(country),loc(6),lnks(5), 
            txt("countries"),truecase('LOWER'),corefed, 
            #(2),txt(["countries"]),type('NOMINAL'), 
            numb('PLURAL'),gender('UNKNOWN'), 
            animacy('INANIMATE'),repm(@(true)), 
            link(1,NP,r(NP,seg(6,6))), 
            link(2,PP,r(PP,seg(5,6))), 
            link(3,NP,r(NP,seg(3,6))), 
            link(4,S,r(S,seg(2,9))), link(5,'SBAR',r('SBAR',seg(1,10))),flair, 
            upos(noun),fner(o),fn('_')]), 
          w( bordering, [
            pos(vbg), root(border),loc(7),lnks(3), 
            txt("bordering"),truecase('LOWER'), 
            link(1,VP,r(VP,seg(7,9))), 
            link(2,S,r(S,seg(2,9))), link(3,'SBAR',r('SBAR',seg(1,10))),allen_srl, 
            srl( bordering, [
              o(ARG0,[countries]), 
              o(V,[bordering]), 
              o(ARG1,[the,baltic])]), flair,upos(verb),fner(o),fn('border.01')]), 
          w( the, [
            pos(dt), root(the),loc(8),lnks(4),txt("the"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(8,9))), 
            link(2,VP,r(VP,seg(7,9))), 
            link(3,S,r(S,seg(2,9))), link(4,'SBAR',r('SBAR',seg(1,10))),flair, 
            upos(det),fner(o),fn('_')]), 
          w( baltic, [
            pos(jj), root(baltic),loc(9),lnks(4),txt("baltic"), 
            truecase('INIT_UPPER'),link(1,'NP',r('NP',seg(8,9))), 
            link(2,VP,r(VP,seg(7,9))), 
            link(3,S,r(S,seg(2,9))), link(4,'SBAR',r('SBAR',seg(1,10))),flair, 
            upos(noun),fner(o),fn('_')]), 
          w( ?, [
            pos('.'), root(?),loc(10),lnks(1),txt("?"), 
            link(1,'SBAR',r('SBAR',seg(1,10))),spacy, 
            spos('.'),loc(7),dep_parent(punct,n(flows,3)), 
            node(n(?,7)),flair,upos(punct),fner(o), 
            fn('_')])]).
tmp : test80_result( "What are the rivers in countries bordering the baltic ?", 
        sentence80, 
        whq( thing&geo&Geo-B, 
          s( np(3+_26360,wh(thing&geo&Geo-B),[]), 
             verb(aux+be(Be),be(Be),active,pres+fin,[],posP(PosP)), 
             [ arg( dirO(DirO), 
                 np( 3+pl, 
                   np_head(det(the(pl)),[],river), 
                   [ prep_phrase( prep(in), 
                       np( 3+pl, 
                         np_head(generic(Generic27),[],country), 
                         [ reduced_rel( thing&geo&Geo-D, 
                             s( np(3+pl,wh(thing&geo&Geo-D),[]), 
                                verb(main+tv,border,active,inf,[prog],posP(PosP28)), 
                                [ arg(dirO(DirO29),np(3+sg,nameOf(baltic,[]),[]))], 
                                []))]))]))], 
             []))).
tmp : test80_result( "What are the rivers in countries bordering the baltic ?", 
        i_sentence, 
        question80( [thing&geo&Geo-B], 
          pred( 
             quantV( identityQ(IdentityQ), 
               thing&geo&Geo-B, '`'(true),'`'(true), 
               [], 
               thing&geo&Geo-B), 
             identityQ(IdentityQ18), 
             subsumed_by(B,C), 
             [ quantV( set(- + (- 0)), 
                 thing&geo&Geo-D, '`'(ti(river,D)),'`'(true), 
                 [ ( quantV( generic(Generic), 
                       thing&Thing-E, '`'(ti(country,E)),'`'(true), 
                       [], 
                       thing&Thing-E) & 
                     '`'(trans_pred(thing,contain,E,D))), 
                   pred( 
                      quantV( identityQ(IdentityQ20), 
                        thing&geo&Geo-D, '`'(true),'`'(true), 
                        [], 
                        thing&geo&Geo-D), 
                      identityQ(IdentityQ21), 
                      generic_pred(thing,border,D,F), 
                      [ quantV( identityQ(IdentityQ22), 
                          thing&geo&seamass-F, '`'(named(F,baltic)),'`'(true), 
                          [], 
                          thing&geo&seamass-F)])], 
                 thing&geo&Geo-C)]))).
tmp : test80_result( "What are the rivers in countries bordering the baltic ?", 
        qplan, 
        answer80([Subsumed_by]) :-  
          ^( By_SetOf, 
            ( setOf( Border_River, 
                ^( Contain_Country, 
                  ( ti(country,Contain_Country)  ,
                    named(Generic_Baltic,baltic) , 
                    ti(river,Border_River) , 
                    trans_pred(thing,contain,Contain_Country,Border_River) , 
                    generic_pred(thing,border,Border_River,Generic_Baltic))), 
                By_SetOf) , 
              subsumed_by(Subsumed_by,By_SetOf)))).
tmp : test80_result( "What are the rivers that flow through each country bordering the baltic ?", 
        into_lexical_segs, 
        [ w( what, [
            pos(wp), root(what),loc(1),lnks(2),txt("What"), 
            truecase('INIT_UPPER'),link(1,'NP',r('NP',seg(1,1))), 
            link(2,'SBAR',r('SBAR',seg(1,13))),flair,upos(pron), 
            fner(o),fn('_')]), 
          w( are, [
            alt(pos(vbp)), root(be),loc(2),lnks(2),txt("are"), 
            truecase('LOWER'),link(1,'S',r('S',seg(2,12))), 
            link(2,'SBAR',r('SBAR',seg(1,13))),old_pos(aux), 
            pos(vb),allen_srl, 
            srl( are, [
              o(ARG2,[What]), 
              o(V,[are]), 
              o(ARG1,[the,rivers,in,countries,bordering,the,baltic])]), flair,upos(verb),fner(o),fn('be.01')]), 
          w( the, [
            pos(dt), root(the),loc(3),lnks(4),txt("the"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(3,4))), 
            link(2,NP,r(NP,seg(3,9))), 
            link(3,S,r(S,seg(2,12))), link(4,'SBAR',r('SBAR',seg(1,13))),flair, 
            upos(det),fner(o),fn('_')]), 
          w( rivers, [
            pos(nns), root(river),loc(4),lnks(4),txt("rivers"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(3,4))), 
            link(2,NP,r(NP,seg(3,9))), 
            link(3,S,r(S,seg(2,12))), link(4,'SBAR',r('SBAR',seg(1,13))),flair, 
            upos(noun),fner(o),fn('_')]), 
          w( that, [
            pos(wdt), root(that),loc(5),lnks(5),txt("that"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(5,5))), 
            link(2,SBAR,r(SBAR,seg(5,9))), 
            link(3,NP,r(NP,seg(3,9))), 
            link(4,S,r(S,seg(2,12))), 
            link(5,SBAR,r(SBAR,seg(1,13)))]), 
          w( flow, [
            alt(pos(vbp)), root(flow),pos(vb),loc(6),lnks(6), 
            txt("flow"),truecase('LOWER'), 
            link(1,VP,r(VP,seg(6,9))), 
            link(2,S,r(S,seg(6,9))), 
            link(3,SBAR,r(SBAR,seg(5,9))), 
            link(4,NP,r(NP,seg(3,9))), 
            link(5,S,r(S,seg(2,12))), 
            link(6,SBAR,r(SBAR,seg(1,13)))]), 
          w( through, [
            pos(in), root(through),loc(7),lnks(7), 
            txt("through"),truecase('LOWER'), 
            link(1,PP,r(PP,seg(7,9))), 
            link(2,VP,r(VP,seg(6,9))), 
            link(3,S,r(S,seg(6,9))), 
            link(4,SBAR,r(SBAR,seg(5,9))), 
            link(5,NP,r(NP,seg(3,9))), 
            link(6,S,r(S,seg(2,12))), 
            link(7,SBAR,r(SBAR,seg(1,13)))]), 
          w( each, [
            pos(dt), root(each),loc(8),lnks(8),txt("each"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(8,9))), 
            link(2,PP,r(PP,seg(7,9))), 
            link(3,VP,r(VP,seg(6,9))), 
            link(4,S,r(S,seg(6,9))), 
            link(5,SBAR,r(SBAR,seg(5,9))), 
            link(6,NP,r(NP,seg(3,9))), 
            link(7,S,r(S,seg(2,12))), 
            link(8,SBAR,r(SBAR,seg(1,13)))]), 
          w( country, [
            pos(nn), root(country),loc(9),lnks(8), 
            txt("country"),truecase('LOWER'), 
            link(1,NP,r(NP,seg(8,9))), 
            link(2,PP,r(PP,seg(7,9))), 
            link(3,VP,r(VP,seg(6,9))), 
            link(4,S,r(S,seg(6,9))), 
            link(5,SBAR,r(SBAR,seg(5,9))), 
            link(6,NP,r(NP,seg(3,9))), 
            link(7,S,r(S,seg(2,12))), 
            link(8,SBAR,r(SBAR,seg(1,13)))]), 
          w( bordering, [
            pos(vbg), root(border),loc(10),lnks(3), 
            txt("bordering"),truecase('LOWER'), 
            link(1,VP,r(VP,seg(10,12))), 
            link(2,S,r(S,seg(2,12))), link(3,'SBAR',r('SBAR',seg(1,13))),allen_srl, 
            srl( bordering, [
              o(ARG2,[countries]), 
              o(V,[bordering]), 
              o(ARG1,[the,baltic])]), flair,upos(verb),fner(o),fn('border.01')]), 
          w( the, [
            pos(dt), root(the),loc(11),lnks(4),txt("the"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(11,12))), 
            link(2,VP,r(VP,seg(10,12))), 
            link(3,S,r(S,seg(2,12))), link(4,'SBAR',r('SBAR',seg(1,13))),flair, 
            upos(det),fner(o),fn('_')]), 
          w( baltic, [
            pos(jj), root(baltic),loc(12),lnks(4),txt("baltic"), 
            truecase('INIT_UPPER'),link(1,'NP',r('NP',seg(11,12))), 
            link(2,VP,r(VP,seg(10,12))), 
            link(3,S,r(S,seg(2,12))), link(4,'SBAR',r('SBAR',seg(1,13))),flair, 
            upos(noun),fner(o),fn('_')]), 
          w( ?, [
            pos('.'), root(?),loc(13),lnks(1),txt("?"), 
            link(1,'SBAR',r('SBAR',seg(1,13))),flair, 
            upos(punct),fner(o),fn('_')])]).
tmp : test80_result( "What are the rivers that flow through each country bordering the baltic ?", 
        sentence80, 
        whq( thing&River&river-B, 
          s( np(3+_105926,wh(thing&River&river-B),[]), 
             verb(aux+be(Be),be(Be),active,pres+fin,[],posP(PosP)), 
             [ arg( dirO(DirO), 
                 np( 3+pl, 
                   np_head(det(the(pl)),[],river), 
                   [ rel( thing&River&river-D, 
                       s( np(3+pl,wh(thing&River&river-D),[]), 
                          verb(main+tv,flow,active,pres+fin,[],posP(PosP30)), 
                          [], 
                          [ prep_phrase( prep(through), 
                              np( 3+sg, 
                                np_head(det(each),[],country), 
                                [ reduced_rel( thing&geo&Geo-E, 
                                    s( np(3+sg,wh(thing&geo&Geo-E),[]), 
                                       verb(main+tv,border,active,inf,[prog],posP(PosP31)), 
                                       [ arg(dirO(DirO32),np(3+sg,nameOf(baltic,[]),[]))], 
                                       []))]))]))]))], 
             []))).
tmp : test80_result( "What are the rivers that flow through each country bordering the baltic ?", 
        i_sentence, 
        question80( [thing&River&river-B], 
          pred( 
             quantV( identityQ(IdentityQ), 
               thing&River&river-B, '`'(true),'`'(true), 
               [], 
               thing&River&river-B), 
             identityQ(IdentityQ18), 
             subsumed_by(B,C), 
             [ quantV( set(- + (- 0)), 
                 thing&River&river-D, 
                 '`'(ti(river,D)), 
                 ( pred( 
                      quantV( identityQ(IdentityQ19), 
                        thing&River&river-D, '`'(true),'`'(true), 
                        [], 
                        thing&River&river-D), 
                      identityQ(IdentityQ20), 
                      path_pred_linkage(direct(river_flows),river,D,E,G), 
                      [ quantV( det(each), 
                          thing&geo&Geo-E, '`'(ti(country,E)),'`'(true), 
                          [ pred( 
                               quantV( identityQ(IdentityQ21), 
                                 thing&geo&Geo-E, '`'(true),'`'(true), 
                                 [], 
                                 thing&geo&Geo-E), 
                               identityQ(IdentityQ22), 
                               generic_pred(thing,border,E,F), 
                               [ quantV( identityQ(IdentityQ23), 
                                   thing&geo&seamass-F, '`'(named(F,baltic)),'`'(true), 
                                   [], 
                                   thing&geo&seamass-F)])], 
                          thing&geo&Geo-E), 
                        quantV(voidQ(VoidQ),thing&_28832-G,`(true),`(true),[],_28836-G)]) & 
                   '`'(true)), 
                 [], 
                 thing&River&river-C)]))).
tmp : test80_result( "What are the rivers that flow through each country bordering the baltic ?", 
        qplan, 
        answer80([Subsumed_by]) :-  
          ^( By_SetOf, 
            ( setOf( River, 
                ( ti(river,River) , 
                  \+( ^( Border_Country, 
                        ( named(Generic_Baltic,baltic)  ,
                          ti(country,Border_Country) , 
                          generic_pred(thing,border,Border_Country,Generic_Baltic) , 
                          \+( ^( Path_pred_linkage, 
                                path_pred_linkage(direct(river_flows),river,River,Border_Country,Path_pred_linkage))))))), 
                By_SetOf) , 
              subsumed_by(Subsumed_by,By_SetOf)))).
tmp : test80_result( "What are the rivers that flow through the countries bordering the baltic ?", 
        into_lexical_segs, 
        [ w( what, [
            pos(wp), root(what),loc(1),lnks(2),txt("What"), 
            truecase('INIT_UPPER'),link(1,'NP',r('NP',seg(1,1))), 
            link(2,'SBAR',r('SBAR',seg(1,13))),spacy,spos(wp), 
            dep_parent(attr,n(are,2)),node(n(what,1)),flair, 
            upos(pron),fner(o),fn('_')]), 
          w( are, [
            alt(pos(vbp)), root(be),loc(2),lnks(2),txt("are"), 
            truecase('LOWER'),link(1,'S',r('S',seg(2,12))), 
            link(2,'SBAR',r('SBAR',seg(1,13))),old_pos(aux), 
            pos(vbp),spacy,spos(vbp),tense(present), 
            dep_child(attr,n(what,1)),dep_child(root,n(are,2)), 
            dep_child(nsubj,n(areas,4)),dep_child(punct,n(?,11)), 
            dep_parent(root,n(are,2)),node(n(are,2)), 
            allen_srl, 
            srl( are, [
              o(ARG2,[What]), 
              o(V,[are]), 
              o( 'ARG1', [
                the, rivers,that,flow,through,each, 
                country,bordering,the,baltic])]), flair,upos(verb),fner(o),fn('be.01')]), 
          w( the, [
            pos(dt), root(the),loc(3),lnks(4),txt("the"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(3,4))), 
            link(2,NP,r(NP,seg(3,9))), 
            link(3,S,r(S,seg(2,12))), link(4,'SBAR',r('SBAR',seg(1,13))),spacy,spos(dt), 
            dep_parent(det,n(areas,4)),node(n(the,3)),flair, 
            upos(det),fner(o),fn('_')]), 
          w( rivers, [
            pos(nns), root(river),loc(4),lnks(4),txt("rivers"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(3,4))), 
            link(2,NP,r(NP,seg(3,9))), 
            link(3,S,r(S,seg(2,12))), link(4,'SBAR',r('SBAR',seg(1,13))),flair, 
            upos(noun),fner(o),fn('_')]), 
          w( that, [
            pos(wdt), root(that),loc(5),lnks(5),txt("that"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(5,5))), 
            link(2,SBAR,r(SBAR,seg(5,9))), 
            link(3,NP,r(NP,seg(3,9))), 
            link(4,S,r(S,seg(2,12))), link(5,'SBAR',r('SBAR',seg(1,13))),flair, 
            upos(pron),fner(o),fn('_')]), 
          w( flow, [
            alt(pos(vbp)), root(flow),pos(vb),loc(6),lnks(6), 
            txt("flow"),truecase('LOWER'), 
            link(1,VP,r(VP,seg(6,9))), 
            link(2,S,r(S,seg(6,9))), 
            link(3,SBAR,r(SBAR,seg(5,9))), 
            link(4,NP,r(NP,seg(3,9))), 
            link(5,S,r(S,seg(2,12))), link(6,'SBAR',r('SBAR',seg(1,13))),allen_srl, 
            srl( flow, [
              o(ARG1,[the,rivers]), o('R-ARG1',[that]),o('V',[flow]), 
              o(ARGM-DIR,[through,each,country,bordering,the,baltic])]), flair,upos(verb),fner(o),fn('flow.01')]), 
          w( through, [
            pos(in), root(through),loc(7),lnks(7), 
            txt("through"),truecase('LOWER'), 
            link(1,PP,r(PP,seg(7,9))), 
            link(2,VP,r(VP,seg(6,9))), 
            link(3,S,r(S,seg(6,9))), 
            link(4,SBAR,r(SBAR,seg(5,9))), 
            link(5,NP,r(NP,seg(3,9))), 
            link(6,S,r(S,seg(2,12))), link(7,'SBAR',r('SBAR',seg(1,13))),flair, 
            upos(adp),fner(o),fn('_')]), 
          w( the, [
            pos(dt), root(the),loc(8),lnks(8),txt("the"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(8,9))), 
            link(2,PP,r(PP,seg(7,9))), 
            link(3,VP,r(VP,seg(6,9))), 
            link(4,S,r(S,seg(6,9))), 
            link(5,SBAR,r(SBAR,seg(5,9))), 
            link(6,NP,r(NP,seg(3,9))), 
            link(7,S,r(S,seg(2,12))), link(8,'SBAR',r('SBAR',seg(1,13))),spacy,spos(dt), 
            loc(6),dep_parent(det,n(countries,7)), 
            node(n(the,6)),flair,upos(det),fner(o), 
            fn('_')]), 
          w( countries, [
            pos(nns), root(country),loc(9),lnks(8), 
            txt("countries"),truecase('LOWER'), 
            link(1,NP,r(NP,seg(8,9))), 
            link(2,PP,r(PP,seg(7,9))), 
            link(3,VP,r(VP,seg(6,9))), 
            link(4,S,r(S,seg(6,9))), 
            link(5,SBAR,r(SBAR,seg(5,9))), 
            link(6,NP,r(NP,seg(3,9))), 
            link(7,S,r(S,seg(2,12))), link(8,'SBAR',r('SBAR',seg(1,13))),spacy, 
            spos(nns),loc(7),form(pl), 
            dep_child(det,n(the,6)),dep_child(acl,n(bordering,8)), 
            dep_parent(pobj,n(of,5)),node(n(countries,7))]), 
          w( bordering, [
            pos(vbg), root(border),loc(10),lnks(3), 
            txt("bordering"),truecase('LOWER'), 
            link(1,VP,r(VP,seg(10,12))), 
            link(2,S,r(S,seg(2,12))), link(3,'SBAR',r('SBAR',seg(1,13))),spacy, 
            spos(vbg),loc(8),tense(active), 
            dep_child(dobj,n(baltic,10)), dep_parent(acl,n(countries,7)),node(n(bordering,8)), 
            allen_srl, 
            srl( bordering, [
              o(ARG2,[each,country]), 
              o(V,[bordering]), 
              o(ARG1,[the,baltic])]), flair,upos(verb),fner(o),fn('border.01')]), 
          w( the, [
            pos(dt), root(the),loc(11),lnks(4),txt("the"), 
            truecase('LOWER'),link(1,'NP',r('NP',seg(11,12))), 
            link(2,VP,r(VP,seg(10,12))), 
            link(3,S,r(S,seg(2,12))), link(4,'SBAR',r('SBAR',seg(1,13))),spacy,spos(dt), 
            loc(9),dep_parent(det,n(baltic,10)), 
            node(n(the,9))]), 
          w( baltic, [
            root(baltic), loc(12),lnks(4),txt("baltic"), 
            truecase('INIT_UPPER'),link(1,'NP',r('NP',seg(11,12))), 
            link(2,VP,r(VP,seg(10,12))), 
            link(3,S,r(S,seg(2,12))), link(4,'SBAR',r('SBAR',seg(1,13))),old_pos(jj), 
            pos(nnp),spacy,spos(nnp),loc(10), 
            form(sg),dep_child(det,n(the,9)), 
            dep_parent(dobj,n(bordering,8)),node(n(baltic,10)), 
            flair,upos(noun),fner(o),fn('_')]), 
          w( ?, [
            pos('.'), root(?),loc(13),lnks(1),txt("?"), 
            link(1,'SBAR',r('SBAR',seg(1,13))),spacy, 
            spos('.'),loc(11),dep_parent(punct,n(are,2)), 
            node(n(?,11)),flair,upos(punct),fner(o), 
            fn('_')])]).
tmp : test80_result( "What are the rivers that flow through the countries bordering the baltic ?", 
        sentence80, 
        whq( thing&River&river-B, 
          s( np(3+_57706,wh(thing&River&river-B),[]), 
             verb(aux+be(Be),be(Be),active,pres+fin,[],posP(PosP)), 
             [ arg( dirO(DirO), 
                 np( 3+pl, 
                   np_head(det(the(pl)),[],river), 
                   [ rel( thing&River&river-D, 
                       s( np(3+pl,wh(thing&River&river-D),[]), 
                          verb(main+tv,flow,active,pres+fin,[],posP(PosP30)), 
                          [], 
                          [ prep_phrase( prep(through), 
                              np( 3+pl, 
                                np_head(det(the(pl)),[],country), 
                                [ reduced_rel( thing&geo&Geo-F, 
                                    s( np(3+pl,wh(thing&geo&Geo-F),[]), 
                                       verb(main+tv,border,active,inf,[prog],posP(PosP31)), 
                                       [ arg(dirO(DirO32),np(3+sg,nameOf(baltic,[]),[]))], 
                                       []))]))]))]))], 
             []))).
tmp : test80_result( "What are the rivers that flow through the countries bordering the baltic ?", 
        i_sentence, 
        question80( [thing&River&river-B], 
          pred( 
             quantV( identityQ(IdentityQ), 
               thing&River&river-B, '`'(true),'`'(true), 
               [], 
               thing&River&river-B), 
             identityQ(IdentityQ18), 
             subsumed_by(B,C), 
             [ quantV( set(- + (- 0)), 
                 thing&River&river-D, 
                 '`'(ti(river,D)), 
                 ( pred( 
                      quantV( identityQ(IdentityQ19), 
                        thing&River&river-D, '`'(true),'`'(true), 
                        [], 
                        thing&River&river-D), 
                      identityQ(IdentityQ20), 
                      path_pred_linkage(direct(river_flows),river,D,E,H), 
                      [ quantV( set(- (- + (- (- + (- 0))))), 
                          thing&geo&Geo-F, '`'(ti(country,F)),'`'(true), 
                          [ pred( 
                               quantV( identityQ(IdentityQ21), 
                                 thing&geo&Geo-F, '`'(true),'`'(true), 
                                 [], 
                                 thing&geo&Geo-F), 
                               identityQ(IdentityQ22), 
                               generic_pred(thing,border,F,G), 
                               [ quantV( identityQ(IdentityQ23), 
                                   thing&geo&seamass-G, '`'(named(G,baltic)),'`'(true), 
                                   [], 
                                   thing&geo&seamass-G)])], 
                          thing&geo&Geo-E), 
                        quantV(voidQ(VoidQ),thing&_9128-H,`(true),`(true),[],_9132-H)]) & 
                   '`'(true)), 
                 [], 
                 thing&River&river-C)]))).
tmp : test80_result( "What are the rivers that flow through the countries bordering the baltic ?", 
        qplan, 
        answer80([Subsumed_by]) :-  
          ^( By_SetOf, 
            ( setOf( River, 
                ( ti(river,River) , 
                  ^( SetOf_Path_pred_linkageDirect, 
                    ( setOf( Border_Country, 
                        ( named(Generic_Baltic,baltic)  ,
                          ti(country,Border_Country) , 
                          generic_pred(thing,border,Border_Country,Generic_Baltic)), 
                        SetOf_Path_pred_linkageDirect) , 
                      ^( Path_pred_linkage, 
                        path_pred_linkage( direct(river_flows), 
                          river, River,SetOf_Path_pred_linkageDirect, 
                          Path_pred_linkage))))), 
                By_SetOf) , 
              subsumed_by(Subsumed_by,By_SetOf)))).
