;;;; -*-  Mode: LISP; Syntax: Common-Lisp; Base: 10                          -*-
;;;; ---------------------------------------------------------------------------
;;;; File name: new-fe-ontologizations.meld
;;;;    System: 
;;;;    Author: Blass
;;;;   Created: June 28, 2017 15:03:12
;;;;   Purpose: 
;;;; ---------------------------------------------------------------------------
;;;;  $LastChangedDate: 2018-09-22 12:29:31 -0500 (Sat, 22 Sep 2018) $
;;;;  $LastChangedBy: hinrichs $
;;;; ---------------------------------------------------------------------------


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(in-microtheory EANLU)

(isa FNQuantSemtrans SemTransPred)
(arity FNQuantSemtrans 6)
(arg1Isa FNQuantSemtrans List)
(arg2Isa FNQuantSemtrans LexicalWord)
(arg3Isa FNQuantSemtrans CycLFormula)
(arg4Isa FNQuantSemtrans CycLExpression)
(arg5Isa FNQuantSemtrans CycLExpression)
(arg6Isa FNQuantSemtrans CycLExpression)
(comment FNQuantSemtrans "A mapping from quantifier tokens to a semantic meaning representation.")

(isa FNVerbSemtrans SemTransPred)
(arity FNVerbSemtrans 6)
(arg1Isa FNVerbSemtrans List)
(arg2Isa FNVerbSemtrans LexicalWord)
(arg3Isa FNVerbSemtrans CycLFormula)
(arg4Isa FNVerbSemtrans CycLExpression)
(arg5Isa FNVerbSemtrans CycLExpression)
(arg6Isa FNVerbSemtrans CycLExpression)
(comment FNVerbSemtrans "A mapping from verb tokens to a semantic meaning representation.")

(isa FNNounSemtrans SemTransPred)
(arity FNNounSemtrans 6)
(arg1Isa FNNounSemtrans List)
(arg2Isa FNNounSemtrans LexicalWord)
(arg3Isa FNNounSemtrans CycLFormula)
(arg4Isa FNNounSemtrans CycLExpression)
(arg5Isa FNNounSemtrans CycLExpression)
(arg6Isa FNNounSemtrans CycLExpression)
(comment FNNounSemtrans "A mapping from noun tokens to a semantic meaning representation.")

(isa FNAdjSemtrans SemTransPred)
(arity FNAdjSemtrans 6)
(arg1Isa FNAdjSemtrans List)
(arg2Isa FNAdjSemtrans LexicalWord)
(arg3Isa FNAdjSemtrans CycLFormula)
(arg4Isa FNAdjSemtrans CycLExpression)
(arg5Isa FNAdjSemtrans CycLExpression)
(arg6Isa FNAdjSemtrans CycLExpression)
(comment FNAdjSemtrans "A mapping from adjective tokens to a semantic meaning representation.")

(isa FNAdvSemtrans SemTransPred)
(arity FNAdvSemtrans 6)
(arg1Isa FNAdvSemtrans List)
(arg2Isa FNAdvSemtrans LexicalWord)
(arg3Isa FNAdvSemtrans CycLFormula)
(arg4Isa FNAdvSemtrans CycLExpression)
(arg5Isa FNAdvSemtrans CycLExpression)
(arg6Isa FNAdvSemtrans CycLExpression)
(comment FNAdvSemtrans "A mapping from adverb tokens to a semantic meaning representation.")

(isa FNInterjSemtrans SemTransPred)
(arity FNInterjSemtrans 6)
(arg1Isa FNInterjSemtrans List)
(arg2Isa FNInterjSemtrans LexicalWord)
(arg3Isa FNInterjSemtrans CycLFormula)
(arg4Isa FNInterjSemtrans CycLExpression)
(arg5Isa FNInterjSemtrans CycLExpression)
(arg6Isa FNInterjSemtrans CycLExpression)
(comment FNInterjSemtrans "A mapping from interjection tokens to a semantic meaning representation.")

(isa FNNumSemtrans SemTransPred)
(arity FNNumSemtrans 6)
(arg1Isa FNNumSemtrans List)
(arg2Isa FNNumSemtrans LexicalWord)
(arg3Isa FNNumSemtrans CycLFormula)
(arg4Isa FNNumSemtrans CycLExpression)
(arg5Isa FNNumSemtrans CycLExpression)
(arg6Isa FNNumSemtrans CycLExpression)
(comment FNNumSemtrans "A mapping from number tokens to a semantic meaning representation (an actual number).")

(isa FNPrepSemtrans SemTransPred)
(arity FNPrepSemtrans 6)
(arg1Isa FNPrepSemtrans List)
(arg2Isa FNPrepSemtrans LexicalWord)
(arg3Isa FNPrepSemtrans CycLFormula)
(arg4Isa FNPrepSemtrans CycLExpression)
(arg5Isa FNPrepSemtrans CycLExpression)
(arg6Isa FNPrepSemtrans CycLExpression)
(comment FNPrepSemtrans "A mapping from preposition tokens to a semantic meaning representation.")

(isa frame UnaryPredicate)
(comment frame "(frame <framename>) indexically maps the framenet frame with 
which a semtrans is associated.  Such a statement is the arg 4 of a semtrans.")

(isa bindingTemplate Predicate)
(comment bindingTemplate "A discrimination tree that designates grammatical 
function, part of speec, role-relation triples such that they can be referenced
by triples of integer indexes in the valence group patterns. Technically, this 
should take a List argument, rather than be nary.  Another time.")

(isa groupPatterns UnaryPredicate)
(arg1Isa groupPatterns List) ; should be a set
(comment groupPatterns "A list of sets of triples of integers representing
offsets into the binding template indicating a pattern of bound arguments 
that has been observed and annotated.  Used to filter inadmissible bindings.")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Ontology extensions to support Neo-Davidsonian semantics

(isa CausationEvent Collection)
(genls CausationEvent Event)
(comment CausationEvent "A causation event is the general event type for causation. Think the collection equivalent of causes-Underspecified")

(isa fnCause ActorSlot)
(arg1Isa fnCause CausationEvent)
(arg2Isa fnCause Thing)
(comment fnCause "A fnCause is the role relation for the thing that causes a CausationEvent. High level, abstract")

(isa fnEffect ActorSlot)
(arg1Isa fnEffect CausationEvent)
(arg2Isa fnEffect Thing)
(comment fnCause "A fnCause is the role relation for the thing that is the result of a CausationEvent. High level, abstract")

;;;
;;; Ontologizing Nulex
;;;

(isa Lexicon ObjectType)
(genls Lexicon AbstractInformationStructure)
(comment Lexicon "The class of lexicons.")

(isa NLPartOfSpeech ObjectType)
(genls NLPartOfSpeech Thing)
(comment NLPartOfSpeech "The class of nuLex parts of speech.")

(isa Definition ObjectType)
(genls Definition AbstractInformationStructure)
(comment Definition "The class of definition entries.")

(isa VerbForm Individual)
(genls VerbForm LinguisticObjectType)
(comment VerbForm "Form of the verb, e.g. past, pastParticiple, etc.")

(isa NLAgreement Individual)
(genls NLAgreement Individual)
(comment NLAgreement "Individual LinguisticObjectType")

(isa Subcat LinguisticObjectType)
(genls Subcat LinguisticObjectType)
(comment Subcat "Subcategorization Frame")

(isa nulexPartOfSpeech Predicate)
(arg1Isa nulexPartOfSpeech Definition)
(arg1Isa nulexPartOfSpeech NLPartOfSpeech)
(comment nulexPartOfSpeech "Maps from a Definition dictionary entry to a part of speech.")

(isa verbForm Predicate)
(comment verbForm "Maps from a Definition dictionary entry to a VerbForm.")

(isa rootForm Predicate)
(comment rootForm "Morphological root form of the word.")

(isa baseForm Predicate)
(comment baseForm "Morphological base form of the word.")

(isa hasAgreements Predicate)
(comment hasAgreements "Maps from a Definition to a set of agreements.")

(isa hasSubcats Predicate)
(comment hasSubcats "Maps from a Definition to subcategorization frames.")

;;; Individuals

;;; These are no longer needed, since we switched to valid Cyc concepts here
;(isa adjective NLPartOfSpeech)
;(isa adverb NLPartOfSpeech)
;(isa aux NLPartOfSpeech)
;(isa cardinal NLPartOfSpeech)
;(isa cconj NLPartOfSpeech)
;(isa det NLPartOfSpeech)
;(isa interjection NLPartOfSpeech)
;(isa misc NLPartOfSpeech)
;(isa noun NLPartOfSpeech)
;(isa ordinal NLPartOfSpeech)
;(isa prep NLPartOfSpeech)
;(isa pronoun NLPartOfSpeech)
;(isa punc NLPartOfSpeech)
;(isa quant NLPartOfSpeech)
;(isa sconj NLPartOfSpeech)
;(isa verb NLPartOfSpeech)

(isa 1s NLAgreement)
(isa 2s NLAgreement)
(isa 3s NLAgreement)
(isa 1p NLAgreement)
(isa 2p NLAgreement)
(isa 3p NLAgreement)

(isa base VerbForm)
(isa pres VerbForm)
(isa prespart VerbForm)
(isa pastpart VerbForm)

;;; dash replaces underscore in Nulex v4 subcats:
(isa adj Subcat)
(isa adj-middle Subcat)
(isa adj-pp Subcat)
(isa adjp Subcat)
(isa adv Subcat)
(isa adv-middle Subcat)
(isa adv-middle-pp Subcat)
(isa adv-middle-together Subcat)
(isa advp Subcat)
(isa advp-middle Subcat)
(isa advp-middle-pp Subcat)
(isa advp-pp Subcat)
(isa apart Subcat)
(isa assive Subcat)
(isa bp Subcat)
(isa down-np Subcat)
(isa for-np-s-inf Subcat)
(isa how-s Subcat)
(isa how-s-inf Subcat)
(isa intrans Subcat)
(isa it Subcat)
(isa it-np Subcat)
(isa it-pp Subcat)
(isa it-pp-that-s Subcat)
(isa it-that-s Subcat)
(isa np Subcat)
(isa np-adj Subcat)
(isa np-adj-pp Subcat)
(isa np-adjp Subcat)
(isa np-adjp-pp Subcat)
(isa np-adjp-result Subcat)
(isa np-adv Subcat)
(isa np-advp Subcat)
(isa np-advp-middle-together Subcat)
(isa np-apart Subcat)
(isa np-attr-pos Subcat)
(isa np-dative-np Subcat)
(isa np-down Subcat)
(isa np-fulfilling-pp Subcat)
(isa np-how-s Subcat)
(isa np-how-s-inf Subcat)
(isa np-np Subcat)
(isa np-np-pp Subcat)
(isa np-np-together Subcat)
(isa np-p Subcat)
(isa np-pp Subcat)
(isa np-pp-agent Subcat)
(isa np-pp-conative Subcat)
(isa np-pp-np Subcat)
(isa np-pp-patient Subcat)
(isa np-pp-pp Subcat)
(isa np-pp-s Subcat)
(isa np-pp-s-ing Subcat)
(isa np-pp-theme Subcat)
(isa np-pp-what-s Subcat)
(isa np-pp-whether-s Subcat)
(isa np-pro-arb Subcat)
(isa np-s Subcat)
(isa np-s-quote Subcat)
(isa np-s-inf Subcat)
(isa np-s-ing Subcat)
(isa np-that-s Subcat)
(isa np-to-be-adj Subcat)
(isa np-to-be-np Subcat)
(isa np-together Subcat)
(isa np-up Subcat)
(isa np-what-s Subcat)
(isa np-what-s-inf Subcat)
(isa np-when-s-inf Subcat)
(isa np-whether-s Subcat)
(isa np-whether-s-inf Subcat)
(isa object-be Subcat)
(isa out Subcat)
(isa p-possing Subcat)
(isa part Subcat)
(isa part-pp Subcat)
(isa pp Subcat)
(isa pp-adv-middle Subcat)
(isa pp-agent Subcat)
(isa pp-agent-how-s Subcat)
(isa pp-agent-how-s-inf Subcat)
(isa pp-agent-pp Subcat)
(isa pp-agent-pp-s-ing Subcat)
(isa pp-agent-pp-what-s Subcat)
(isa pp-agent-pp-what-s-inf Subcat)
(isa pp-agent-pp-whether-s Subcat)
(isa pp-agent-pp-whether-s-inf Subcat)
(isa pp-agent-pp-whether/if-s Subcat)
(isa pp-conative Subcat)
(isa pp-how-s Subcat)
(isa pp-how-s-inf Subcat)
(isa pp-how/whether-s Subcat)
(isa pp-np Subcat)
(isa pp-np-s-ing Subcat)
(isa pp-p-wh-s Subcat)
(isa pp-patient Subcat)
(isa pp-pp Subcat)
(isa pp-pp-agent Subcat)
(isa pp-pp-what-s Subcat)
(isa pp-pp-what-s-inf Subcat)
(isa pp-pp-whether-s-inf Subcat)
(isa pp-pp-whether/if-s Subcat)
(isa pp-s Subcat)
(isa pp-s-quote Subcat)
(isa pp-s-inf Subcat)
(isa pp-s-ing Subcat)
(isa pp-that-s Subcat)
(isa pp-theme Subcat)
(isa pp-what-s Subcat)
(isa pp-what-s-inf Subcat)
(isa pp-when-s-inf Subcat)
(isa pp-whether-s Subcat)
(isa pp-whether-s-inf Subcat)
(isa pp-whether/if-s Subcat)
(isa s Subcat)
(isa s-quote Subcat)
(isa s-inf Subcat)
(isa s-ing Subcat)
(isa that-s Subcat)
(isa that-s-pp Subcat)
(isa there-np Subcat)
(isa there-np-pp Subcat)
(isa there-pp-np Subcat)
(isa together Subcat)
(isa together-adv-middle Subcat)
(isa up-np Subcat)
(isa what-s Subcat)
(isa what-s-inf Subcat)
(isa when-s-inf Subcat)
(isa whether-s Subcat)
(isa whether-s-inf Subcat)
(isa whether/if-s Subcat)
(isa whether/if-s-inf Subcat)
(isa why-s Subcat)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; End of Code