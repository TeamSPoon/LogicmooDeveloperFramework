;;;
;;; Type-level strategy model
;;;

;;; Define strategies as quantity-conditioned model fragments that influence
;;; the activation of subgoals in decomposition and suggest orderings and
;;; coordination constraints.

(in-microtheory (StrategyModelMtFn Freeciv-TheGame) :exclude-globals t)


;;; STRATEGIES
;;; ----------


;;; Strategies we'd like to encode:
;;; Efficiency is good.
;;; Resources are good.
;;; Knowledge is good.
;;; Opponents are bad.
;;; "Death" == loss of resource.
;;; Freedom of action is good (options)
;;; Robustness is good.
;;; Resource Conversion is always costly (bad).
;;; Being resourceCapable of many types of things is a kind of freedom of action

;;; Buy time
;;; Stockpile fungible resources
;;; Consolidate travel
;;; Anticipate information needs
;;; Apply Decisive Force
;;; Protect Vulnerabilities
;;; Hide your intentions from opponents
;;; Deny Opponents Time to Respond
;;; Don't Let Bad Situations Fester


(genls StrategyType QPProcessType)  ;(or should it be orthogonal?)

;;; Typically this is "progress from founding cities to growing cities.
;;; (ie, start producing other things besides Settlers)"
;;; Note: the associatedRoleList only includes the roles needed to uniquely 
;;; identify an instance.  The remaining role (deferredGoal) is left open 
;;; and bindings must be generated by the apply-strategy interpreter.
(isa BuildGrow StrategyType)
(participantType BuildGrow doneBy FreeCiv-Player)  ; Too specific!  Agent-Generic?
(participantType BuildGrow initialGoal Goal)
(participantType BuildGrow deferredGoal Goal)
(associatedRoleList BuildGrow (TheList doneBy initialGoal))
(participantConstraint BuildGrow (goalTradeoff initialGoal deferredGoal InitialPartialProgressiveTradeoff))
(participantConstraint BuildGrow (activeMF (MFInstanceFn ExpansionPhase (TheList doneBy))))  ;; This defined the scope quantity conditions
(consequenceOf-TypeType BuildGrow
  (c+ ((MeasurableQuantityFn goalActivation) initialGoal) (Percent 100)))
(consequenceOf-TypeType BuildGrow
  (c+ ((MeasurableQuantityFn goalActivation) deferredGoal) (Percent 0)))

;;; This is fully generic:
(isa SpecializeByPerformance StrategyType)
(participantType SpecializeByPerformance performanceGoal Goal)
(associatedRoleList SpecializeByPerformance (TheList performanceGoal))
;;; There may be other participants, constraints and conditions needed to determine if 
;;; the strategy is relevant.  But not today.
(consequenceOf-TypeType SpecializeByPerformance
  (decompose performanceGoal DecomposeByPerformance))  ; The interpreter dispatches on decompose and sequence actions.

;;; This is fully generic:
(isa SacrificeGoal StrategyType)
(participantType SacrificeGoal performanceGoal Goal)
(associatedRoleList SacrificeGoal (TheList performanceGoal))
(consequenceOf-TypeType SacrificeGoal
  (c+ ((MeasurableQuantityFn goalActivation) performanceGoal) (Percent 0)))  ; Just suppress the goal completely.

;;; Suppress goal activation when designated state is not active.
;;; This is fully generic:
(isa ConditionOnState StrategyType)
(participantType ConditionOnState performanceGoal Goal)
(participantType ConditionOnState objectOfStateChange FreeCiv-Player)  ; Agent-Generic?
(participantType ConditionOnState stateOf ModelFragmentType)  ; stateOf is made up...
(associatedRoleList ConditionOnState (TheList objectOfStateChange performanceGoal stateOf))
(participantConstraint  ConditionOnState
  (not (activeMF (MFInstanceFn stateOf (TheList objectOfStateChange))))) 
(consequenceOf-TypeType ConditionOnState
  (c+ ((MeasurableQuantityFn goalActivation) performanceGoal) (Percent 0))) 
  
;;; In wartime, emphasize defense over expansion:
(isa DefendBuild StrategyType)
(participantType DefendBuild doneBy Agent-Generic)
(participantType DefendBuild defendGoal Goal)
(participantType DefendBuild buildGoal Goal)
(associatedRoleList DefendBuild (TheList doneBy defendGoal buildGoal))
(participantConstraint DefendBuild (activeMF (MFInstanceFn AtWar (TheList doneBy))))  ;; This defined the scope quantity conditions
(consequenceOf-TypeType DefendBuild
  (c+ ((MeasurableQuantityFn goalActivation) defendGoal) (Percent 100)))
(consequenceOf-TypeType DefendBuild
  (c+ ((MeasurableQuantityFn goalActivation) buildGoal) (Percent 50)))


;;; Ideally, this should be "head toward the unknown blob."
;;; We certainly don't want to instantiate an exploration process for every
;;; unknown tile.
;;; *** For now, this doesn't inherit from Exploration.
;;; *** We're going to try to just invoke the activity (ie, auto-explore)
;;; *** rather than micro-define this.
;(isa ExploreContinent StrategyType)
;(participantType ExploreContinent doneBy FreeCiv-Player)
;(participantType ExploreContinent primaryObjectMoving FC-Unit-Explorer)
;(participantType ExploreContinent strategicGoal Goal)
;(participantType ExploreContinent toLocation FreecivLocation)
;(associatedRoleList ExploreContinent (TheList doneBy primaryObjectMoving strategicGoal))
;(participantConstraint ExploreContinent (activeMF (MFInstanceFn ExplorationPhase (TheList doneBy))))
;(participantConstraint ExploreContinent (unitOwner primaryObjectMoving doneBy))
;(participantConstraint ExploreContinent (uninferredSentence (terrainAt toLocation ?any-terrain)))
;; We want to say that this foregrounds activities that will send explorers off into unknown territory.
;; ie, activate UnitMovement of explorer with toLocation being some unknown land terrain.
;;; Sure hope it never tries to enumerate every unknown location...
;;; How can we bind toLocation to the Indexical of closestLocationSatisfying unknownTerrain?
;(consequenceOf-TypeType ExploreContinent
;  (positiveDependence ((QPQuantityFn goalActivation) strategicGoal)
;    (MaintainFn 
;     (activeMF (MFInstanceFn UnitMovement (TheList primaryObjectMoving toLocation))))))

;;; We could say it's dependent on RateFn of the UnitMovement process
;(consequenceOf-TypeType ExploreContinent
;  (i+ ((MeasurableQuantityFn knownTerritory) doneBy) ?what))


;;; A good way to grow quickly during expansion phase is to set the
;;; government to Republic and send cities into rapture.
;;; This is easier if you're not at war.
;;; Question: Is this really a civ-wide process, or city-specific?
;(isa GrowThroughRapture StrategyType)
;(participantType GrowThroughRapture doneBy FreeCiv-Player)
;(participantConstraint GrowThroughRapture (activeMF (MFInstanceFn ExpansionPhase (TheList doneBy))))  ; while expanding our civ...
;(consequenceOf-TypeType GrowThroughRapture
;  (positiveDependence ((QPQuantityFn goalActivation) (SGoalFn 1))))  ; increase importance of achieving Democracy
;; How do we express the notion that we want to bring about a process activation?
;(consequenceOf-TypeType GrowThroughRapture
;  (positiveDependence ((QPQuantityFn goalActivation)
;    (MaintainFn (activeMF (MFInstanceFn DemocracyRaptureProcess (TheList doneBy objectOfStateChange)))))))

  
