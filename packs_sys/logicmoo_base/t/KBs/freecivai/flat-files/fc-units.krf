(in-microtheory FreecivMt)

;; -------------------
;; Generic FreeCiv unit
;; -------------------

(isa FreeCiv-UnitType SecondOrderCollection)
(genls FreeCiv-UnitType FreeCiv-BuildableThing-Type)
(typeGenls FreeCiv-UnitType FreeCiv-Unit)

(isa FreeCiv-Unit FreeCiv-UnitType)
(genls FreeCiv-Unit FreeCiv-Actor)         ; Units can take actions
(genls FreeCiv-Unit FreeCiv-BuildableThing)

;; This should probably tie into a concept above the
;; FreeCiv level...
; (genls FreeCiv-Unit ComputerGame-Strategy-Unit)

;; -------------------
;; Types of units
;; -------------------

(isa FreeCiv-LandUnit FreeCiv-UnitType)
(genls FreeCiv-LandUnit FreeCiv-Unit)

(isa FreeCiv-SeaUnit FreeCiv-UnitType)
(genls FreeCiv-SeaUnit FreeCiv-Unit)

(isa FreeCiv-AirUnit FreeCiv-UnitType)
(genls FreeCiv-AirUnit FreeCiv-Unit)

(isa FreeCiv-HeliUnit FreeCiv-UnitType)
(genls FreeCiv-HeliUnit FreeCiv-Unit)

;;; Support decomposition
(partitionedInto FreeCiv-Unit 
  (ThePartition FreeCiv-LandUnit FreeCiv-SeaUnit FreeCiv-AirUnit FreeCiv-HeliUnit))

;;; These decompositions come from the Freeciv manual:

(isa FreeCiv-MilitaryUnit FreeCiv-UnitType)
(genls FreeCiv-MilitaryUnit ModernMilitaryUnit-Deployable)    ; Connect to Cyc ontology
(genls FreeCiv-MilitaryUnit FreeCiv-Unit)
(comment FreeCiv-MilitaryUnit "FreeCiv-MilitaryUnit is the collection of fighting units.")

((TypeCapableFn behaviorCapable) FreeCiv-MilitaryUnit Defending protector-Agentive)

(isa FreeCiv-MilitaryLandUnit FreeCiv-UnitType)
(genls FreeCiv-MilitaryLandUnit FreeCiv-MilitaryUnit)
(genls FreeCiv-MilitaryLandUnit FreeCiv-LandUnit)
(comment FreeCiv-MilitaryLandUnit "MilitaryUnits that operatate on land.")

(isa FreeCiv-NoncombatantUnit FreeCiv-UnitType)
(genls FreeCiv-NoncombatantUnit FreeCiv-Unit)
(comment FreeCiv-NoncombatantUnit "FreeCiv-NoncombatantUnit is the collection of Explorers, Settlers, Workers, and Engineers.")

(isa FreeCiv-DiplomaticUnit FreeCiv-UnitType)
(genls FreeCiv-DiplomaticUnit FreeCiv-Unit)
(comment FreeCiv-DiplomaticUnit "FreeCiv-DiplomaticUnit is the collection of diplomats and spies.")

(isa FreeCiv-TradingUnit FreeCiv-UnitType)
(genls FreeCiv-TradingUnit FreeCiv-Unit)
(genls FreeCiv-TradingUnit Trader)           ; Connect to Cyc ontology
(comment FreeCiv-TradingUnit "FreeCiv-TradingUnit is the collection of caravans and freight.")


;;; Predicate List
;;; objectTypeHasProductionCost
;;; objectTypeHasUpkeepHappyEffect
;;; objectTypeHasUpkeepShieldEffect
;;; objectTypeHasUpkeepFoodCost
;;; objectTypeHasUpkeepGoldCost
;;; objectTypeObsoletes
;;; unitTypeHasPopulationCost
;;; unitTypeHasAttackStrength
;;; unitTypeHasDefendStrength
;;; unitTypeHasHitpoints
;;; unitTypeHasFirepower
;;; unitTypeHasVisionRange
;;; unitTypeHasMoveRate
;;; unitTypeHasTransportCapacity
;;; unitTypeHasFuelCapacity


;; -------------------
;; Unit properties/attributes
;; -------------------

(objectTypeTransported FreeCiv-SeaUnit FreeCiv-LandUnit)
(objectTypeTransported FreeCiv-AirUnit FreeCiv-LandUnit)

;; move-type (determines LandUnit, SeaUnit, etc.)
;; tech-req (objectProductionRequiresTech)
;; build-cost (objectTypeHasProductionCost)

;(isa unitTypeCanPerformActivity BinaryPredicate) ;; replaced by (TypeCapableFn behaviorCapable)
;(arity unitTypeCanPerformActivity 2)
;(arg1Isa unitTypeCanPerformActivity FreeCiv-ObjectType)
;(arg2Isa unitTypeCanPerformActivity Collection)
;(arg2Genl unitTypeCanPerformActivity FreeCiv-Activity)
;(comment unitTypeCanPerformActivity "Represents activity types the unit can perform.")

;; pop-cost *(does this happen w/non-unit objects?)*
(isa unitTypeHasPopulationCost BinaryPredicate)
(isa unitTypeHasPopulationCost MeasurableQuantitySlot)
(arity unitTypeHasPopulationCost 2)
(arg1Isa unitTypeHasPopulationCost FreeCiv-UnitType)
(arg2Isa unitTypeHasPopulationCost MeasurableQuantity)
(comment unitTypeHasPopulationCost "The amount by which production of this unit will reduce the city size.")

(isa unitHasPopulationCost BinaryPredicate)
(isa unitHasPopulationCost MeasurableQuantitySlot)
(arity unitHasPopulationCost 2)
(arg1Isa unitHasPopulationCost FreeCiv-Unit)
(arg2Isa unitHasPopulationCost MeasurableQuantity)
(comment unitHasPopulationCost "The instance-level version of unitTypeHasPopulationCost. Inferred from unitType.")

;;; Can't use binaryRoleTypePred because it's the first arg that varies,
;;; not the second.  Is there a variant of this?
;;(binaryRoleTypePred unitHasPopulationCost unitTypeHasPopulationCost)

;; attack *(does this happen w/non-unit objects?)*
;;
;; TODO--do we need to think about the "type" of attack?
;;       e.g. in AOE(?) archers might have "pierce attack" but
;;            not much "melee attack" (actual names not verified)
;;
(isa unitTypeHasAttackStrength BinaryPredicate)
(arity unitTypeHasAttackStrength 2)
(arg1Isa unitTypeHasAttackStrength FreeCiv-UnitType)
(arg2Isa unitTypeHasAttackStrength MeasurableQuantity)

(isa unitHasAttackStrength BinaryPredicate)
(arity unitHasAttackStrength 2)
(arg1Isa unitHasAttackStrength FreeCiv-Unit)
(arg2Isa unitHasAttackStrength MeasurableQuantity)
(comment unitHasAttackStrength "The instance-level version of unitTypeHasAttackStrength. Inferred from unitType.")

;; defense
;;
;; TODO--do we need to think about the "type" of defend?
;;       e.g. in AOE(?) knights might have "pierce shield" but
;;            not much "melee shield" (actual names not verified)
;;
(isa unitTypeHasDefendStrength BinaryPredicate)
(arity unitTypeHasDefendStrength 2)
(arg1Isa unitTypeHasDefendStrength FreeCiv-UnitType)
(arg2Isa unitTypeHasDefendStrength MeasurableQuantity)

(isa unitHasDefendStrength BinaryPredicate)
(arity unitHasDefendStrength 2)
(arg1Isa unitHasDefendStrength FreeCiv-Unit)
(arg2Isa unitHasDefendStrength MeasurableQuantity)
(comment unitHasDefendStrength "The instance-level version of unitTypeHasDefendStrength.  Inferred from unitType.")

(isa unitTypeHasHitpoints BinaryPredicate)
(arity unitTypeHasHitpoints 2)
(arg1Isa unitTypeHasHitpoints FreeCiv-UnitType)
(arg2Isa unitTypeHasHitpoints MeasurableQuantity)

(isa unitHasHitpoints BinaryPredicate)
(arity unitHasHitpoints 2)
(arg1Isa unitHasHitpoints FreeCiv-Unit)
(arg2Isa unitHasHitpoints MeasurableQuantity)
(comment unitHasHitpoints "The instance-level version of unitTypeHasHitpoints.  Inferred from unitType.")

;; firepower
(isa unitTypeHasFirepower BinaryPredicate)
(arity unitTypeHasFirepower 2)
(arg1Isa unitTypeHasFirepower FreeCiv-UnitType)
(arg2Isa unitTypeHasFirepower MeasurableQuantity)
;; (comment unitTypeHasFirepower "What exactly is firepower?")

(isa unitHasFirepower BinaryPredicate)
(arity unitHasFirepower 2)
(arg1Isa unitHasFirepower FreeCiv-Unit)
(arg2Isa unitHasFirepower MeasurableQuantity)
(comment unitHasFirepower "The instance-level version of unitTypeHasFirepower.  Inferred from unitType.")

;; vision-range 
(isa unitTypeHasVisionRange BinaryPredicate)
(isa unitTypeHasVisionRange FunctionalPredicate)
(functionalInArgs unitTypeHasVisionRange 2)
(arity unitTypeHasVisionRange 2)
(arg1Isa unitTypeHasVisionRange FreeCiv-UnitType)
(arg2Isa unitTypeHasVisionRange Integer)  ;; units?  tile distance?
(comment unitTypeHasVisionRange "The maximum distance over which the unit can see.")

;; move-rate
;; Roughly the number of actions a unit can take in a turn.  
;; For physical movement, this is affected by terrain.
;; Rivers and roads take 1/3 of a movement point.
;; Explorers see all land as roads, so their move rate of 1 translates to 3 tiles per move.
;; Ideally, this should be measured in (PerFn MovePoint Turn).
(isa unitTypeHasMoveRate BinaryPredicate)
(arity unitTypeHasMoveRate 2)
(arg1Isa unitTypeHasMoveRate FreeCiv-UnitType)
(arg2Isa unitTypeHasMoveRate Integer)
(comment unitTypeHasMoveRate "The base distance which a unit can travel during a turn. This can be modified by the terrain over which the unit is moving.")

(isa unitHasMoveRate BinaryPredicate)
(arity unitHasMoveRate 2)
(arg1Isa unitHasMoveRate FreeCiv-Unit)
(arg2Isa unitHasMoveRate Integer)
(comment unitHasMoveRate "The instance-level version of unitTypeHasMoveRate.  Inferred from unitType.")

;; transport-capacity
(isa unitTypeHasTransportCapacity BinaryPredicate)
(arity unitTypeHasTransportCapacity 2)
(arg1Isa unitTypeHasTransportCapacity FreeCiv-UnitType)
(arg2Isa unitTypeHasTransportCapacity ContinuousMeasurableQuantity)  ;; Should this be a (FreeCivPopulationFn ?x) term?
(comment unitTypeHasTransportCapacity "The maximum number of other units that can be transported by the unit (FreecivUnitCountFn <num>).")

(isa unitHasTransportCapacity BinaryPredicate)
(arity unitHasTransportCapacity 2)
(arg1Isa unitHasTransportCapacity FreeCiv-Unit)
(arg2Isa unitHasTransportCapacity ContinuousMeasurableQuantity)
(comment unitHasTransportCapacity "The instance-level version of unitTypeHasTransportCapacity.  Inferred from unitType.")


;; Fuel
;; number of turns air units can fly before they crash. For
;; barbarians this is used as lifetime instead. If this is zero,
;; the unit has unlimited fuel, despite flying.
(isa unitTypeHasFuelCapacity BinaryPredicate)
(arity unitTypeHasFuelCapacity 2)
(arg1Isa unitTypeHasFuelCapacity FreeCiv-UnitType)
(arg2Isa unitTypeHasFuelCapacity Integer)
(comment unitTypeHasFuelCapacity "Number of turns air units can fly before they crash.")

(isa unitHasFuelCapacity BinaryPredicate)
(arity unitHasFuelCapacity 2)
(arg1Isa unitHasFuelCapacity FreeCiv-Unit)
(arg2Isa unitHasFuelCapacity Integer)
(comment unitHasFuelCapacity "The instance-level version of unitTypeHasFuelCapacity.  Inferred from unitType.")

;; upkeep-happy (objectTypeHasUpkeepHappyEffect)
;; upkeep-shield (objectTypeHasUpkeepShieldEffect)
;; upkeep-food (objectTypeHasUpkeepFoodCost)
;; upkeep-gold (objectTypeHasUpkeepGoldCost)

;; flags **(?what do to with these?)**
;; roles **(?what do to with these?)**
;; helptext **(?what do to with this?)**


