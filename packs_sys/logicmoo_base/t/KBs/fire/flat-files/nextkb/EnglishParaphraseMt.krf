(in-microtheory EnglishParaphraseMt)

(isa preferredGenUnit NLGenerationPredicate)
(isa genPhrase NLGenerationPredicate)
(genFormat nor "neither ~a nor ~a" TheEmptyList)
(genFormat nand "either ~a or ~a is false" TheEmptyList)
(argQuotedIsa genPhrase 1 CycLReifiableDenotationalTerm)
(arg1QuotedIsa genPhrase CycLReifiableDenotationalTerm)
(argQuotedIsa preferredGenUnit 1 CycLReifiableDenotationalTerm)
(arg1QuotedIsa preferredGenUnit CycLReifiableDenotationalTerm)
(genFormat cycTacticID "the inference tactic ~a contained within the inference problem ~a, has ~a as its ID" (TheList (TheList 1 :SINGULAR) (TheList 2 :SINGULAR)))
(genFormat cycProofID "the inference proof ~a contained within inference problem store ~a, has ~a as its ID" (TheList (TheList 1 :SINGULAR) (TheList 2 :SINGULAR)))
(genFormat cycProblemLinkID "the inference problem link ~a contained within inference problem store ~a, has ~a as its ID" (TheList (TheList 1 :SINGULAR) (TheList 2 :SINGULAR)))
(genFormat cycProblemID "the inference problem ~a contained within inference problem store ~a, has ~a as its ID" (TheList (TheList 1 :SINGULAR) (TheList 2 :SINGULAR)))
(genFormat cycProblemStoreInferenceCount "the inference problem store ~a has ~a inference~a" (TheList 1 2 (TheList "" "s")))
(genFormat cycProblemStoreProofCount "the inference problem store ~a has ~a proof~a" (TheList 1 2 (TheList "" "s")))
(genFormat cycProblemStoreLinkCount "the inference problem store ~a has ~a inference link~a" (TheList 1 2 (TheList "" "s")))
(genFormat cycProblemStoreProblemCount "the inference problem store ~a has ~a inference problem~a" (TheList 1 2 (TheList "" "s")))
(genFormat notAssertibleMt "Sentences cannot be asserted in ~a" (TheList (TheList 1 :EQUALS)))
(typedGenlPreds musicTypeInfluencedByMusicType musicTypeInfluencedByType)
(genFormat sentenceEquiv "the formula ~a is logically equivalent to the formula ~a" (TheList (TheList 1 :QUOTE) (TheList 2 :QUOTE)))
(quotedArgument genCodeSupport 1)
(genKeyword Thing :THING)
(genKeyword isa :ISA)
(genKeyword genls :GENLS)
(genKeyword equals :EQUALS)
(genKeyword and :AND)
(genFormat trueRule "~a is true, and ~a is an instantiation of the rule template ~a" (TheList 2 2 1))
(genFormat substring-CaseInsensitive "~s is a case-insensitive substring of ~s" TheEmptyList)
(genFormat substring "~s is a substring of ~s" (TheList 1 2))
(genFormat MinRangeFn "the minimum range subsumed by ~a and ~a" TheEmptyList)
(genFormat MaxRangeFn "the maximum range subsuming ~a and ~a" TheEmptyList)
(genFormat RoundUpFn "~a, truncated" TheEmptyList)
(genFormat RoundUpFn "~a, rounded up" TheEmptyList)
(genFormat RoundDownFn "~a, rounded down" TheEmptyList)
(genFormat differentSymbols "~a are different symbols" (TheList (TheList 1 :AND)))
(genFormat thereExistAtMost "there ~a at most ~a ~a such that ~a" (TheList (TheList "is" "are") 1 2 3))
(genFormat FunctionToArg "'~a'" (TheList 2 :SINGULAR :MASS-NUMBER))
(genFormat Maximum "the maximum ~a over ~a" (TheList 2 (TheList 1 :PLURAL)))
(genFormat completeExtentEnumerable "the complete extent of the predicate ~a is known" (TheList (TheList 1 :EQUALS)))
(genFormat forAll "for every ~a, ~a" TheEmptyList)
(genFormat implies "if ~a, then ~a" TheEmptyList)
(genFormat equiv "~a if and only if ~a" TheEmptyList)
(genFormat xor "either ~a or ~a (but not both)" TheEmptyList)
(genFormat thereExistAtLeast "there ~a at least ~a ~a such that ~a" (TheList (TheList "is" "are") 1 2 3))
(genFormat PlusFn "the sum of ~a" (TheList (TheList 1 :AND)))
(genFormat PlusAll "the sum of ~a over ~a" (TheList 2 (TheList 1 :PLURAL)))
(genFormat requiredArg2Pred "every ~a is arg 2 of ~a relation" (TheList 1 (TheList 2 :QUOTE :A-THE-WORD)))
(genFormat Minimum "the minimum ~a over ~a" (TheList 2 (TheList 1 :PLURAL)))
(genFormat genFormat "to generate English for assertions formed with ~a, the format string ~a is used with the extra information in this list: ~a" (TheList (TheList 1 :EQUALS) 2 3))
(genFormat SecondFn "~a and ~a second~a" (TheList 2 1 (TheList "" "s")))
(genFormat relationExpansion "one CycL expansion for assertions which have ~a in the operator position is ~a" (TheList (TheList 1 :EQUALS) (TheList 2 :EQUALS)))
(requiredArg1Pred Relation genFormat)
(comment genPhrase "In a generated English phrase, the Cyc term arg1 corresponds best to the phrase arg4, when used as part of speech arg2 with restriction arg3.")
(comment preferredGenUnit "In a generated English phrase, the Cyc term arg1 corresponds best with the word arg3 used as part of speech arg2.")
(comment genCodeSupport "(#$genCodeSupport RELATION) means that the paraphrasing for RELATION is handled in code.  If RELATION doesn't have a #$genFormat assertion, it doesn't need it.  If RELATION does have a #$genFormat assertion, the code may use it but alter it in some way.")
(genlPreds musicTypeInfluencedByMusicType musicTypeInfluencedByType)
