(in-microtheory CyclishParaphraseMt)

(genFormat prettyString "~a is a pretty string for the Cyc term ~a" (TheList 2 (TheList 1 :EQUALS)))
(genFormat prettyString-Canonical "~a is the pretty name for the Cyc term ~a" (TheList 2 (TheList 1 :EQUALS)))
(genFormat evaluateImmediately "the canonicalizer should immediately evaluate expressions with `~a' functors" (TheList (TheList 1 :EQUALS)))
(genFormat interArgIsaGenl1-2 "if the relation '~a' has an instance of '~a' as its first argument, it must have a spec of '~a' as its second argument" (TheList (TheList 1 :EQUALS) (TheList 2 :EQUALS) (TheList 3 :EQUALS)))
(genFormat interArgGenl1-2 "if the relation '~a' has a spec of '~a' as its first argument, it must have a spec of '~a' as its second argument" (TheList (TheList 1 :EQUALS) (TheList 2 :EQUALS) (TheList 3 :EQUALS)))
(genFormat myCreator "~a was created by ~a" (TheList (TheList 1 :EQUALS) 2))
(genFormat arg5Genl "the fifth argument to `~a' must have `~a' as a generalization (#$genls)" (TheList (TheList 1 :EQUALS) (TheList 2 :EQUALS)))
(genFormat quotedArgument "argument ~a of ~a is a CycL expression itself" (TheList 2 (TheList 1 :EQUALS)))
(genFormat relationAllExistsCount "~a has ~a ~a in the role of ~a" (TheList (TheList 2 :SINGULAR :A-THE-WORD) 4 (TheList 3 :PLURAL) (TheList 1 :EQUALS)))
(genFormat interArgIsa2-4 "if the relation '~a' has an instance of '~a' as its second argument, it must have an instance of '~a' as its fourth argument" (TheList (TheList 1 :EQUALS) (TheList 2 :EQUALS) (TheList 3 :EQUALS)))
(genFormat interArgResultGenl "if arg ~a to ~a is ~a, the result is a subset of ~a" (TheList 2 (TheList 1 :EQUALS) (TheList 3 (TheList :MASS-NUMBER) :SINGULAR :A-THE-WORD) (TheList 4 :EQUALS)))
(genFormat relationExistsMinAll "for every ~a, there are at least ~a ~a ~a such that [~a ~a ~a]" (TheList 2 4 1 (TheList "" "s") (TheList 1 :EQUALS) (TheList 2 :EQUALS) (TheList 3 :EQUALS)))
(genFormat distributesOutOfArg "`~a' distributes out of `~a' as argument ~a" (TheList (TheList 1 :EQUALS) (TheList 2 :EQUALS) 3))
(genFormat assertedPredicateArg "there is some `~a' assertion with ~a as argument ~a" (TheList (TheList 3 :EQUALS) 1 2))
(genFormat interArgResultIsa "if arg ~a to ~a is ~a, the result is ~a" (TheList 2 (TheList 1 :EQUALS) (TheList 3 (TheList :MASS-NUMBER) :SINGULAR :A-THE-WORD) (TheList 3 (TheList :MASS-NUMBER) :SINGULAR :A-THE-WORD)))
(genFormat genlInverse "the predicate ~a is a genl inverse of ~a" (TheList (TheList 2 :EQUALS) (TheList 1 :EQUALS)))
(genFormat arityMax "~a takes at most ~a argument~a" (TheList (TheList 1 :EQUALS) 2 (TheList "" "s")))
(genFormat negationInverse "the predicate ~a is the negation inverse of ~a" (TheList (TheList 1 :EQUALS) (TheList 2 :EQUALS)))
(genFormat transitiveViaArg "argument ~a of ~a is transitive with respect to ~a" (TheList 3 (TheList 1 :EQUALS) (TheList 2 :EQUALS)))
(genFormat arg2Genl "the second argument to `~a' must have `~a' as a generalization (#$genls)" (TheList (TheList 1 :EQUALS) (TheList 2 :EQUALS)))
(genFormat scopingArg "arg ~a of '~a' denotes one or more scoped variables" (TheList 2 (TheList 1 :EQUALS)))
(genFormat genMassNoun "~a should paraphrase as a mass noun in English" (TheList (TheList 1 :EQUALS)))
(genFormat nearestDifferentIsa "~a is the nearest collection of which ~a but not ~a is an instance" (TheList (TheList 3 :EQUALS) 1 2))
(genFormat nearestGenlMt "~a is one of the nearest generic contexts of ~a" (TheList (TheList 2 :EQUALS) (TheList 1 :EQUALS)))
(genFormat interArgIsa3-1 "if the relation '~a' has an instance of '~a' as its third argument, it must have an instance of '~a' as its first argument" (TheList (TheList 1 :EQUALS) (TheList 2 :EQUALS) (TheList 3 :EQUALS)))
(genFormat relationAllExistsMax "for every ~a, there are at most ~a ~a~a such that [~a ~a ~a]" (TheList 2 4 3 (TheList "" "s") (TheList 1 :EQUALS) (TheList 2 :EQUALS) (TheList 3 :EQUALS)))
(genFormat interArgIsa3-5 "if the relation '~a' has an instance of '~a' as its third argument, it must have an instance of '~a' as its fifth argument" (TheList (TheList 1 :EQUALS) (TheList 2 :EQUALS) (TheList 3 :EQUALS)))
(genFormat relationAllExistsMin "for every ~a, there are at least ~a ~a ~a such that [~a ~a ~a]" (TheList 2 4 3 (TheList "" "s") (TheList 1 :EQUALS) (TheList 2 :EQUALS) (TheList 3 :EQUALS)))
(genFormat interArgIsa5-2 "if the relation '~a' has an instance of '~a' as its fifth argument, it must have an instance of '~a' as its second argument" (TheList (TheList 1 :EQUALS) (TheList 2 :EQUALS) (TheList 3 :EQUALS)))
(genFormat oldConstantName "the former Cyc name for ~a is ~a" (TheList (TheList 1 :EQUALS) 2))
(genFormat termOfUnit "~a is a term in CycL" (TheList (TheList 1 :EQUALS)))
(genFormat myCreationSecond "~a was created at ~a on the day it was created" (TheList (TheList 1 :EQUALS) 2))
(genFormat EvaluateSubLFn "the result of evaluating the SubL expression : ~a" (TheList (TheList 1 :EQUALS)))
(genFormat constrainsArg "`~a' constrains argument ~a of a relation" (TheList (TheList 1 :EQUALS) 2))
(genFormat transitiveViaArgInverse "argument ~a of ~a is transitive with respect to the inverse of ~a" (TheList 3 (TheList 1 :EQUALS) (TheList 2 :EQUALS)))
(genFormat comment "~a has this comment: ~s" (TheList (TheList 1 :EQUALS) 2))
(genFormat interArgIsa1-4 "if the relation '~a' has an instance of '~a' as its first argument, it must have an instance of '~a' as its fourth argument" (TheList (TheList 1 :EQUALS) (TheList 2 :EQUALS) (TheList 3 :EQUALS)))
(genFormat nearestDifferentGenls "~a is one of the nearest unsubsumed collections of which ~a is a subset but ~a is not" (TheList (TheList 3 :EQUALS) (TheList 1 :EQUALS) (TheList 2 :EQUALS)))
(genFormat myCreationPurpose "~a was created for ~a" (TheList (TheList 1 :EQUALS) (TheList 2 :EQUALS)))
(genFormat arg3Genl "the third argument to `~a' must have `~a' as a generalization (#$genls)" (TheList (TheList 1 :EQUALS) (TheList 2 :EQUALS)))
(genFormat interArgIsa4-1 "if the relation '~a' has an instance of '~a' as its fourth argument, it must have an instance of '~a' as its first argument" (TheList (TheList 1 :EQUALS) (TheList 2 :EQUALS) (TheList 3 :EQUALS)))
(genFormat FormulaArgFn "argument ~a of ~a" (TheList 1 (TheList 2 :EQUALS)))
(genFormat nearestCommonSpecs "~a is among the nearest common specializations of the collections ~a and ~a" (TheList (TheList 3 :EQUALS) (TheList 1 :EQUALS) (TheList 2 :EQUALS)))
(genFormat resultIsaArgIsa "the result of ~a is a member of the #$isa of ~a" (TheList (TheList 1 :EQUALS) 2))
(genFormat interArgIsa4-3 "if the relation '~a' has an instance of '~a' as its fourth argument, it must have an instance of '~a' as its third argument" (TheList (TheList 1 :EQUALS) (TheList 2 :EQUALS) (TheList 3 :EQUALS)))
(genFormat arg6Genl "the sixth argument to `~a' must have `~a' as a generalization (#$genls)" (TheList (TheList 1 :EQUALS) (TheList 2 :EQUALS)))
(genFormat genlPreds "~a is a specialized form of ~a" (TheList (TheList 1 :EQUALS) (TheList 2 :EQUALS)))
(genFormat interArgIsa4-2 "if the relation '~a' has an instance of '~a' as its fourth argument, it must have an instance of '~a' as its second argument" (TheList (TheList 1 :EQUALS) (TheList 2 :EQUALS) (TheList 3 :EQUALS)))
(genFormat siblingDisjointExceptions "~a and ~a are sibling disjoint exceptions" (TheList (TheList 1 :EQUALS) (TheList 2 :EQUALS)))
(genFormat opaqueArgument "argument ~a of ~a is denotationally opaque" (TheList 2 (TheList 1 :EQUALS)))
(genFormat relationExistsMaxAll "for every ~a, there are at most ~a ~a~a such that (~a ~a ~a)" (TheList 3 4 2 (TheList "" "s") (TheList 1 :EQUALS) (TheList 2 :QUOTE) (TheList 3 :QUOTE)))
(genFormat exampleAssertions "a good example of the use of ~a is this assertion: ~a" (TheList (TheList 1 :EQUALS) 2))
(genFormat notAssertible "GAFs involving ~a cannot be asserted" (TheList (TheList 1 :EQUALS)))
(genFormat MeaningInSystemFn "the concept corresponding to ~a in ~a" (TheList (TheList 2 :EQUALS) (TheList 1 :EQUALS)))
(genFormat interArgIsa2-3 "if the relation '~a' has an instance of '~a' as its second argument, it must have an instance of '~a' as its third argument" (TheList (TheList 1 :EQUALS) (TheList 2 :EQUALS) (TheList 3 :EQUALS)))
(genFormat nearestGenlPreds "~a is one of the nearest generalized predicates of ~a" (TheList (TheList 2 :EQUALS) (TheList 1 :EQUALS)))
(genFormat interArgIsa2-5 "if the relation '~a' has an instance of '~a' as its second argument, it must have an instance of '~a' as its fifth argument" (TheList (TheList 1 :EQUALS) (TheList 2 :EQUALS) (TheList 3 :EQUALS)))
(genFormat salientAssertions "the meaning of ~a is critically determined by this assertion: ~a" (TheList (TheList 1 :EQUALS) 2))
(genFormat termDependsOn "the existence of ~a depends on ~a" (TheList (TheList 1 :EQUALS) (TheList 2 :EQUALS)))
(genFormat natFunction "the non-atomic term ~a uses the function ~a" (TheList (TheList 1 :EQUALS) (TheList 2 :EQUALS)))
(genFormat relationExistsAll "for every ~a, there exists ~a such that the relation ~a holds between them" (TheList (TheList 3 :GERUND :SINGULAR) (TheList 2 :GERUND :MASS-NUMBER :SINGULAR :A-THE-WORD) (TheList 1 :EQUALS)))
(genFormat evaluationDefn "~a is an HL SubL function which is used to compute the value of expressions containing ~a" (TheList (TheList 2 :EQUALS) (TheList 1 :EQUALS)))
(genFormat expansionDefn "~a maps ~a expressions from EL to HL" (TheList (TheList 2 :EQUALS) (TheList 1 :EQUALS)))
(genFormat arg4Genl "the fourth argument to `~a' must have `~a' as a generalization (#$genls)" (TheList (TheList 1 :EQUALS) (TheList 2 :EQUALS)))
(genFormat sharedNotes "~a is a shared documentation note for ~a" (TheList (TheList 2 :EQUALS) (TheList 1 :EQUALS)))
(genFormat resultGenl "the result of applying ~a to its arguments is a subset of ~a" (TheList (TheList 1 :EQUALS) (TheList 2 :EQUALS)))
(genFormat natArgument "~a is argument ~a of ~a" (TheList (TheList 3 :EQUALS) 2 (TheList 1 :EQUALS)))
(genFormat preservesGenlsInArg "~a preserves #$genls in arg ~a" (TheList (TheList 1 :EQUALS) 2))
(genFormat interArgIsa5-3 "if the relation '~a' has an instance of '~a' as its fifth argument, it must have an instance of '~a' as its third argument" (TheList (TheList 1 :EQUALS) (TheList 2 :EQUALS) (TheList 3 :EQUALS)))
(genFormat relationExistsCountAll "every ~a has exactly ~a ~a~a such that (~a ~a ~a)" (TheList 3 4 2 (TheList "" "s") (TheList 1 :EQUALS) (TheList 2 :EQUALS) (TheList 3 :EQUALS)))
(genFormat interArgIsa3-4 "if the relation '~a' has an instance of '~a' as its third argument, it must have an instance of '~a' as its fourth argument" (TheList (TheList 1 :EQUALS) (TheList 2 :EQUALS) (TheList 3 :EQUALS)))
(genFormat arity "~a takes ~a argument~a" (TheList (TheList 1 :EQUALS) 2 (TheList "" "s")))
(genFormat interArgIsa5-1 "if the relation '~a' has an instance of '~a' as its fifth argument, it must have an instance of '~a' as its first argument" (TheList (TheList 1 :EQUALS) (TheList 2 :EQUALS) (TheList 3 :EQUALS)))
(genFormat evaluateAtEL "the canonicalizer should evaluate expressions with `~a' functors" (TheList (TheList 1 :EQUALS)))
(genFormat coExtensional "~a and ~a are co-extensional collections" (TheList (TheList 1 :EQUALS) (TheList 2 :EQUALS)))
(genFormat defnNecessary "~a is a Cyc SubLisp function name that serves as a necessary definition for membership in ~a" (TheList (TheList 2 :EQUALS) (TheList 1 :EQUALS)))
(genFormat arg1Genl "the first argument to `~a' must have `~a' as a generalization (#$genls)" (TheList (TheList 1 :EQUALS) (TheList 2 :EQUALS)))
(genFormat independentArg "`~a' constrains argument ~a of a relation" (TheList (TheList 1 :EQUALS) 2))
(genFormat completeExtentEnumerableForValueInArg "the complete extent of ~a is known with ~a as argument ~a" (TheList (TheList 1 :EQUALS) (TheList 2 :EQUALS) 3))
(genFormat interArgIsa1-5 "if the relation '~a' has an instance of '~a' as its first argument, it must have an instance of '~a' as its fifth argument" (TheList (TheList 1 :EQUALS) (TheList 2 :EQUALS) (TheList 3 :EQUALS)))
(genFormat interArgFormat1-2 "if the first argument to ~a is ~a then the second argument must have the entry format ~a" (TheList (TheList 1 :EQUALS) (TheList 2 :GERUND :SINGULAR :MASS-NUMBER :A-THE-WORD) (TheList 3 :EQUALS)))
(genFormat interArgIsa1-3 "if the relation '~a' has an instance of '~a' as its first argument, it must have an instance of '~a' as its third argument" (TheList (TheList 1 :EQUALS) (TheList 2 :EQUALS) (TheList 3 :EQUALS)))
(genFormat nearestCommonGenlMt "~a is among the nearest common generalizations of the contexts ~a and ~a" (TheList (TheList 3 :EQUALS) (TheList 1 :EQUALS) (TheList 2 :EQUALS)))
(genFormat definingMt "~a is defined in the context of ~a" (TheList (TheList 1 :EQUALS) (TheList 2 :EQUALS)))
(genFormat notAssertibleCollection "Direct instances of ~a cannot be asserted" (TheList (TheList 1 :EQUALS)))
(genFormat interArgIsa4-5 "if the relation '~a' has an instance of '~a' as its fourth argument, it must have an instance of '~a' as its fifth argument" (TheList (TheList 1 :EQUALS) (TheList 2 :EQUALS) (TheList 3 :EQUALS)))
(genFormat interArgIsa3-2 "if the relation '~a' has an instance of '~a' as its third argument, it must have an instance of '~a' as its second argument" (TheList (TheList 1 :EQUALS) (TheList 2 :EQUALS) (TheList 3 :EQUALS)))
(genFormat interArgIsa5-4 "if the relation '~a' has an instance of '~a' as its fifth argument, it must have an instance of '~a' as its fourth argument" (TheList (TheList 1 :EQUALS) (TheList 2 :EQUALS) (TheList 3 :EQUALS)))
(genFormat defnSufficient "the procedure named ~a is a sufficient test for ~a" (TheList (TheList 2 :EQUALS) (TheList 1 :EQUALS)))
(genFormat defnIff "~a is the name of a piece of code in the Cyc system substrate which acts as a necessary and sufficient test for inclusion in the #$Collection ~a" (TheList (TheList 2 :EQUALS) (TheList 1 :EQUALS)))
