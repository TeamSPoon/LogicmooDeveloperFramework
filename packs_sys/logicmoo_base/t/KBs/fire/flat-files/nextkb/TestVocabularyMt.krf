(in-microtheory TestVocabularyMt)

(isa (MetropolitanAreaFn CityOfWashingtonDC) GeographicalAgent)
(isa CommonQueriesForTermTest KBContentTestSpecificationType)
(isa CommonSenseTest-PartsReasoning CommonSenseTestType)
(isa CommonSenseTest-MathAndSetTheory KBContentTestSpecificationType)
(isa CommonSenseTest-FeelingAndEmotionReasoning KBContentTestSpecificationType)
(isa NLGenerationIntegrityTest KBContentTestSpecificationType)
(isa CommonSenseTest-HypotheticalQuery KBContentTestSpecificationType)
(isa ExpertiseInferenceTest KBContentTestSpecificationType)
(isa testAnswersCycLUnimportant NonAbduciblePredicate)
(isa CommonSenseTest-ProbabilityReasoning KBContentTestSpecificationType)
(isa testAnswersCycL-Exact NonAbduciblePredicate)
(isa cyclificationNotes DocumentationPredicate)
(isa CommonSenseTest-LogicReasoning KBContentTestSpecificationType)
(isa CommonSenseTest-FamilyRelations KBContentTestSpecificationType)
(isa TypicalSizesTest KBContentTestSpecificationType)
(isa ILPTestQuery KBContentTestSpecificationType)
(isa PSRIntegrityTest KBContentTestSpecificationType)
(isa CommonSenseTest-FeelingAndEmotionReasoning CommonSenseTestType)
(isa ILPModeTest KBContentTestSpecificationType)
(isa SituationDecompositionDetectionTest KBContentTestSpecificationType)
(isa LexiconIntegrityTest KBContentTestSpecificationType)
(isa CommonSenseTest-ConceptualTruthReasoning CommonSenseTestType)
(isa CommonSenseTest-ConceptualTruthReasoning KBContentTestSpecificationType)
(isa testResponsibleCyclist NonAbduciblePredicate)
(isa DefaultInferenceParameterGroup IntangibleExistingThing)
(isa CommonSenseTest-IntentionalStateReasoning CommonSenseTestType)
(isa CommonSenseTest-CalendarReasoning KBContentTestSpecificationType)
(isa NLGenerationIntegrityTest-String KBContentTestSpecificationType)
(isa CommonSenseTest-Ailments KBContentTestSpecificationType)
(isa TweetyThePenguin Penguin)
(isa CommonSenseTest-PartsReasoning KBContentTestSpecificationType)
(isa BaxtersCommonSenseTests KBContentTestSpecificationType)
(isa testAnswersCycL-NotWanted NonAbduciblePredicate)
(isa CommonSenseTest-Anatomy KBContentTestSpecificationType)
(isa CommonSenseTest-IntentionalStateReasoning KBContentTestSpecificationType)
(isa KBIntegrityTest KBContentTestSpecificationType)
(isa SubsumingSituationTypeDetectionTest KBContentTestSpecificationType)
(isa GrammaticalGenderIntegrityTest KBContentTestSpecificationType)
(isa IMDBRegressionTest KBContentTestSpecificationType)
(isa ScenarioTell KBContentTestSpecificationType)
(isa ToyParseTreeIntegrityTest KBContentTestSpecificationType)
(isa CommonSenseTest-MathAndSetTheory CommonSenseTestType)
(isa LinkDiscoveryTest KBContentTestSpecificationType)
(isa SKSITest NonAbducibleCollection)
(isa CommonSenseTest KBContentTestSpecificationType)
(isa PhysicsTestQuery KBContentTestSpecificationType)
(isa ETSPhysicsSampleQuery KBContentTestSpecificationType)
(isa CommonSenseTest-FamilyRelations CommonSenseTestType)
(isa AbductionTest KBContentTestSpecificationType)
(isa CommonSenseTest-Capability KBContentTestSpecificationType)
(isa DefaultInferenceParameterGroup Group)
(isa testAnswersCycL-Wanted NonAbduciblePredicate)
(isa UrbanCombatTestQuery KBContentTestSpecificationType)
(isa SpatialReasoningTest KBContentTestSpecificationType)
(isa CommonSenseTest-LogicReasoning CommonSenseTestType)
(arg1Genl testCollectionCyclistResponsible StructurallySpecificWork)
(argGenl testCollectionMetricsToGather 1 SoftwareTestSpecification)
(requiredArg1Pred CPTFinalQuestionSetRegressionTest testQueryForBugzillaBug)
(argGenl testCollectionProjectResponsible 1 KBContentTest)
(typeGenls SoftwareTestTypeVersion SoftwareTestVersion)
(typeGenls CommonSenseTestType CommonSenseTest)
(argGenl testCollectionProjectResponsible 1 StructurallySpecificWork)
(functionCorrespondingPredicate-Canonical NegationSubqueryFromMCOptionTestFn mcTestOptionNegationSubqueryTest 2)
(quotedIsa testStatus-QueryRun TestingConstant)
(quotedIsa LLGeneImpactBoneTestFn ForwardReifiableCycLFunctor)
(functionCorrespondingPredicate-Canonical PositiveSubqueryFromMCOptionTestFn mcTestOptionPositiveSubqueryTest 2)
(quotedIsa testResponsibleProject TestingConstant)
(argFormat cyclificationNotes 1 singleEntryFormatInArgs)
(argFormat testAnswersCycL-Exact 2 SingleEntry)
(openEntryFormatInArgs cyclificationNotes 2)
(strictlyFunctionalInArgs cyclificationNotes 1)
(quotedIsa NounPhraseParse TestingConstant)
(typeGenls SoftwareTestSpecificationType SoftwareTestSpecification)
(argGenl testCollectionCyclistResponsible 1 KBContentTest)
(quotedIsa testSpecificationTestedInExecutionRun TestQueryConstant)
(quotedIsa TweetyThePenguin TestingConstant)
(quotedIsa TestExecutionRun TestingConstant)
(arg1Genl testCollectionProjectResponsible KBContentTest)
(argGenl testCollectionCyclistResponsible 1 StructurallySpecificWork)
(arg1Genl testCollectionProjectResponsible StructurallySpecificWork)
(quotedIsa LLGeneImpactBoneTest2Fn ForwardReifiableCycLFunctor)
(quotedIsa testResponsibleCyclist TestingConstant)
(quotedIsa TestQueryRun TestingConstant)
(argFormat cyclificationNotes 2 openEntryFormatInArgs)
(strictlyFunctionalInArgs testAnswersCycL-Exact 2)
(quotedIsa TestQueryFn ForwardReifiableCycLFunctor)
(arg1Genl testCollectionCyclistResponsible KBContentTest)
(quotedIsa testSpecificationTestedInQueryRun TestQueryConstant)
(quotedIsa MarthaThePassengerPigeon TestingConstant)
(requiredArg1Pred CPTEvaluationQuestionSetTest testQueryForBugzillaBug)
(arg1Genl testCollectionMetricsToGather SoftwareTestSpecification)
(quotedIsa testStatus TestingConstant)
(comment ETSPhysicsSampleQuery "A collection of tests whose instances are sample physics questions written by ETS.")
(comment InferenceMetric-BindingLevel "Each instance of #$InferenceMetric-BindingLevel is a metric concerning a single #$ELInferenceBindingSet retrieved in the course of testing a CycL query.")
(comment LexiconIntegrityTest "A collection of tests, each of which checks for inefficiencies or errors in the structure of Cyc's lexical knowledge.")
(comment SubsumingSituationTypeDetectionTest "A collection of tests, whose instances should test system functionality that is relevant to identifying situation types that are likely to be such that an instance subsumes a known observable in data as a #$properSubSituations. The name of all such constants should begin with the capitalized letters 'SSTDT' standing for 'subsuming situation type detection test'.")
(comment ParseNounPhraseTest "Elements of #$NounPhraseParserTest allow the #$NounPhraseParser to be tested on bits of english specified via #$nlTestEnglish.  One should use #$nlTestTargetCycL in order to specify the target parse(s) for the #$nlTestEnglish.  Currently (2000-09-12) the function used in noun phrase parsing is called recursive-block-parser.")
(comment testCollectionCyclistResponsible "(#$testCollectionCyclistResponsible TEST-COLLECTION CYCLIST) indicates that CYCLIST is one of the individuals responsible for ensuring that the tests in TEST-COLLECTION continue to work. For example, CYCLIST should receive email when TEST-COLLECTION tests stop working. ")
(comment PhysicsTestQuery "A collection of tests to assess Cyc's knowledge of Physics.")
(comment testAnswerSupportedByHLSupportModule-Wanted "(#$testAnswerSupportedByHLSupportModule-Wanted TEST SUPPORT-MODULE) states that there should be some #$CycHLSupportDatastructure justifying an answer to the query performed during TEST that uses the #$CycHLSupportModule, SUPPORT-MODULE.  If no answer to TEST's query is justified by a support that uses this module, we should consider the test a failure.")
(comment sksiModulesNeeded "A predicate used to record which SKSI HL modules must be activated in order for a query to run successfully. (#$sksiModulesNeeded QUERY SOURCE) says that in order to run QUERY, an instance of #$CycLQuerySpecification, successfully, the modules for SOURCE, a #$StructuredInformationSource, must be registered.")
(comment SKSIProductivityStepTest-1 "A collection of tests which all ask the same query but vary the productivity limit. The limits are set so that in each successive test, an additional tactic on the root node is activated.")
(comment TestMetric-TotalTime "A #$TestMetric that indicates how long it took for the main test action to run.")
(comment NWSContentTest "A collection of tests, whose instances verify that certain questions are answerable using the National Weather Service database.")
(comment SKSIInferenceTest-DBOnly "A specialization of #$KFDSKSIInferenceTest.  Instances are questions used to test Cyc's ability to do inference using knowledge drawn from both SKSI databases, without drawin on the KB.")
(comment GLFKBContentTest "The collection of all instances of #$KBContentTest that, by design, test the GLF vocabulary.")
(comment testAnswersCycL-Exact "A test, by definition, involves comparing the results of the test with some expected or 'correct' answer.  #$testAnswersCycL-Exact should be used to record these expectations for a #$KBContentTest-FullySpecified when we can predict exactly what answers should be returned.  (#$testAnswersCycL-Exact TEST SETOFBINDINGSETS) states that SETOFBINDINGSETS is the complete result that we expect to be returned by submitting the formula of TEST as a CycL query.  Each expected answer should be present as an #$ELInferenceBindingSet included within SETOFBINDINGSETS.  If some expected answer is not present in the actual results, or if we get an answer that is not included in SETOFBINDINGSETS, that constitutes a test failure.")
(comment TestMetric-AnswerCountAt30Seconds "A #$TestMetric that indicates how many answers had been obtained 30 seconds after the launch of the test query.")
(comment CycSystemTestRun "Elements of #$CycSystemTestRun correspond to discrete tests of the Cyc system.  There are many different kinds of tests that can be classified in different ways and #$CycSystemTestRun is meant to be the umbrella term capturing all the different sorts of tests (or at least those which we wish to give some sort of status in the #$CycKB).  One dimension of classification is purpose of test; Is a given test a regression test, an integrity test, a challenge tests, a performance test, etc, or some combination thereof.  Another dimension of classification is the functionality tested; Does the test involve ask, some nl parsing capability, certain code modules, an application such as the internet movie database, etc.  A third dimenions of classification is the kind of cyc system which the requires; does it require the full kb, the tiny kb, the most recent patch level or kb world?  A fourth dimension of #$CycSystemTestRun classification is the occasion of testing; should the test occur regularly (e.g. every night vs every IKB build, once per week, etc..), should it be manually or automatically invoked when needed?  A fifth dimension is what should be done if a particular test functions a particular way, e.g. if the test is found to be broken should #$CycTestingDaemon email the #$testCyclistsResponsible, etc.  A sixth dimension is how it is implemented, e.g. is the test implemented in #$CycL, or #$SubL (e.g. an inference test or one of Ken Murry's KBI functions), a combination of the two,  e.g. is the test a microtheory (see #$TestQuestionOrTemplateMicrotheory) or something else.")
(disjointWith PhotosyntheticLightReactions-CyclicElectronFlow SugarManufacturing)
(comment TestMetric-ProblemStoreProofCount "A #$TestMetric that indicates how many proofs are present in the problem store of the inference generated by running the test.")
(comment ScenarioTell "A collection of tests which check for distinguishing scenario features determined by tell extraction in situation recognition.  Each tell should be linked to a parent scenario via #$tellDerivesFromScenario, and to a parent type via #$tellForType.")
(comment testAnswerSupportedByHLSupportModule-NotWanted "(#$testAnswerSupportedByHLSupportModule-NotWanted TEST SUPPORT-MODULE) states that no #$CycHLSupportDatastructure justifying an answer to the query performed during TEST should use SUPPORT-MODULE as its #$CycHLSupportModule.  If any justification for some answer to TEST uses SUPPORT-MODULE, that should be considered a test failure.")
(comment TypicalSizesTest "A collection of tests to ensure the integrity and/or completeness of KB representation about the typical sizes of physical objects.")
(comment UnsupportedTestMetric "Each instance #$UnsupportedTestMetric represents a measurement that could be computed during a test, but which we do not have code support for.")
(comment CommonSenseTest-NegatedQuery "A #$CommonSenseTestTypeByQueryForm.  Each instance of #$CommonSenseTest-RuleMacroQuery is a #$CommonSenseTest whose associated query sentence is of the form
<p>
(#$not SENT),
<p>
where SENT is a #$CycLSentence.")
(comment InferenceMetric "Each #$InferenceMetric is a parameter of some code implementing a #$SoftwareTestSpecification, having a value which represents a measurement, computed during the test, of a CycL query state.")
(comment CommonSenseTest-TransitiveViaArgReasoning "A #$CommonSenseTestTypeByReasoningTypeUsed.  Each instance of #$CommonSenseTest-TransitiveViaArgReasoning is a #$CommonSenseTest which is expected to be answered at least in part by appealing to a #$transitiveViaArg assertion.")
(comment CommonSenseTest-PartsReasoning "A subcollection of #$CommonSenseTest.
#$CommonSenseTest-PartsReasoning is the collection of all common sense
tests that test #$Cyc's knowledge of part-whole relationships.")
(comment CollectionTestMetric-Time "A #$CollectionTestMetric that indicates how long it took for all the instances of a #$KBContentTestSpecificationType (taken as a single, multi-part test) to run.")
(comment CommonSenseTest-Ailments "A subcollection of
#$CommonSenseTest. #$CommonSenseTest-Anatomy is the collection of all
common sense tests that test #$Cyc's knowledge of #$AilmentConditions.")
(comment TextLearnerContentTest "A collection of tests, whose instances exercises features of ontology and code that support the #$TheCycTextLearnerProgram.")
(comment SKSI-KB-CrossoverInferenceTest "A collection, an instance of #$CTCAnalystKBContentTestSpecificationType.  Instances are questions used to test Cyc's ability to do inference using knowledge drawn from both SKSI databases and the KB")
(comment MarthaThePassengerPigeon "This was the last surviving passenger pigeon.  Because it was a bird, it was capable of flying.")
(comment DefaultInferenceParameterGroup "The group of inference parameters that are the \"default\" values in the query interface.")
(comment testQuerySpecification "(#$testQuerySpecification TEST-SPEC QUERY-SPEC) states that the test specified by TEST-SPEC will involve running the query specified by QUERY-SPEC.")
(comment TestExecutionRun "Elements correspond to events during which a certain #$TestQueryConstant undergoes a test run. This run could be initiated manually by a Cyclist, or automatically by the #$CycTaskScheduler. Note that a Test Query Constant run could involve running a single test, or a group of tests, depending on the test specification that is selected.")
(comment CommonSenseTest-RuleMacroQuery "A #$CommonSenseTestTypeByQueryForm.  Each instance of #$CommonSenseTest-RuleMacroQuery is a #$CommonSenseTest whose associated query sentence is of the form
<p>
(RMP <ARGS>)
<p>
<i>or</i>
<p>
(#$sentenceTruth (RMP <ARGS>) VAR),
<p>
where RM-PRED is a #$RuleMacroPredicate, <ARGS> is a sequence of #$CycLConstants and/or #$CycLVariables, and VAR is a #$CycLVariable.")
(comment testAnswersCycL-Wanted "A test, by definition, involves comparing the results of the test with some expected or 'correct answer'.  #$testAnswersCycL-Wanted should be used in the case where we cannot predict the entire set of answers that should be retrieved, but wish to ensure that our expected answers are among those retrieved.  (#$testAnswersCycL-Wanted TEST BINDINGSET) states that BINDINGSET is one of the answers (a set of #$ELInferenceBindings) that should be retrieved by submitting TEST's formula as a CycL query.  For each correct answer that we expect to get, there should be one assertion using #$testAnswersCycL-Wanted.  Taken together, these assertions record the minimal set of binding sets necessary for test success.  If any BINDINGSET is missing from the result, a test failure will be signalled.  However, the presence of additional binding sets within the result is not an indication of test failure.")
(comment CommonSenseTest-Geography "A subcollection of #$CommonSenseTest.  #$CommonSenseTest-FeelingAndEmotionReasoning is the collection of all common sense tests that test #$Cyc's ability to answer basic questions about geography.")
(comment TestQueryConstant "The collection of all terms that belong to the ontology of internal KB content tests in Cyc.  A type of #$SubLSExpression. The concept #$TestQueryConstant is a #$SubLExpressionType and a #$KBDependentCollection.")
(comment similarQueries "A symmetric, irreflexive predicate.  (#$similarQueries QUERY-1 QUERY-2) says that QUERY-1 and QUERY-2 are similar, where \"similarity\" is defined broadly to include topicality and similarity in syntactic structure.  Every two sibling queries are similar queries.")
(comment SKSISetReasoningTest "A collection of tests whose instances verify that the removal modules for set reasoning predicates (#$extentCardinality, #$nthLargestElement, #$nthSmallestElement) work with SKSI removal modules.")
(disjointWith CycLQuerySpecification SoftwareTestSpecification)
(comment SKSISemanticJoinEffeciencyTest-2 "A collection of tests which measure the effeciency and correctness of doing a 'semantic join' in Cyc. This collection consists of three tests which ask the same query with the same inference parameters, yet vary the context. #$SKSI-EffeciencyTest-ICT-2 asks the query in the (#$ContentMtFn #$ICT-KS), while the #$SKSI-EffeciencyTest-MIPT-2 asks the same query in the (#$ContentMtFn #$MIPT-KS) and finally the #$SKSI-EffeciencyTest-MIPT-ICT-2 asks the query in the #$SKSIContentCollectorMt.")
(comment TestingConstant "Analogously to

#$WorkflowConstant this constant collects all constants together so

that they may be partitioned out of the KB.  All constants that are relevant to the KB question testing system should be elements of this collection so as not to bloat customer KBs.")
(comment QueryHierarchyPredicate "An instance of #$PredicateType and specialization of #$ObjectPredicate.  This is the collection of all predicates used to represent semantic relationships among instances of #$CycLQuerySpecification.")
(comment CommonSenseTestTypeByReasoningTypeUsed "A #$FacetingCollectionType.  Each instance of #$CommonSenseTestTypeByReasoningTypeUsed is a collection of #$CommonSenseTests COL such that, for some type of reasoning TYPE, each instance of COL is expected to be answered using TYPE (together, perhaps, with other types of reasoning).  Instances include #$CommonSenseTest-TransitiveViaArgReasoning, #$CommonSenseTest-DisjointnessReasoning, and #$CommonSenseTest-BackchainReasoning.")
(comment KBContentTestSpecificationType "Each instance of #$KBContentTestSpecificationType is a collection whose instances are individual KB content test definitions.  Instances of #$KBContentTestSpecificationType represent categories of tests grouped together because they test similar functionality, and which might sensibly be run as a unit.")
(comment NightlyTest "Elements of #$NightlyTest correspond to test objects which should be run once per night by the #$CycTestingDaemon assuming that the #$CycTestingDaemon was able to successfully catch up on operations (If there is a transcript error this is likely to prevent the #$CycTestingDaemon from catching up on operations.)  The #$CycTestingDaemon believes it has caught up on operations if it reaches a KB:Operation number that is greater than or equal to the most recent run that it has had.")
(comment CommonSenseTest-FoodAndDrink "A subcollection of #$CommonSenseTest.  #$CommonSenseTest-FeelingAndEmotionReasoning is the collection of all common sense tests that test #$Cyc's ability to answer basic questions about instances and types of #$FoodOrDrink.")
(comment testResponsibleCyclist "(#$testResponsibleCyclist TEST CYCLIST) states that CYCLIST is the person responsible for mtaintaining TEST.  Therefore, that person should be notified when the test fails.")
(comment peers "A symmetric, irreflexive predicate.  (#$peers AGENT1 AGENT2) says that AGENT1 and AGENT2 are judged to be peers in the context in question.")
(comment logicallyEquivalentQueries "An #$EquivalenceRelation.  (#$logicallyEquivalentQueries QUERY-1 QUERY-2) means that QUERY-1 and QUERY-2 are logically equivalent.")
(comment TestMetric-TimeToThisBinding "A #$TestMetric that indicates how long it took for a particular binding to be found.")
(comment CommonSenseTest-ProbabilityReasoning "#$CommonSenseTest-TemporalReasoning is the
collection of all common sense tests that test #$Cyc's ability to answer
questions about probability and related concepts.")
(comment SKSITemporalReasoningTest "A collection of tests whose instances test temporal reasoning with SKSI removal modules.")
(comment testDependsOnTest "(#$testDependsOnTest TEST DEPENDENT-TEST) indicates that TEST depends on DEPENDENT-TEST.  What this signifies is that if TEST and DEPENDENT-TEST are both being executed in a common test execution, DEPENDENT-TEST has already been executed, and DEPENDENT-TEST has failed, then TEST will not be executed.  It will fail by reason of dependency upon DEPENDENT-TEST's success.")
(comment sksiModulesProblematic "A predicate used to record which SKSI HL modules may cause problems for a specific test when registered.  (#$sksiModulesProblematic TEST SOURCE) says that in order to run TEST (a #$KBContentTest-FullySpecified) successfully, the modules for SOURCE (a #$StructuredInformationSource) should *not* be registered.  Having extra modules registered may slow a test down, reduce the number of answers, or cause spurious answers to be returned.")
(comment CommonSenseTest-GeneralizationReasoning "A #$CommonSenseTestTypeByReasoningTypeUsed.  Each instance of #$CommonSenseTest-GeneralizationReasoning is a #$CommonSenseTest which is expected to be answered at least in part by appealing to some kind of generalization assertion, e.g. one with #$genls, #$subsetOf, #$genlPreds, #$genlMt, #$genlFuncs, or #$genlFunctions in the arg 0 position.")
(comment CommonQueriesForTermTest "The collection of all #$KBContentTest-FullySpecified instances that specify a 'common query' for a given term.  For more information, #$keTestQuestionForTerm.")
(comment ICTContentTestSpecification "A collection of tests, whose instances verify that certain questions are answerable using the International Policy Institute (ICT) database.")
(comment TestTemplateMicrotheory "A collection of templates which each specify a range of queries (possible elements of #$TestQuestionMicrotheory). that can be posed to #$Cyc.  #$testTemplateEnglish should be used to express the template expression in English.  We currently (Feb 98) have no formal means of specifying but can approximate a #$CycL version of the template expression with #$testTemplatePseudoCycL. Every templatized testing query must have its template specified by using either or both of these predicates.  

Some of the queries corresponding to a template (the 'important' ones) are reified in #$Cyc. They are elements of #$TestQuestionMicrotheory. The correspondance between such instantiations and their templates is expressed with #$testQuestionTemplate.  In the short term (e.g. until March 98) we should reify any instantiation that we care about.  But, in the longer term, since some templates can specify an infinite set of queries we might not wish to reify a persisting constant for every conceived instantiation of a given template.  

Templates should be microtheories because when we do not reify a given question, we need someplace to do the ask - i.e. the given #$TestTemplateMicrotheory.  In the longer term, we may also wish to reify queries corresponding to an instance of #$TestTemplateMicrotheory 'on the fly'.")
(comment CommonSenseTest-OpenSentenceQuery "A #$CommonSenseTestTypeByQueryForm.  Each instance of #$CommonSenseTest-OpenSentenceQuery is a #$CommonSenseTest which contains at least one unbound #$CycLVariable.  (Implicitly bound variables count as bound.)  See also #$CommonSenseTest-ClosedSentenceQuery.")
(comment CollectionTestMetric "Each #$CollectionTestMetric is a parameter for a test collection, having a value which represents a measurement computed while all the tests in the collection are run as a set.")
(comment CommonSenseTest-IntentionalStateReasoning "A subcollection of #$CommonSenseTest.  #$CommonSenseTest-IntentionalStateReasoning is the collection of all common sense tests that test #$Cyc's ability to answer basic questions about knowledge, belief, and other intentional states.")
(comment SKSISourceIntegrationContentTest "A collection of tests whose instances verify that certain questions drawing on multiple #$Database-Physical knowledge sources can be answered.  Because this collection draws on multiple knowledge sources, it has multiple #$testCollectionForKnowledgeSource assertions, which may need to be updated as new tests are added.")
(comment CommonSenseTest-FeelingAndEmotionReasoning "A subcollection of #$CommonSenseTest.  #$CommonSenseTest-FeelingAndEmotionReasoning is the collection of all common sense tests that test #$Cyc's ability to answer basic questions about feelings, emotions, and sensations.")
(comment KFDSKSIInferenceTest "A collection, an instance of #$CTCAnalystKBContentTestSpecificationType.  Instances are questions used to test Cyc's ability to do inference using SKSI-ified databases.  For questions that use both database knowledge and KB assertions, see #$SKSI-KB-CrossoverInferenceTest.")
(comment SKSIContentTestType "Each instance of #$SKSIContentTestType is a collection whose instances are individual SKS content test definitions.  Instances of #$SKSIContentTestType represent categories of tests grouped together because they test similar functionality related to the Semantic Knowledge Source Integration project, and which might sensibly be run as a unit.")
(comment CommonSenseTestTypeByQueryForm "A #$FacetingCollectionType.  Each instance of #$CommonSenseTestTypeByQueryForm is a collection of #$CommonSenseTests whose associated query sentences have the same syntactic form (at some specified level of abstraction).  Examples include #$CommonSenseTest-SentenceTruthQuery, #$CommonSenseTest-HypotheticalQuery, and #$CommonSenseTest-OpenSentenceQuery.")
(comment MIPTContentTestSpecification "A collection of tests, whose instances verify that certain questions are answerable using the Oklahoma City National Memorial Institute for the Prevention of Terrorism (MIPT)database.")
(comment InferenceMetric-QueryLevel "Each instance of #$InferenceMetric-QueryLevel is a metric concerning an entire CycL query being tested.")
(comment CommonSenseTest-CalendarReasoning "#$CommonSenseTest-CalendarReasoning is the
collection of all common sense tests that test #$Cyc's ability to answer questions
about calendar-based units of time.")
(comment TestMetric-HaltReason "A #$TestMetric that indicates the reason why the test action halted.")
(comment siblingQueries "A transitive, irreflexive predicate.  (#$siblingQueries QUERY-1 QUERY-2) says that QUERY-2 is the result of replacing one or more arguments from QUERY-1, and vice-versa.")
(comment SKSI-TVA-ReasoningTest "A collection of tests whose instances verify that General Transitivity reasoning works with SKSI removal modules for meaning sentence predicates that are transitive via argument (#$transitiveViaArg, #$transitiveViaArgInverse) with respect to some transitive predicate.")
(comment SituationDecompositionDetectionTest "A collection of tests, whose instances should test system functionality that is relevant to identifying likely decompositions of hypothesized situations in relational data. The name of all such constants should begin with the capitalized letters 'SDDT' standing for 'situation decomposition detection test'.")
(comment testCollectionMetricsToGather "(#$testCollectionMetricsToGather TEST-TYPE METRIC) states that, in the course of executing a set of tests that is denoted by TEST-TYPE, a value will be computed for the #$CollectionTestMetric, METRIC, for the entire set of tests, considered as one multi-part test.  Different metrics may apply for the individual tests that are run (the instances of TEST-TYPE) -- those metrics are declared with #$testMetricsToGather.")
(comment CommonSenseTest-SubsumptionReasoning "A #$CommonSenseTestTypeByReasoningTypeUsed.  Each instance of #$CommonSenseTest-SubsumptionReasoning is a #$CommonSenseTest which is expected to be answered at least in part by appealing to some kind of subsumption assertion, e.g. one with #$temporallySubsumes, #$spatiallySubsumes, #$geographicallySubsumes, #$dateSubsumes, or #$quantitySubsumes in the arg 0 position.")
(comment CommonSenseTest-ConceptualTruthReasoning "A subcollection of #$CommonSenseTest.  #$CommonSenseTest-IntentionalStateReasoning is the collection of all common sense tests that test #$Cyc's ability to answer basic questions involving conceptual or analytic truths (and falsehoods).")
(comment AbductionTest "A collection of tests, whose instances should test system functionality that is relevant to the way the abductive tactician works. The name of these test should usuallky begin with \"AbductionTest-\".")
(comment CDEInferenceTest "A collection, an instance of #$CTCAnalystKBContentTestSpecificationType.  Instances are questions used to test Cyc's ability to answer questions from databases containing the results of text extraction from data feeds.")
(comment SKSIRuleMacroPredReasoningTest "A collection of tests whose instances verify that the removal modules for rule macro predicates (currently #$relationInstanceExists and #$relationExistsInstance) work these predicates appear in SKSI meaning sentences.")
(comment testResponsibleProject "(#$testResponsibleProject TEST PROJECT) states that PROJECT is the endeavor with which TEST is associated.  The #$testResponsibleCyclist for TEST is probably a person working on PROJECT.")
(comment testSpecificationTestedInExecutionRun "(#$testSpecificationTestedInExecutionRun TEST-RUN TEST) means that the #$SoftwareTestOrType TEST was executed in TEST-RUN.")
(comment ILPTestQuery "A collection of tests to assess the functionality of ILP.")
(comment NounPhraseParserTest "A collection of tests, each of which ensures some noun compound parses correctly.")
(comment TestMetric-AnswerCountAt60Seconds "A #$TestMetric that indicates how many answers had been obtained 60 seconds after the test query was launched.")
(comment testAnswer-MultipleChoice "<code>(#$testAnswer-MultipleChoice TEST CHOICE)</code> identifies <code>CHOICE</code> as the correct multiple choice answer for <code>TEST</code>, an instance of #$KBContentTest whose associated query is an instance of #$MultipleChoiceQuerySpecification.")
(comment CommonSenseTest-DisjointnessReasoning "A #$CommonSenseTestTypeByReasoningTypeUsed.  Each instance of #$CommonSenseTest-DisjointnessReasoning is a #$CommonSenseTest which is expected to be answered at least in part by appealing to some kind of disjointness (i.e. \"NAND\"-type) assertion (e.g. one in which #$disjointWith, #$no, #$negationPreds, #$negationMt, #$negationQuantities, or #$incompatibleBeliefSystems occurs in the arg 0 position), or to an assertion like (#$isa COL-TYPE #$DisjointCollectionType).")
(comment KBIntegrityTest "Elements of #$KBIntegrityTest are #$KBContentTest-FullySpecified instances designed to test some aspect of the internal consistency of a #$CycKB.")
(comment PSRIntegrityTest "A collection of tests, each of which verifies the integrity of knowledge about #$PhraseStructureRules.")
(comment testAnswersCycL-NotWanted "A test, by definition, involves comparing the results of the test with some expected or 'correct answer'.  Sometimes, however, we might want a test to compare the results against a list of values that are NOT WANTED in the result.  (#$testAnswersCycL-NotWanted TEST BINDINGSET) where BINDINGSET is a list of bindings which should not be returned when submitting the formula of TEST as a CycL query.  If any BINDINGSET is present in the result of the test, a test failure will be signalled.")
(comment ExpertiseInferenceTest "A collection of tests to access expertise reasoning.")
(comment CBRNEInferenceTest "A collection, an instance of #$CTCAnalystKBContentTestSpecificationType.  Instances are questions used to test Cyc's knowledge in the CBRNE (chemical, biological, radiological, nuclear, high explosives) domain.")
(comment testMetricsToGather "(#$testMetricsToGather TEST METRIC) states that, in the course of performing a test that adheres to the #$SoftwareTestSpecification TEST, a value will be computed for the #$IndividualTestMetric, METRIC.")
(comment CommonSenseTest-Size "A subcollection of #$CommonSenseTest.  #$CommonSenseTest-FeelingAndEmotionReasoning is the collection of all common sense tests that test #$Cyc's ability to answer basic questions about the (relative and absolute) sizes/volumes of things.")
(comment SKSIEffeciencyTest "A collection of tests whose instances test the effeciency of the SKSI system in general.")
(comment CommonSenseTest-SentenceTruthQuery "A #$CommonSenseTestTypeByQueryForm and specialization of #$CommonSenseTest-OpenSentenceQuery.  Each instance of #$CommonSenseTest-SentenceTruthQuery is a #$CommonSenseTest whose associated query sentence is of the form
<p>
(#$sentenceTruth SENT VAR),
<p>
where SENT is a closed #$CycLSentence and VAR is a #$CycLVariable.  Instances of this collection can be thought of as tests that pose \"yes or no\"/\"#$True or #$False\" questions to #$Cyc.")
(comment SKSI-GT-ReasoningTest "A collection of tests whose instances verify that General Transitivity reasoning works with SKSI removal modules for meaning sentence predicates that are also #$TransitiveBinaryPredicates.")
(comment TestMetric-TimeToLastAnswer "A #$TestMetric that indicates how long it took for the latest binding to be found. If the inference ran to exhaust, this will be the time it took to get the final binding.  If it halted before exhausting, this will be the time it took to get the binding that was obtained latest.")
(comment GrammaticalGenderIntegrityTest "A collection of tests, each of which checks for inefficiencies or errors in the structure of Cyc's lexical knowledge.")
(comment TestMetric-AnswerCount "A #$TestMetric that indicates how many answers had been obtained when inference halted.")
(comment testAnswerSupport-Wanted "(#$testAnswerSupport-Wanted TEST SUPPORT) states that at least one of the answers returned to the query performed during TEST should be justified by the #$CycHLSupportDatastructures SUPPORT.  If none of the answers are justified by SUPPORT, we should consider the test to have failed.")
(comment ToyParseTreeIntegrityTest "A collection of tests that use a toy parse tree to verify that parse tree inference is working.")
(comment CommonSenseTest "A collection of tests, whose instances should test system functionality that is relevant to general common sense. The name of all such constants should begin with the capitalized letters 'CST' standing for 'common sense test'. One main source of such questions is the Vaughan Pratt question list or from the questions that the Cycorp staff came up with during the Fall of '97.")
(comment CommonSenseTest-EvaluationReasoning "A #$CommonSenseTestTypeByReasoningTypeUsed.  Each instance of #$CommonSenseTest-EvaluationReasoning is a #$CommonSenseTest which is expected to be answered at least in part by evaluating an expression built from an #$EvaluatableRelation.")
(comment testDerivedFrom "(#$testDerivedFrom QUERY-SPECIFICATION SOURCE) means that the #$KBContentTest-FullySpecified QUERY-SPECIFICATION has its origin in #$AspatialInformationStore SOURCE (such as a #$PropositionalConceptualWork).")
(comment CommonSenseTest-Anatomy "A subcollection of
#$CommonSenseTest. #$CommonSenseTest-Anatomy is the collection of all
common sense tests that test #$Cyc's knowledge of anatomy.")
(comment SpatialReasoningTest "A specialization of #$KBContentTest-FullySpecified. Each instance of #$SpatialReasoningTest is designed to test Cyc's ability to reason about spatial things and the spatial relations that hold between those things.")
(comment WordNet2_0ContentTest "A collection of tests, whose instances verify that certain questions are answerable WordNet 2.0 database.")
(comment CommonSenseTest-BackchainReasoning "A #$CommonSenseTestTypeByReasoningTypeUsed.  Each instance of #$CommonSenseTest-BackchainReasoning is a #$CommonSenseTest which is expected to be answered at least in part by backchaining on a #$CycLRuleAssertion <i>other than the following</i>:
<pre>
(#$or
  (#$trueSentence ?SENT)
  (#$sentenceTruth ?SENT #$False))
<p>
(#$implies
  (#$trueSentence ?SENT)
  (#$sentenceTruth ?SENT #$True)).")
(comment TestMetric-ProblemStoreProblemCount "A #$TestMetric that indicates how many problems are present in the problem store of the inference generated by running the test.")
(comment LinkDiscoveryTest "A collection of tests, whose instances should test system functionality that is relevant to the #$LinkDiscoveryProject. The name of all such constants should begin with the capitalized letters 'LDT' standing for 'link discovery test'.")
(comment testAnswersCycLUnimportant "A test usually involves comparing the results of the test with some expected or 'correct answer'.  However, tests can also be run merely to gather data about the run.  #$testAnswersCycLUnimportant should be used to state that there is no firm expectation of bindings being returned for a #$KBContentTest-FullySpecified.  (#$testAnswersCycLUnimportant TEST)) states that the bindings that result from submitting the formula of TEST as a CycL query are not the concern of the test.  Instead, we are most likely running the test to gather metrics about query performance.")
(comment TestMetric "Each #$TestMetric is a parameter in some body of testing code, having a value which represents a measurement computed during the test.")
(comment CycTestQueryConstantRun-UnformulatableQuestionCycL "(#$testStatus TEST-MT #$CycTestQueryConstantRun-UnformulatableQuestionCycL) means that the #$testQuestionEnglish for the #$TestQuestionMicrotheory, TEST-MT, cannot currently be formulated in CycL.  This attribute can be asserted of a test ask to indicate that the task of formulating the #$testQuestionCycL for this ask has been postponed.")
(comment CommonSenseTest-Biology "A subcollection of #$CommonSenseTest.  #$CommonSenseTest-FeelingAndEmotionReasoning is the collection of all common sense tests that test #$Cyc's ability to answer basic questions about living things.")
(comment testCyclistsReviewer "(#$testCyclistsReviewer TEST CYCLIST) means that CYCLIST is responsible for reviewing and error checking the functioning of TEST.  On the other hand #$testCyclistsResponsible is the person whose job it is to do the KR to make TEST work.")
(comment SKSISemanticJoinEffeciencyTest-1 "A collection of tests which measure the effeciency and correctness of doing a 'semantic join' in Cyc. This collection consists of three tests which ask the same query with the same inference parameters, yet vary the context. #$SKSI-EffeciencyTest-ICT-1 asks the query in the (#$ContentMtFn #$ICT-KS), while the #$SKSI-EffeciencyTest-MIPT-1 asks the same query in the (#$ContentMtFn #$MIPT-KS) and finally the #$SKSI-EffeciencyTest-MIPT-ICT-1 asks the query in the #$SKSIContentCollectorMt.")
(comment testCorrespondsToSourceQuestionNumber "(#$testCorrespondsToSourceQuestionNumber TEST SOURCE NUMBER) says that the #$KBContentTest-FullySpecified TEST corresponds to question number NUMBER from the #$AspatialInformationStore SOURCE.")
(comment preferredTestNotifyStyle "(#$preferredTestNotifyStyle CYCLIST NOTIF-TYPE) indicates that CYCLIST wishes to be notified of test results that they are responsible for using the notification style NOTIF-TYPE.")
(comment OFACContentTest "A collection of tests, whose instances verify that certain questions are answerable using the Office of Foreign Assets Control (OFAC) database.")
(comment cyclificationNotes "A #$DocumentationPredicate and a specialization of #$cyclistNotes
that is used to enter #$HumanCyclists' explanations of their encodings of
given assigned queries in the formulas
(cf. #$InferenceSentenceParameter) of the respective
#$CycLQuerySpecifications.")
(comment TweetyThePenguin "Tweety is the canonical penguin of defeasible reasoning literature.  Because Tweety is a penguin, he is 'ab' with respect to the rule that 'if x is a bird, x is capable of flying.'")
(comment testAnswerSupport-NotWanted "(#$testAnswerSupport-NotWanted TEST SUPPORT) states that SUPPORT should not be one of the #$CycHLSupportDatastructures that justifies any answer to the query performed during TEST.  If some answer to TEST's query is justified by SUPPORT, we should consider the test to have failed.")
(comment CommonSenseTest-MathAndSetTheory "A subcollection of #$CommonSenseTest.  #$CommonSenseTest-MathAndSetTheory is the collection of all common sense tests that test #$Cyc's ability to answer basic questions about numbers, arithmetic, sets, and lists.")
(comment CommonSenseTest-LogicReasoning "A subcollection of #$CommonSenseTest.  #$CommonSenseTest-IntentionalStateReasoning is the collection of all common sense tests that test #$Cyc's ability to answer basic questions about logical principles, general ontological principles, identity, and quotation.")
(comment CommonSenseTest-TemporalReasoning "#$CommonSenseTest-TemporalReasoning is the
collection of all common sense tests that test #$Cyc's ability to answer
questions about units of time, temporal relationships, or 
temporal-qualified statements.")
(comment testStatus "(#$testStatus TESTMT STATUS) is a human Cyclist's way of asserting the current performance of a query s/he has worked on.  TESTMT is an instance of #$TestQuestionMicrotheory, and STATUS is the instance of #$TestStatusAttribute that describes the level at which the query in TESTMT is answerable; e.g., #$Hit-Exact, #$Hit-InExact, #$FalsePositives.  To make more detailed commentary about TESTMT see #$testStatusComment.  Please make any #$testStatus assertions about TESTMt in the microtheory TESTMt--the testing code assumes you will put them in TESTMT.")
(comment TestQueryFn "(#$TestQueryFn TEST) denotes an instance of #$CycLQuerySpecification which represents the query to be done as part of TEST.")
(comment CycTestQueryConstantRun-MissingTestAnswersCycL "An instance of #$CycTestQueryConstantRunByStatus. When attributed to a test, it means that the required #$testAnswersCycL assertion was missing.")
(comment TestQuestionOrTemplateMicrotheory "This

constant currently (Nov 98) has no KR motivation other than to serve

as a #$arg1Isa for predicates like #$testCyclistsResponsible.  It may deserve to

have more specializations such as 'test scenario' in the near future.

If so, its name should be appropriately changed.")
(comment CommonSenseTest-ClosedSentenceQuery "A #$CommonSenseTestTypeByQueryForm.  Each instance of #$CommonSenseTest-ClosedSentenceQuery is a #$CommonSenseTest that contains no unbound #$CycLVariables.  (Implicitly bound variables count as bound.)  See also #$CommonSenseTest-OpenSentenceQuery.")
(comment UrbanCombatTestQuery "A collection of tests whose instances are sample queries about Urban Combat map content.")
(comment CommonSenseTest-Artifacts "A subcollection of #$CommonSenseTest.  #$CommonSenseTest-FeelingAndEmotionReasoning is the collection of all common sense tests that test #$Cyc's ability to answer basic questions about #$Artifacts.")
(comment IndividualTestMetric "Each #$IndividualTestMetric is a parameter in a particular test, having a value which represents a measurement computed during the test.")
(disjointWith SugarManufacturing PhotosyntheticLightReactions-LinearElectronFlow)
(comment testCollectionProjectResponsible "(#$testCollectionProjectResponsible TEST-COLLECTION PROJECT) indicates that the tests in TEST-COLLECTION are of interest to PROJECT.")
(comment CBRNEInferenceTest-Deprecated "A collection, an instance of #$CTCAnalystKBContentTestSpecificationType.  Instances are non-demoable questions used to test Cyc's knowledge in the CBRNE (chemical, biological, radiological, nuclear, high explosives) domain.  That a question is non-demoable could mean that it is blocked by a bug, or that a better, but equivalent, formulation exists.")
(comment CommonSenseTest-HypotheticalQuery "A #$CommonSenseTestTypeByQueryForm.  Each instance of #$CommonSenseTest-HypotheticalQuery is a #$CommonSenseTest whose associated query sentence is of the form
<p>
(#$implies ANTECEDENT CONSEQUENT)
<p>
<i>or</i>
<p>
(#$sentenceTruth (#$implies ANTECEDENT CONSEQUENT) VARIABLE),
<p>
where ANTECEDENT and CONSEQUENT are #$CycLSentences, and VARIABLE is a #$CycLVariable.")
(comment TestMetric-TimeToFirstAnswer "A #$TestMetric that indicates how long it took for the first binding to be found.")
(comment CommonSenseTest-Capability "A subcollection of
#$CommonSenseTest. #$CommonSenseTest-Anatomy is the collection of all
common sense tests that test #$Cyc's knowledge of capabilities.")
(comment NounPhraseParse "Elements of #$NounPhraseParse are things that are desirable parses (sometimese referred to as target parses) to be produced by noun phrase parsing functions such as the recursive block parser (see #$NounPhraseParserTest) or the parse-np function (see #$ParseNounPhraseTest).

For some modes of running these parsing functions, a desirable parse consists of a cyc term and a part of speech.  See #$NPPTFn.  For other modes, a desirable parse consists of simply a FORT (i.e. a #$CycLReifiedDenotationalTerm).")
(genls CommonSenseTest-ConceptualTruthReasoning CommonSenseTest)
(genls TestQueryRun CycQueryRunning)
(genls CommonSenseTest-Answerable CommonSenseTest)
(genls TextualEntailmentKBContentTest KBContentTest)
(genls CommonSenseTest-Anatomy CommonSenseTest-PartsReasoning)
(genls CommonSenseTest-FamilyRelations CommonSenseTest)
(genls CommonSenseTest-LogicReasoning CommonSenseTest)
(genls CommonSenseTest-TemporalReasoning CommonSenseTest)
(genls CommonSenseTest-Size CommonSenseTest)
(genls SKSIContentTest KBContentTest)
(genls CycTestQueryConstantRun-UnformulatableQuestionCycL TestExecutionRun)
(genls CommonSenseTest-Biology CommonSenseTest)
(genls CommonSenseTest-FeelingAndEmotionReasoning CommonSenseTest)
(genls CommonSenseTest-MathAndSetTheory CommonSenseTest)
(genls CommonSenseTest-FoodAndDrink CommonSenseTest)
(genls CycTestQueryConstantRun-MissingTestAnswersCycL TestExecutionRun)
(genls SpatialReasoningTest StructurallySpecificWork)
(genls CommonSenseTest-Artifacts CommonSenseTest)
(genls TestQueryRun PerformanceTesting)
(genls TextualEntailmentKBContentTest StructurallySpecificWork)
(genls CommonSenseTest-CalendarReasoning CommonSenseTest-TemporalReasoning)
(genls TestExecutionRun CycQueryRunning)
(genls CommonSenseTest-PartsReasoning CommonSenseTest)
(genls SKSIContentTest StructurallySpecificWork)
(genls BaxtersCommonSenseTests CommonSenseTest)
(genls CommonSenseTest-IntentionalStateReasoning CommonSenseTest)
(genls CommonSenseTest-Geography CommonSenseTest)
(genlPreds mcTestOptionSubqueryTests conceptuallyCoRelated)
(genls CommonSenseTest-ProbabilityReasoning CommonSenseTest)
(genls NightlyTest CycSystemTestRun)
(genls TestExecutionRun PerformanceTesting)
(genls SpatialReasoningTest KBContentTest)
