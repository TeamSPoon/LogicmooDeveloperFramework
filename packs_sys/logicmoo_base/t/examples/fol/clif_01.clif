:- include(library(logicmoo_test_header)).
:- expects_dialect(clif).
:- kif_io.
;; Module zebra5 - Test Zerbra Puzzle in CLIF for SWI-Prolog
;; Maintainer: Douglas Miles
;; Load with  ?- load_clif(pack(logicmoo_base/t/examples/fol/zebra5))
;; causes deduction of argument types
:- rtrace.
(:- (wdmsg hi))
(:- (module zebra5 ()))
(:- (wdmsg threre))
(:- (ensure_loaded (library logicmoo_clif)))
(set-kif-option :assume-wff)
(kif-mode :tell)
(domain address 1 tHouse)
(domain address 2 tAddress)
(argQuotedIsa address 2 ftInt)

;; Special Logicmoo operator specific to forward chaining
;; (==> (and (domain ?P ?n ?c) (admittedArgument ?p ?n ?i)) (instance ?i ?c))

; ============================================================
; There is only one entity with address 1
; ============================================================
(exists (?h1) (address ?h1 1))

;;;; .{ parent(PARENT,GRAND) & parent(CHILD,PARENT) => grandparent(CHILD,GRAND) }.

.{ forall(c,exists([[m,female],[f,male]], if(human(c), (mother(c,m) & father(c,f))))) }.

:- listing(clif_modal/1).

:- break.

:- kif_compile.
:- show_boxlog.

;;;; .{ parent(C,M) & female(M) <=> mother(C,M) }.


