\input texinfo @c -*-texinfo-*-

@settitle Cplint-R Manual
@include my-bib-macros.texi
@mybibuselist{References}
@paragraphindent none

@c DOCUMENT LICENSE FOLLOWS.
@copying
Copyright @copyright{} 2016 Franco Masotti @email{franco.masotti@@student.unife.it}

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.
@end copying

@titlepage
@title Cplint-R Documentation
@author Franco Masotti
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c Output the table of the contents at the beginning.
@contents

@ifnottex
@node Top
@top SWISH Installer

This manual is for Cplint-R.

@menu
* Description::     A brief description of what this is all about
* Installation::    Installation procedures on various systems
* Protocol::        Formal descriprion of the protocol
* Thanks::          People and communities
* @mybibnode{}::    References to the technologies used
@end menu
@end ifnottex

@c ----
@c ----
@c ----
@c ----

@node Description
@chapter About
@section About
The purpose of this library is to provide an interface between
the Cplint@footnote{@mybibcite{Cplint}} suite and R@footnote{@mybibcite{R}}
to handle graphs made with the ggplot2@footnote{@mybibcite{ggplot2}} package.

This means that the currently available C3js@footnote{@mybibcite{C3js}}
graphing functions are also available for R.

@section Terminology
Any code between @code{<} @code{>} represents pseudocode.

@c ----
@c ----
@c ----
@c ----

@node Installation
@chapter Installation
Cplint-R (will be) is provided as part of the
@footnote{@mybibcite{Cplint on SWISH}} package.

@section Dependencies
Cplint-R has both Prolog and R dependencies:

@subsection Prolog
@itemize @bullet
@item
lists

@item
Cplint

@item
Rserve Client
@end itemize

@subsection R
@itemize @bullet
ggplot2
@end itemize

@c ----
@c ----
@c ----
@c ----

@node Protocol
@chapter Protocol
@section Interface
@subsection Data types used here

See also @uref{http://www.swi-prolog.org/datatypes.html}

@deftp{} atom
@end deftp

@deftp{} dict
@end deftp

@deftp{} string
@end deftp

@deftp{} list
@end deftp

@deftp{} int
@end deftp

@deftp{} float
@end deftp

@deftp{} var
@end deftp

@subsection Predicates
The following is a list of exported predicates available
for the library users'.

Please refer to the Cplint help manual for more information.

--
Only a few of them are currently implemented and the list lack some whcih 
have not been included in the cplint-help documentation. These will be added.
--

TODO TOCHECK

@deffn{Pita} prob_bar_r@
(:@var{Query}:atom,@
-@var{Probability}:dict)
Draw a true-false probability bar ??normalized to 1??
@end deffn

@deffn{Pita} bdd_dot_string_r@
(:@var{Query}:atom,@
-@var{DotString}:string,@
-@var{LV}:list)
...
@end deffn

@deffn{Mcintyre} mc_prob_bar_r@
(:@var{Query}:atom,@
-@var{Probability}:dict)
@end deffn

@deffn{Mcintyre} mc_sample_bar_r@
(:@var{Query}:atom,@
+@var{Samples}:int)
The predicate samples @var{Query} a number of @var{Samples} times and returns
a dict for rendering with ---c3---- as a bar chart with
a bar for the number of successes and a bar for the number
of failures.
If Query is not ground, it considers it as an existential query.
@end deffn

@deffn{Mcintyre} mc_sample_arg_bar_r@
(:@var{Query}:atom,@
+@var{Samples}:int,@
?@var{Arg}:var)
@end deffn

@deffn{Mcintyre} mc_sample_arg_first_bar_r@
(:@var{Query}:atom,@
+@var{Samples}:int,@
?@var{Arg}:var)
@end deffn

@deffn{Mcintyre} mc_rejection_sample_arg_bar_r@
(:@var{Query}:atom,@
:@var{Evidence}:atom,@
+@var{Samples}:int,@
?@var{Arg}:var)
@end deffn

@deffn{Mcintyre} mc_mh_sample_arg_bar_r@
(:@var{Query}:atom,@
:@var{Evidence}:atom,@
+@var{Samples}:int,@
+@var{Mix}:int,@
+@var{Lag}:int,@
?@var{Arg}:var)
@end deffn

@deffn{Mcintyre} histogram_r@
(+@var{List}:list,@
+@var{NBins}:int)
Draws a histogram of the samples in List dividing the domain in
@var{NBins} bins. @var{List} must be a list of couples of the form [V]-W or V-W
where V is a sampled value and W is its weight.
@end deffn

@deffn{Mcintyre} density_r@
(+@var{List}:list,@
+@var{NBins}:int,@
+@var{Min}:float,@
+@var{Max}:float)
Draws a line chart of the density of a sets of samples.
The samples are in @var{List}
as couples [V]-W or V-W where V is a value and W its weigth.
The lines are drawn dividing the domain in
@var{NBins} bins.
@end deffn

@deffn{Mcintyre} densities_r@
(+@var{PriorList}:list,@
+@var{PostList:list},@
+@var{NBins}:int)
Draws a line chart of the density of two sets of samples, usually
prior and post observations. The samples from the prior are in @var{PriorList}
while the samples from the posterior are in @var{PostList}
as couples [V]-W or V-W where V is a value and W its weigth.
The lines are drawn dividing the domain in
@var{NBins} bins.
@end deffn

@section Internals
Important predicates in this library follow a common structure to avoid 
confusion and promote standardization.

Interface predicates are involved in the interaction between input data from a 
program and the plot of that same data. These predicates are usable from the 
programs.

As the name suggests, plotting predicates are only involved in plotting the 
data.

Finally there are other functions which handle the lists and other types of 
data.

@subsection Interface predicates
@verbatim
<cplint_graphing_predicate>_r(<input>):-
    load_r_libraries,
    <operations on the input>,
    geom_<smt>(<new input, possibly lists>),
    finalize_r_graph.
@end verbatim

@subsection Plotting predicates
Predicates directly involving plotting all start with @code{geom_} as prefix.

These predicates work with lists wich are then transformed into R data frames, 
and, as a final instruction, a corresponding plot is generated.

You can visualize the structure with the following pseudocode:
@verbatim
geom_<smt>(<Lists or other input>) :-
    <handle lists>,
    <create a new R data frame with the lists data>,
    <rename data frame colnames to avoid default ones>,
    <ggplot within R>.
@end verbatim

@subsection List handling
The following predicates are used to transform a single list
containing one distribution (x and y) into a list
like @code{[r(X1,Y1), r(X2,Y2), ... , r(Xn,Yn)].}

@verbatim
r_row(X,Y,r(X,Y)).

get_set_from_list(L,R) :-
    maplist(key,L,X),
    maplist(y,L,Y),
    maplist(r_row,X,Y,R).
@end verbatim

This means that @code{R} will contain an X-Y relationship
useful to be passed to a data frame.

In case there are multiple distribution we simply have to call
@code{get_set_from_list/2} the appropriate number of times,
using @code{R[<#>]} ...

@subsection Main data frame creation
As descibed before, a data frame is useful to pass 
structured information between Prolog and R.

In Cplint-R in particular, we use @code{r_data_frame_from_rows/2} provided by
the Rserve Client@footnote{@mybibcite{Rserve Client}} library, in the following
manner:
@verbatim
r_data_frame_from_rows(df[<#>], R[<#>]),
@end verbatim

with @code{#} starting from 0...
In case it is the last data frame then its name
will simply be @code{df}...

@subsection Other predicates.
@verbatim
bin_width(Min,Max,NBins,Width) :-
  D is Max-Min,
  Width is D/NBins.

load_r_libraries :-
    <- library("ggplot2").

finalize_r_graph :-
    r_download.
@end verbatim

@c ----
@c ----
@c ----
@c ----

@node Thanks
@chapter Thanks
TODO

@c ----
@c ----
@c ----
@c ----

@node @mybibnode{}
@chapter References

Some quotations reported here are taken directly from the respective web sites.
@*

@itemize @bullet

@mybibitem{Cplint} "A suite of programs for reasoning with probabilistic
logic programs". See @uref{https://github.com/friguzzi/cplint} and
@uref{https://github.com/friguzzi/cplint/blob/master/doc/help-cplint.pdf} for 
the Cplint help manual.
@*

@mybibitem{R} "R is an integrated suite of software facilities for data 
manipulation, calculation and graphical display". 
See @uref{https://cran.r-project.org/doc/manuals/r-release/R-intro.html}
@*

@mybibitem{ggplot2} "ggplot2 is a plotting system for R, based on the grammar 
of graphics, which tries to take the good parts of base and lattice graphics 
and none of the bad parts. It takes care of many of the fiddly details that 
make plotting a hassle (like drawing legends) as well as providing a powerful 
model of graphics that makes it easy to produce complex multi-layered 
graphics".
See @uref{http://ggplot2.org/}
@*

@mybibitem{C3js} "C3 enables deeper integration of charts into your 
application".
See @uref{http://c3js.org/}
@*

@mybibitem{Cplint on SWISH} "A set of packages that are able to build and 
install SWISH, Cplint on SWISH and an R environment". 
See @uref{https://frnmst.github.io/swish-installer/}
@*

@mybibitem{Rserve client} "Rserve client for SWI-Prolog/SWISH".
See @uref{https://github.com/JanWielemaker/rserve_client}
@*

@end itemize

@bye
